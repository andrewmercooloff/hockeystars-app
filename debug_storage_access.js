// –î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ Supabase Storage
const { createClient } = require('@supabase/supabase-js');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Supabase
const supabaseUrl = 'https://jvsypfwiajuwsyuzkyda.supabase.co';
const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Imp2c3lwZndpYWp1d3N5dXpreWRhIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTM5OTczNTcsImV4cCI6MjA2OTU3MzM1N30.8d8k7HK7lFgIirdHzackMYRn6gGgD5OyqgOUq2rk2RM';

const supabase = createClient(supabaseUrl, supabaseKey);

async function debugStorageAccess() {
  console.log('üîç –î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ Supabase Storage...\n');

  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase
    console.log('1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase...');
    const { data: testData, error: testError } = await supabase
      .from('players')
      .select('count')
      .limit(1);
    
    if (testError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase:', testError);
      return;
    }
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase —Ä–∞–±–æ—Ç–∞–µ—Ç');

    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–∏—Å–æ–∫ buckets
    console.log('\n2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–∏—Å–æ–∫ buckets...');
    const { data: buckets, error: bucketsError } = await supabase.storage.listBuckets();
    
    if (bucketsError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è buckets:', bucketsError);
      console.log('üîç –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', {
        message: bucketsError.message,
        status: bucketsError.status,
        statusCode: bucketsError.statusCode
      });
      return;
    }

    console.log('üì¶ –ù–∞–π–¥–µ–Ω–Ω—ã–µ buckets:');
    if (buckets.length === 0) {
      console.log('   - –ù–µ—Ç buckets');
    } else {
      buckets.forEach(bucket => {
        console.log(`   - ${bucket.name} (public: ${bucket.public}, size_limit: ${bucket.file_size_limit})`);
      });
    }

    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º bucket avatars
    const avatarsBucket = buckets.find(b => b.name === 'avatars');
    if (!avatarsBucket) {
      console.log('\n‚ùå Bucket "avatars" –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ buckets');
      console.log('üí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:');
      console.log('   - Bucket –Ω–µ —Å–æ–∑–¥–∞–Ω');
      console.log('   - –ü—Ä–æ–±–ª–µ–º—ã —Å –ø—Ä–∞–≤–∞–º–∏ –¥–æ—Å—Ç—É–ø–∞');
      console.log('   - Bucket —Å–æ–∑–¥–∞–Ω, –Ω–æ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ API');
      return;
    }

    console.log('\n‚úÖ Bucket "avatars" –Ω–∞–π–¥–µ–Ω');
    console.log(`   - Name: ${avatarsBucket.name}`);
    console.log(`   - Public: ${avatarsBucket.public}`);
    console.log(`   - File size limit: ${avatarsBucket.file_size_limit} bytes`);
    console.log(`   - Created at: ${avatarsBucket.created_at}`);

    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ bucket
    console.log('\n3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ bucket avatars...');
    const { data: files, error: filesError } = await supabase.storage
      .from('avatars')
      .list();

    if (filesError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤:', filesError);
      console.log('üîç –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', {
        message: filesError.message,
        status: filesError.status,
        statusCode: filesError.statusCode
      });
      return;
    }

    console.log(`üìÅ –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: ${files.length}`);
    if (files.length > 0) {
      console.log('üìã –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤:');
      files.slice(0, 5).forEach(file => {
        console.log(`   - ${file.name} (${file.metadata?.size || 'unknown'} bytes)`);
      });
      if (files.length > 5) {
        console.log(`   ... –∏ –µ—â–µ ${files.length - 5} —Ñ–∞–π–ª–æ–≤`);
      }
    }

    // 5. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –ø—É–±–ª–∏—á–Ω–æ–≥–æ URL
    if (files.length > 0) {
      console.log('\n4Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –ø—É–±–ª–∏—á–Ω–æ–≥–æ URL...');
      const testFile = files[0];
      const { data: urlData } = supabase.storage
        .from('avatars')
        .getPublicUrl(testFile.name);

      if (urlData && urlData.publicUrl) {
        console.log('üîó –ü—É–±–ª–∏—á–Ω—ã–π URL –ø–æ–ª—É—á–µ–Ω:', urlData.publicUrl);
        
        // 6. –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å URL
        try {
          const response = await fetch(urlData.publicUrl, { method: 'HEAD' });
          console.log(`üì° HTTP —Å—Ç–∞—Ç—É—Å: ${response.status} ${response.statusText}`);
          
          if (response.ok) {
            console.log('‚úÖ –ü—É–±–ª–∏—á–Ω—ã–π URL –¥–æ—Å—Ç—É–ø–µ–Ω');
          } else {
            console.log('‚ö†Ô∏è –ü—É–±–ª–∏—á–Ω—ã–π URL –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
            console.log('üîç –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:');
            console.log('   - –ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–ª–∏—Ç–∏–∫–∞–º–∏ –¥–æ—Å—Ç—É–ø–∞');
            console.log('   - Bucket –Ω–µ –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –ø—É–±–ª–∏—á–Ω—ã–π');
            console.log('   - –ü—Ä–æ–±–ª–µ–º—ã —Å CDN');
          }
        } catch (error) {
          console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—É–±–ª–∏—á–Ω—ã–π URL:', error.message);
        }
      } else {
        console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—É–±–ª–∏—á–Ω—ã–π URL');
      }
    }

    // 7. –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Ñ–∞–π–ª–∞
    console.log('\n5Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Ñ–∞–π–ª–∞...');
    const testImageData = 'iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAADUlEQVR42mNkYPhfDwAChwGA60e6kgAAAABJRU5ErkJggg==';
    const testBuffer = Buffer.from(testImageData, 'base64');
    const testFileName = `debug_test_${Date.now()}.png`;
    
    const { data: uploadData, error: uploadError } = await supabase.storage
      .from('avatars')
      .upload(testFileName, testBuffer, {
        contentType: 'image/png',
        upsert: false
      });

    if (uploadError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞:', uploadError);
      console.log('üîç –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', {
        message: uploadError.message,
        status: uploadError.status,
        statusCode: uploadError.statusCode
      });
    } else {
      console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω:', uploadData.path);
      
      // –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
      const { error: deleteError } = await supabase.storage
        .from('avatars')
        .remove([testFileName]);
      
      if (deleteError) {
        console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª:', deleteError.message);
      } else {
        console.log('üóëÔ∏è –¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω');
      }
    }

    console.log('\nüéâ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:', error);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É
debugStorageAccess(); 