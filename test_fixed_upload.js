// –°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ uploadImageToStorage
const { createClient } = require('@supabase/supabase-js');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Supabase
const supabaseUrl = 'https://jvsypfwiajuwsyuzkyda.supabase.co';
const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Imp2c3lwZndpYWp1d3N5dXpreWRhIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTM5OTczNTcsImV4cCI6MjA2OTU3MzM1N30.8d8k7HK7lFgIirdHzackMYRn6gGgD5OyqgOUq2rk2RM';

const supabase = createClient(supabaseUrl, supabaseKey);

// –ò–º–∏—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é uploadImageToStorage
const uploadImageToStorage = async (imageUri, fileName) => {
  try {
    console.log('üì§ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Supabase Storage...');
    console.log('üìÅ –í—Ö–æ–¥–Ω–æ–π URI:', imageUri);
    
    // –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
    const timestamp = Date.now();
    const fileExtension = imageUri.split('.').pop() || 'jpg';
    let finalFileName = fileName || `avatar_${timestamp}.${fileExtension}`;
    
    // –û—á–∏—â–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–ª–µ—à–µ–π
    finalFileName = finalFileName.replace(/^\/+/, '').replace(/\/+$/, '');
    
    console.log('üìÅ –ò–º—è —Ñ–∞–π–ª–∞:', finalFileName);
    
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (1x1 –ø–∏–∫—Å–µ–ª—å PNG)
    const testImageData = 'iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAADUlEQVR42mNkYPhfDwAChwGA60e6kgAAAABJRU5ErkJggg==';
    const testBuffer = Buffer.from(testImageData, 'base64');
    
    console.log('üì§ –ó–∞–≥—Ä—É–∂–∞–µ–º –≤ Supabase Storage...');
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤ Supabase Storage
    const { data, error } = await supabase.storage
      .from('avatars')
      .upload(finalFileName, testBuffer, {
        contentType: 'image/png',
        cacheControl: '3600',
        upsert: false
      });
    
    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤ Storage:', error);
      return null;
    }
    
    console.log('‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω –≤ Storage:', data.path);
    
    // –ü–æ–ª—É—á–∞–µ–º –ø—É–±–ª–∏—á–Ω—ã–π URL
    const { data: urlData } = supabase.storage
      .from('avatars')
      .getPublicUrl(finalFileName);
    
    if (!urlData || !urlData.publicUrl) {
      console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—É–±–ª–∏—á–Ω—ã–π URL');
      return null;
    }
    
    const publicUrl = urlData.publicUrl;
    console.log('‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ:', publicUrl);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ –¥–≤–æ–π–Ω—ã—Ö —Å–ª–µ—à–µ–π –≤ URL
    if (publicUrl.includes('avatars//')) {
      console.error('‚ùå –û–ë–ù–ê–†–£–ñ–ï–ù –î–í–û–ô–ù–û–ô –°–õ–ï–® –í URL!');
      console.error('URL:', publicUrl);
      return null;
    }
    
    return publicUrl;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', error);
    return null;
  }
};

async function testFixedUpload() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ uploadImageToStorage...\n');
  
  // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∏–º–µ–Ω —Ñ–∞–π–ª–æ–≤
  const testCases = [
    { uri: 'file://test.jpg', fileName: 'test_avatar.jpg' },
    { uri: 'file://test.jpg', fileName: '/test_avatar.jpg' },  // —Å–æ —Å–ª–µ—à–µ–º –≤ –Ω–∞—á–∞–ª–µ
    { uri: 'file://test.jpg', fileName: 'test_avatar.jpg/' },  // —Å–æ —Å–ª–µ—à–µ–º –≤ –∫–æ–Ω—Ü–µ
    { uri: 'file://test.jpg', fileName: '/test_avatar.jpg/' }, // —Å–æ —Å–ª–µ—à–∞–º–∏ —Å –æ–±–µ–∏—Ö —Å—Ç–æ—Ä–æ–Ω
    { uri: 'file://test.jpg', fileName: undefined }, // –±–µ–∑ fileName
  ];
  
  for (const testCase of testCases) {
    console.log(`\nüß™ –¢–µ—Å—Ç: URI="${testCase.uri}", fileName="${testCase.fileName}"`);
    
    try {
      const result = await uploadImageToStorage(testCase.uri, testCase.fileName);
      
      if (result) {
        console.log('‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ:', result);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
        try {
          const response = await fetch(result, { method: 'HEAD' });
          console.log('üìä HTTP —Å—Ç–∞—Ç—É—Å:', response.status);
        } catch (fetchError) {
          console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å');
        }
      } else {
        console.log('‚ùå –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å');
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞:', error);
    }
  }
  
  console.log('\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testFixedUpload(); 