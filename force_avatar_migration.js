// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –º–∏–≥—Ä–∞—Ü–∏—è –∞–≤–∞—Ç–∞—Ä–æ–≤ –≤ Storage
const { createClient } = require('@supabase/supabase-js');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Supabase
const supabaseUrl = 'https://jvsypfwiajuwsyuzkyda.supabase.co';
const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Imp2c3lwZndpYWp1d3N5dXpreWRhIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTM5OTczNTcsImV4cCI6MjA2OTU3MzM1N30.8d8k7HK7lFgIirdHzackMYRn6gGgD5OyqgOUq2rk2RM';

const supabase = createClient(supabaseUrl, supabaseKey);

async function forceAvatarMigration() {
  console.log('üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –º–∏–≥—Ä–∞—Ü–∏—è –∞–≤–∞—Ç–∞—Ä–æ–≤...\n');

  try {
    // 1. –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤
    const { data: players, error: playersError } = await supabase
      .from('players')
      .select('id, name, avatar');

    if (playersError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–≥—Ä–æ–∫–æ–≤:', playersError);
      return;
    }

    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –∏–≥—Ä–æ–∫–æ–≤: ${players.length}`);

    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–≥–æ –∏–≥—Ä–æ–∫–∞
    for (const player of players) {
      console.log(`\nüë§ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º: ${player.name}`);
      
      if (!player.avatar) {
        console.log('   ‚ùå –ù–µ—Ç –∞–≤–∞—Ç–∞—Ä–∞');
        continue;
      }

      if (player.avatar.startsWith('http')) {
        console.log('   ‚úÖ –£–∂–µ –≤ Storage');
        continue;
      }

      if (player.avatar.startsWith('file://') || player.avatar.startsWith('content://')) {
        console.log('   ‚ö†Ô∏è –õ–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª - —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∞–≤–∞—Ç–∞—Ä');
        
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∞–≤–∞—Ç–∞—Ä –≤ Storage
        const timestamp = Date.now();
        const fileName = `migration_${player.id}_${timestamp}.png`;
        
        // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π —Ü–≤–µ—Ç–Ω–æ–π –∞–≤–∞—Ç–∞—Ä (—Å–∏–Ω–∏–π)
        const avatarData = 'iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAADUlEQVR42mNkYPhfDwAChwGA60e6kgAAAABJRU5ErkJggg==';
        const avatarBuffer = Buffer.from(avatarData, 'base64');
        
        const { data: uploadData, error: uploadError } = await supabase.storage
          .from('avatars')
          .upload(fileName, avatarBuffer, {
            contentType: 'image/png',
            upsert: false
          });

        if (uploadError) {
          console.error(`   ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:`, uploadError);
          continue;
        }

        // –ü–æ–ª—É—á–∞–µ–º –ø—É–±–ª–∏—á–Ω—ã–π URL
        const { data: urlData } = supabase.storage
          .from('avatars')
          .getPublicUrl(fileName);

        if (urlData && urlData.publicUrl) {
          // –û–±–Ω–æ–≤–ª—è–µ–º –∞–≤–∞—Ç–∞—Ä –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
          const { error: updateError } = await supabase
            .from('players')
            .update({ avatar: urlData.publicUrl })
            .eq('id', player.id);

          if (updateError) {
            console.error(`   ‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:`, updateError);
          } else {
            console.log(`   ‚úÖ –ê–≤–∞—Ç–∞—Ä –æ–±–Ω–æ–≤–ª–µ–Ω: ${urlData.publicUrl}`);
          }
        }
      } else {
        console.log('   ‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∞–≤–∞—Ç–∞—Ä–∞');
      }
    }

    // 3. –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    console.log('\nüìä –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞...');
    const { data: finalPlayers, error: finalError } = await supabase
      .from('players')
      .select('name, avatar');

    if (!finalError) {
      let storageCount = 0;
      let localCount = 0;
      let missingCount = 0;

      finalPlayers.forEach(player => {
        if (player.avatar && player.avatar.startsWith('http')) {
          storageCount++;
        } else if (player.avatar && (player.avatar.startsWith('file://') || player.avatar.startsWith('content://'))) {
          localCount++;
        } else {
          missingCount++;
        }
      });

      console.log(`üìà –†–µ–∑—É–ª—å—Ç–∞—Ç –º–∏–≥—Ä–∞—Ü–∏–∏:`);
      console.log(`   ‚úÖ –í Storage: ${storageCount}`);
      console.log(`   ‚ö†Ô∏è –õ–æ–∫–∞–ª—å–Ω—ã–µ: ${localCount}`);
      console.log(`   ‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç: ${missingCount}`);
    }

    console.log('\nüéâ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏:', error);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é
forceAvatarMigration(); 