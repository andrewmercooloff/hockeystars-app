const { createClient } = require('@supabase/supabase-js');

// –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç Supabase
const supabaseUrl = 'https://jvsypfwiajuwsyuzkyda.supabase.co';
const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Imp2c3lwZndpYWp1d3N5dXpreWRhIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTM5OTczNTcsImV4cCI6MjA2OTU3MzM1N30.8d8k7HK7lFgIirdHzackMYRn6gGgD5OyqgOUq2rk2RM';

const supabase = createClient(supabaseUrl, supabaseKey);

async function testImageUpload() {
  try {
    console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ Supabase Storage...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º bucket
    console.log('\nüì¶ –ü—Ä–æ–≤–µ—Ä—è–µ–º bucket avatars...');
    const { data: buckets, error: bucketsError } = await supabase.storage.listBuckets();
    
    if (bucketsError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è buckets:', bucketsError);
      return;
    }
    
    console.log('üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ buckets:', buckets.map(b => b.name));
    
    const avatarsBucket = buckets.find(bucket => bucket.name === 'avatars');
    if (!avatarsBucket) {
      console.log('üì¶ –°–æ–∑–¥–∞–µ–º bucket avatars...');
      const { data, error: createError } = await supabase.storage.createBucket('avatars', {
        public: true,
        allowedMimeTypes: ['image/jpeg', 'image/png', 'image/webp'],
        fileSizeLimit: 5242880
      });
      
      if (createError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è bucket:', createError);
        return;
      }
      
      console.log('‚úÖ Bucket avatars —Å–æ–∑–¥–∞–Ω');
    } else {
      console.log('‚úÖ Bucket avatars —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ bucket
    console.log('\nüìã –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ bucket avatars...');
    const { data: files, error: filesError } = await supabase.storage
      .from('avatars')
      .list();
    
    if (filesError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤:', filesError);
      return;
    }
    
    console.log(`üìÅ –§–∞–π–ª–æ–≤ –≤ bucket: ${files.length}`);
    files.forEach(file => {
      console.log(`   - ${file.name} (${file.metadata?.size || 'unknown'} bytes)`);
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–æ–≤
    console.log('\nüë• –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–æ–≤...');
    const { data: players, error: playersError } = await supabase
      .from('players')
      .select('id, name, avatar, photos');
    
    if (playersError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–≥—Ä–æ–∫–æ–≤:', playersError);
      return;
    }
    
    console.log(`üë§ –ù–∞–π–¥–µ–Ω–æ –∏–≥—Ä–æ–∫–æ–≤: ${players.length}`);
    
    let localAvatars = 0;
    let storageAvatars = 0;
    let nullAvatars = 0;
    
    players.forEach(player => {
      if (player.avatar) {
        if (player.avatar.startsWith('file://') || player.avatar.startsWith('content://') || player.avatar.startsWith('data:')) {
          localAvatars++;
          console.log(`‚ö†Ô∏è –õ–æ–∫–∞–ª—å–Ω—ã–π –∞–≤–∞—Ç–∞—Ä: ${player.name} - ${player.avatar}`);
        } else if (player.avatar.startsWith('http')) {
          storageAvatars++;
          console.log(`‚úÖ Storage –∞–≤–∞—Ç–∞—Ä: ${player.name} - ${player.avatar}`);
        }
      } else {
        nullAvatars++;
        console.log(`‚ùå –ù–µ—Ç –∞–≤–∞—Ç–∞—Ä–∞: ${player.name}`);
      }
    });
    
    console.log('\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–≤–∞—Ç–∞—Ä–æ–≤:');
    console.log(`   –õ–æ–∫–∞–ª—å–Ω—ã–µ: ${localAvatars}`);
    console.log(`   –í Storage: ${storageAvatars}`);
    console.log(`   –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç: ${nullAvatars}`);
    
    if (localAvatars > 0) {
      console.log('\n‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ª–æ–∫–∞–ª—å–Ω—ã–µ –∞–≤–∞—Ç–∞—Ä—ã, —Ç—Ä–µ–±—É—é—â–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏!');
    } else {
      console.log('\n‚úÖ –í—Å–µ –∞–≤–∞—Ç–∞—Ä—ã –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ Storage');
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testImageUpload(); 