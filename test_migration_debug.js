// –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞ –º–∏–≥—Ä–∞—Ü–∏–∏
const { createClient } = require('@supabase/supabase-js');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Supabase
const supabaseUrl = 'https://jvsypfwiajuwsyuzkyda.supabase.co';
const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Imp2c3lwZndpYWp1d3N5dXpreWRhIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTM5OTczNTcsImV4cCI6MjA2OTU3MzM1N30.8d8k7HK7lFgIirdHzackMYRn6gGgD5OyqgOUq2rk2RM';

const supabase = createClient(supabaseUrl, supabaseKey);

async function testMigrationDebug() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–ª–∞–¥–∫–∏ –º–∏–≥—Ä–∞—Ü–∏–∏...\n');

  try {
    // 1. –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–æ–≤
    console.log('1Ô∏è‚É£ –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–æ–≤...');
    const { data: players, error: playersError } = await supabase
      .from('players')
      .select('*')
      .limit(5);

    if (playersError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–≥—Ä–æ–∫–æ–≤:', playersError);
      return;
    }

    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –∏–≥—Ä–æ–∫–æ–≤: ${players.length}`);

    // 2. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥–æ–≥–æ –∏–≥—Ä–æ–∫–∞
    for (const player of players) {
      console.log(`\nüë§ –ò–≥—Ä–æ–∫: ${player.name}`);
      console.log(`   ID: ${player.id}`);
      console.log(`   –ê–≤–∞—Ç–∞—Ä: ${player.avatar || '–ù–µ—Ç'}`);
      
      if (player.avatar) {
        if (player.avatar.startsWith('file://')) {
          console.log(`   ‚ö†Ô∏è –õ–æ–∫–∞–ª—å–Ω—ã–π –∞–≤–∞—Ç–∞—Ä: ${player.avatar}`);
          
          // –ü—Ä–æ–±—É–µ–º –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª (—ç—Ç–æ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ –ø–æ–∫–∞–∂–µ—Ç –æ—à–∏–±–∫—É)
          try {
            const fs = require('fs');
            const path = player.avatar.replace('file://', '');
            console.log(`   üîç –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–æ—á–∏—Ç–∞—Ç—å: ${path}`);
            
            if (fs.existsSync(path)) {
              const stats = fs.statSync(path);
              console.log(`   ‚úÖ –§–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Ä–∞–∑–º–µ—Ä: ${stats.size} bytes`);
            } else {
              console.log(`   ‚ùå –§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
            }
          } catch (error) {
            console.log(`   ‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª—É: ${error.message}`);
          }
        } else if (player.avatar.startsWith('http')) {
          console.log(`   ‚úÖ Storage –∞–≤–∞—Ç–∞—Ä: ${player.avatar}`);
        }
      }
      
      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
      if (player.photos) {
        console.log(`   –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏: ${player.photos}`);
        try {
          const photos = JSON.parse(player.photos);
          if (Array.isArray(photos)) {
            console.log(`   üì∏ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ: ${photos.length}`);
            photos.forEach((photo, index) => {
              if (photo.startsWith('file://')) {
                console.log(`     ‚ö†Ô∏è –õ–æ–∫–∞–ª—å–Ω–æ–µ —Ñ–æ—Ç–æ ${index + 1}: ${photo}`);
              } else if (photo.startsWith('http')) {
                console.log(`     ‚úÖ Storage —Ñ–æ—Ç–æ ${index + 1}: ${photo}`);
              }
            });
          }
        } catch (error) {
          console.log(`   ‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π: ${error.message}`);
        }
      }
    }

    // 3. –ü—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –∏ –∑–∞–≥—Ä—É–∑–∏—Ç—å –µ–≥–æ
    console.log('\n2Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Ñ–∞–π–ª–∞...');
    
    // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
    const testImageData = 'iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAADUlEQVR42mNkYPhfDwAChwGA60e6kgAAAABJRU5ErkJggg==';
    const testBuffer = Buffer.from(testImageData, 'base64');
    const testFileName = `test_migration_${Date.now()}.png`;
    
    console.log(`üìÅ –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª: ${testFileName}`);
    
    const { data: uploadData, error: uploadError } = await supabase.storage
      .from('avatars')
      .upload(testFileName, testBuffer, {
        contentType: 'image/png',
        upsert: false
      });

    if (uploadError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:', uploadError);
    } else {
      console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω:', uploadData.path);
      
      // –ü–æ–ª—É—á–∞–µ–º –ø—É–±–ª–∏—á–Ω—ã–π URL
      const { data: urlData } = supabase.storage
        .from('avatars')
        .getPublicUrl(testFileName);
      
      if (urlData && urlData.publicUrl) {
        console.log('üîó –ü—É–±–ª–∏—á–Ω—ã–π URL:', urlData.publicUrl);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∞–≤–∞—Ç–∞—Ä –ø–µ—Ä–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –Ω–∞ —Ç–µ—Å—Ç–æ–≤—ã–π
        const firstPlayer = players[0];
        console.log(`\n3Ô∏è‚É£ –û–±–Ω–æ–≤–ª—è–µ–º –∞–≤–∞—Ç–∞—Ä –∏–≥—Ä–æ–∫–∞ ${firstPlayer.name}...`);
        
        const { error: updateError } = await supabase
          .from('players')
          .update({ avatar: urlData.publicUrl })
          .eq('id', firstPlayer.id);
        
        if (updateError) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', updateError);
        } else {
          console.log('‚úÖ –ê–≤–∞—Ç–∞—Ä –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ Storage URL');
        }
      }
    }

    console.log('\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testMigrationDebug(); 