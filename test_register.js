// –¢–µ—Å—Ç –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
// –ó–∞–ø—É—Å—Ç–∏—Ç–µ: node test_register.js

const { createClient } = require('@supabase/supabase-js');

const supabaseUrl = 'https://jvsypfwiajuwsyuzkyda.supabase.co';
const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Imp2c3lwZndpYWp1d3N5dXpreWRhIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTM5OTczNTcsImV4cCI6MjA2OTU3MzM1N30.8d8k7HK7lFgIirdHzackMYRn6gGgD5OyqgOUq2rk2RM';

const supabase = createClient(supabaseUrl, supabaseKey);

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö (–∫–æ–ø–∏—è –∏–∑ playerStorage.ts)
const convertPlayerToSupabase = (player) => {
  return {
    name: player.name,
    position: player.position,
    team: player.team,
    age: player.age,
    height: parseInt(player.height) || 0,
    weight: parseInt(player.weight) || 0,
    avatar: player.avatar,
    email: player.email,
    password: player.password,
    status: player.status,
    birth_date: player.birthDate,
    hockey_start_date: player.hockeyStartDate,
    experience: player.experience ? parseInt(player.experience) : 0,
    achievements: player.achievements,
    phone: player.phone,
    city: player.city,
    goals: player.goals ? parseInt(player.goals) : 0,
    assists: player.assists ? parseInt(player.assists) : 0,
    country: player.country,
    grip: player.grip,
    games: player.games ? parseInt(player.games) : 0,
    pull_ups: player.pullUps ? parseInt(player.pullUps) : 0,
    push_ups: player.pushUps ? parseInt(player.pushUps) : 0,
    plank_time: player.plankTime ? parseInt(player.plankTime) : 0,
    sprint_100m: player.sprint100m ? parseFloat(player.sprint100m) : 0,
    long_jump: player.longJump ? parseInt(player.longJump) : 0,
    favorite_goals: player.favoriteGoals || '',
    photos: player.photos && player.photos.length > 0 ? JSON.stringify(player.photos) : '[]',
    number: player.number || ''
  };
};

async function testRegister() {
  try {
    console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –Ω–æ–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞...\n');
    
    // –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞ (–∫–∞–∫ –≤ register.tsx)
    const testPlayer = {
      email: 'test@example.com',
      password: 'test123',
      name: '–¢–µ—Å—Ç–æ–≤—ã–π –ò–≥—Ä–æ–∫',
      status: 'player',
      birthDate: '2008-01-01',
      country: '–ë–µ–ª–∞—Ä—É—Å—å',
      team: '–ü–∏—Ä–∞–Ω—å–∏',
      position: '–ù–∞–ø–∞–¥–∞—é—â–∏–π',
      grip: '–õ–µ–≤—ã–π',
      height: '', // –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ - —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–æ–±–ª–µ–º–æ–π
      weight: '', // –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ - —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–æ–±–ª–µ–º–æ–π
      avatar: 'new_player',
      age: 0
    };
    
    console.log('üìù –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞:');
    console.log(JSON.stringify(testPlayer, null, 2));
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ
    console.log('\nüîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...');
    try {
      const supabaseData = convertPlayerToSupabase(testPlayer);
      console.log('‚úÖ –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ:');
      console.log(JSON.stringify(supabaseData, null, 2));
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è:', error);
      return;
    }
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    console.log('\nüì§ –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...');
    try {
      const supabaseData = convertPlayerToSupabase(testPlayer);
      
      const { data, error } = await supabase
        .from('players')
        .insert([supabaseData])
        .select()
        .single();
      
      if (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –±–∞–∑—É:', error);
        console.error('–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', error.message);
        console.error('–ö–æ–¥ –æ—à–∏–±–∫–∏:', error.code);
        console.error('–î–µ—Ç–∞–ª–∏:', error.details);
        console.error('–ü–æ–¥—Å–∫–∞–∑–∫–∞:', error.hint);
      } else {
        console.log('‚úÖ –ò–≥—Ä–æ–∫ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω:');
        console.log(`   ID: ${data.id}`);
        console.log(`   –ò–º—è: ${data.name}`);
        console.log(`   Email: ${data.email}`);
        console.log(`   –°—Ç–∞—Ç—É—Å: ${data.status}`);
        
        // –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞
        console.log('\nüóëÔ∏è –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞...');
        const { error: deleteError } = await supabase
          .from('players')
          .delete()
          .eq('id', data.id);
        
        if (deleteError) {
          console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è:', deleteError);
        } else {
          console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –∏–≥—Ä–æ–∫ —É–¥–∞–ª–µ–Ω');
        }
      }
    } catch (error) {
      console.error('‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:', error);
    }
    
  } catch (error) {
    console.error('‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
  }
}

testRegister(); 