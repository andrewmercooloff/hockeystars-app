// –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≤–∞—Ç–∞—Ä–æ–≤
const { createClient } = require('@supabase/supabase-js');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Supabase
const supabaseUrl = 'https://jvsypfwiajuwsyuzkyda.supabase.co';
const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Imp2c3lwZndpYWp1d3N5dXpreWRhIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTM5OTczNTcsImV4cCI6MjA2OTU3MzM1N30.8d8k7HK7lFgIirdHzackMYRn6gGgD5OyqgOUq2rk2RM';

const supabase = createClient(supabaseUrl, supabaseKey);

async function testAvatarUpload() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≤–∞—Ç–∞—Ä–æ–≤...\n');

  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–µ –∞–≤–∞—Ç–∞—Ä—ã
    console.log('1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–µ –∞–≤–∞—Ç–∞—Ä—ã...');
    const { data: players, error: playersError } = await supabase
      .from('players')
      .select('id, name, avatar')
      .limit(5);

    if (playersError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–≥—Ä–æ–∫–æ–≤:', playersError);
      return;
    }

    console.log('üìä –¢–µ–∫—É—â–∏–µ –∞–≤–∞—Ç–∞—Ä—ã:');
    players.forEach(player => {
      if (player.avatar && player.avatar.startsWith('http')) {
        console.log(`‚úÖ ${player.name}: Storage URL`);
      } else if (player.avatar && player.avatar.startsWith('file://')) {
        console.log(`‚ö†Ô∏è ${player.name}: –õ–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª`);
      } else {
        console.log(`‚ùå ${player.name}: –ù–µ—Ç –∞–≤–∞—Ç–∞—Ä–∞`);
      }
    });

    // 2. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∞–≤–∞—Ç–∞—Ä
    console.log('\n2Ô∏è‚É£ –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∞–≤–∞—Ç–∞—Ä...');
    
    // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª (1x1 –ø–∏–∫—Å–µ–ª—å PNG)
    const testImageData = 'iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAADUlEQVR42mNkYPhfDwAChwGA60e6kgAAAABJRU5ErkJggg==';
    const testBuffer = Buffer.from(testImageData, 'base64');
    const testFileName = `test_avatar_${Date.now()}.png`;
    
    console.log(`üìÅ –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª: ${testFileName}`);
    
    const { data: uploadData, error: uploadError } = await supabase.storage
      .from('avatars')
      .upload(testFileName, testBuffer, {
        contentType: 'image/png',
        upsert: false
      });

    if (uploadError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:', uploadError);
      return;
    }

    console.log('‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω:', uploadData.path);
    
    // –ü–æ–ª—É—á–∞–µ–º –ø—É–±–ª–∏—á–Ω—ã–π URL
    const { data: urlData } = supabase.storage
      .from('avatars')
      .getPublicUrl(testFileName);
    
    if (urlData && urlData.publicUrl) {
      console.log('üîó –ü—É–±–ª–∏—á–Ω—ã–π URL:', urlData.publicUrl);
      
      // 3. –û–±–Ω–æ–≤–ª—è–µ–º –∞–≤–∞—Ç–∞—Ä –ø–µ—Ä–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞
      const firstPlayer = players[0];
      console.log(`\n3Ô∏è‚É£ –û–±–Ω–æ–≤–ª—è–µ–º –∞–≤–∞—Ç–∞—Ä –∏–≥—Ä–æ–∫–∞ ${firstPlayer.name}...`);
      
      const { error: updateError } = await supabase
        .from('players')
        .update({ avatar: urlData.publicUrl })
        .eq('id', firstPlayer.id);
      
      if (updateError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', updateError);
      } else {
        console.log('‚úÖ –ê–≤–∞—Ç–∞—Ä –æ–±–Ω–æ–≤–ª–µ–Ω');
      }
    }

    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    console.log('\n4Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç...');
    const { data: updatedPlayers, error: updatedError } = await supabase
      .from('players')
      .select('name, avatar')
      .limit(5);

    if (updatedError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', updatedError);
    } else {
      console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:');
      updatedPlayers.forEach(player => {
        if (player.avatar && player.avatar.startsWith('http')) {
          console.log(`‚úÖ ${player.name}: Storage URL`);
        } else if (player.avatar && player.avatar.startsWith('file://')) {
          console.log(`‚ö†Ô∏è ${player.name}: –õ–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª`);
        } else {
          console.log(`‚ùå ${player.name}: –ù–µ—Ç –∞–≤–∞—Ç–∞—Ä–∞`);
        }
      });
    }

    console.log('\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testAvatarUpload(); 