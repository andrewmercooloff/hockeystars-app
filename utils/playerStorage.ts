import AsyncStorage from '@react-native-async-storage/async-storage';

console.log('üì¶ utils/playerStorage.ts –∑–∞–≥—Ä—É–∂–µ–Ω');

export interface Player {
  id: string;
  name: string;
  position: string;
  team: string;
  age: number;
  height: string;
  weight: string;
  photo?: string;
  avatar?: string;
  email?: string;
  password?: string;
  status?: string;
  birthDate?: string;
  hockeyStartDate?: string;
  experience?: string;
  achievements?: string;
  phone?: string;
  city?: string;
  goals?: string;
  assists?: string;
  country?: string;
  grip?: string;
  games?: string;
  pullUps?: string;
  pushUps?: string;
  plankTime?: string;
  sprint100m?: string;
  longJump?: string;
}

export interface Message {
  id: string;
  senderId: string;
  receiverId: string;
  text: string;
  timestamp: Date;
  read: boolean;
}

export interface FriendRequest {
  id: string;
  fromId: string;
  toId: string;
  status: 'pending' | 'accepted' | 'rejected';
  timestamp: Date;
}

// –¢–µ—Å—Ç–æ–≤—ã–µ –∏–≥—Ä–æ–∫–∏ –∫–∞–∫ –±—ã–ª–æ 24 –∏—é–ª—è
const testPlayers: Player[] = [
  {
    id: '1',
    name: '–ê–Ω–¥—Ä–µ–π –ö–æ—Å—Ç–∏—Ü—ã–Ω',
    position: '–ù–∞–ø–∞–¥–∞—é—â–∏–π',
    team: '–î–∏–Ω–∞–º–æ –ú–∏–Ω—Å–∫',
    age: 36,
    height: '183 —Å–º',
    weight: '85 –∫–≥',
    photo: 'kostitsyn1',
    avatar: 'kostitsyn1',
    status: 'star',
    city: '–ú–∏–Ω—Å–∫',
    goals: '25',
    assists: '30'
  },
  {
    id: '2',
    name: '–°–µ—Ä–≥–µ–π –ö–æ—Å—Ç–∏—Ü—ã–Ω',
    position: '–ù–∞–ø–∞–¥–∞—é—â–∏–π',
    team: '–î–∏–Ω–∞–º–æ –ú–∏–Ω—Å–∫',
    age: 34,
    height: '185 —Å–º',
    weight: '87 –∫–≥',
    photo: 'kostitsyn2',
    avatar: 'kostitsyn2',
    status: 'star',
    city: '–ú–∏–Ω—Å–∫',
    goals: '22',
    assists: '28'
  },
  {
    id: '3', 
    name: '–ï–≥–æ—Ä –®–∞—Ä–∞–Ω–≥–æ–≤–∏—á',
    position: '–ù–∞–ø–∞–¥–∞—é—â–∏–π',
    team: '–î–∏–Ω–∞–º–æ –ú–∏–Ω—Å–∫',
    age: 26,
    height: '188 —Å–º',
    weight: '88 –∫–≥',
    photo: 'sharangovich',
    avatar: 'sharangovich',
    status: 'star',
    city: '–ú–∏–Ω—Å–∫',
    goals: '18',
    assists: '22'
  },
  {
    id: '4',
    name: '–ú–∏—Ö–∞–∏–ª –ì—Ä–∞–±–æ–≤—Å–∫–∏–π',
    position: '–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –Ω–∞–ø–∞–¥–∞—é—â–∏–π',
    team: '–î–∏–Ω–∞–º–æ –ú–∏–Ω—Å–∫',
    age: 38,
    height: '180 —Å–º',
    weight: '82 –∫–≥',
    photo: 'grabovsky',
    avatar: 'grabovsky',
    status: 'star',
    city: '–ú–∏–Ω—Å–∫',
    goals: '15',
    assists: '35'
  },
  {
    id: '5',
    name: 'Ivan Merkulov',
    position: '–ó–∞—â–∏—Ç–Ω–∏–∫',
    team: '–Æ–Ω–æ—Å—Ç—å –ú–∏–Ω—Å–∫',
    age: 22,
    height: '188 —Å–º',
    weight: '90 –∫–≥',
    photo: 'merkulov1',
    avatar: 'merkulov1',
    status: '–ú–æ–ª–æ–¥–æ–π –∏–≥—Ä–æ–∫',
    city: '–ú–∏–Ω—Å–∫',
    goals: '8',
    assists: '12'
  },
  {
    id: '6',
    name: 'Petr Merkulov',
    position: '–í—Ä–∞—Ç–∞—Ä—å',
    team: '–Æ–Ω–æ—Å—Ç—å –ú–∏–Ω—Å–∫',
    age: 19,
    height: '190 —Å–º',
    weight: '88 –∫–≥',
    photo: 'merkulov2',
    avatar: 'merkulov2',
    status: '–Æ–Ω–∏–æ—Ä',
    city: '–ú–∏–Ω—Å–∫',
    goals: '0',
    assists: '2'
  },
  {
    id: '7',
    name: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
    position: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
    team: 'HockeyStars',
    age: 30,
    height: '180 —Å–º',
    weight: '80 –∫–≥',
    photo: 'admin',
    avatar: 'admin',
    email: 'admin@hockeystars.com',
    password: 'admin123',
    status: 'admin',
    city: '–ú–∏–Ω—Å–∫'
  }
];

// –ö–ª—é—á–∏ –¥–ª—è AsyncStorage
const PLAYERS_KEY = 'hockeystars_players';
const CURRENT_USER_KEY = 'hockeystars_current_user';
const MESSAGES_KEY = 'hockeystars_messages';
const FRIEND_REQUESTS_KEY = 'hockeystars_friend_requests';
const FRIENDSHIPS_KEY = 'hockeystars_friendships';

export const initializeStorage = async (): Promise<void> => {
  try {
    console.log('üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ö—Ä–∞–Ω–∏–ª–∏—â–∞...');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –¥–∞–Ω–Ω—ã–µ
    const existingPlayers = await AsyncStorage.getItem(PLAYERS_KEY);
    const existingUser = await AsyncStorage.getItem(CURRENT_USER_KEY);

    if (!existingPlayers) {
      console.log('üìä –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –∏–≥—Ä–æ–∫–æ–≤...');
      await AsyncStorage.setItem(PLAYERS_KEY, JSON.stringify(testPlayers));
      console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –∏–≥—Ä–æ–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã');
    } else {
      console.log('üìä –î–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–æ–≤ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç');
    }

    if (!existingUser) {
      console.log('üë§ –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
      await AsyncStorage.removeItem(CURRENT_USER_KEY);
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –¥—Ä—É–∑–µ–π –∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –¥—Ä—É–∂–±—ã
    const friendRequestsData = await AsyncStorage.getItem(FRIEND_REQUESTS_KEY);
    if (!friendRequestsData) {
      console.log('üì® –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∑–∞–ø—Ä–æ—Å–æ–≤ –¥—Ä—É–∂–±—ã...');
      await AsyncStorage.setItem(FRIEND_REQUESTS_KEY, JSON.stringify([]));
    }

    const friendshipsData = await AsyncStorage.getItem(FRIENDSHIPS_KEY);
    if (!friendshipsData) {
      console.log('üë• –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥—Ä—É–∂–±...');
      await AsyncStorage.setItem(FRIENDSHIPS_KEY, JSON.stringify([]));
    }

    // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    await fixCorruptedData();

    // –î–æ–±–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –¥–∞–Ω–Ω—ã–º
    await addAdminToExistingData();

    console.log('‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
  }
};

export const loadPlayers = async (): Promise<Player[]> => {
  try {
    const playersData = await AsyncStorage.getItem(PLAYERS_KEY);
    if (playersData) {
      const players = JSON.parse(playersData);
      console.log(`üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${players.length} –∏–≥—Ä–æ–∫–æ–≤`);
      return players;
    }
    return [];
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–≥—Ä–æ–∫–æ–≤:', error);
    return [];
  }
};

export const getPlayerById = async (id: string): Promise<Player | null> => {
  try {
    const players = await loadPlayers();
    return players.find(player => player.id === id) || null;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞ –ø–æ ID:', error);
    return null;
  }
};

export const addPlayer = async (player: Omit<Player, 'id'>): Promise<Player> => {
  try {
    const players = await loadPlayers();
    const newPlayer: Player = {
      ...player,
      id: Date.now().toString()
    };
    
    players.push(newPlayer);
    await AsyncStorage.setItem(PLAYERS_KEY, JSON.stringify(players));
    
    console.log('‚úÖ –ò–≥—Ä–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω:', newPlayer.name);
    return newPlayer;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞:', error);
    throw error;
  }
};

export const updatePlayer = async (id: string, updates: Partial<Player>): Promise<Player | null> => {
  try {
    const players = await loadPlayers();
    const playerIndex = players.findIndex(p => p.id === id);
    
    if (playerIndex !== -1) {
      players[playerIndex] = { ...players[playerIndex], ...updates };
      await AsyncStorage.setItem(PLAYERS_KEY, JSON.stringify(players));
      console.log('‚úÖ –ò–≥—Ä–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω:', players[playerIndex].name);
      return players[playerIndex];
    }
    
    return null;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞:', error);
    return null;
  }
};

export const findPlayerByCredentials = async (email: string, password: string): Promise<Player | null> => {
  try {
    const players = await loadPlayers();
    const player = players.find(p => p.email === email && p.password === password);
    
    if (player) {
      console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω:', player.name);
    } else {
      console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }
    
    return player || null;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    return null;
  }
};

export const saveCurrentUser = async (user: Player): Promise<void> => {
  try {
    await AsyncStorage.setItem(CURRENT_USER_KEY, JSON.stringify(user));
    console.log('‚úÖ –¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω:', user.name);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
  }
};

export const loadCurrentUser = async (): Promise<Player | null> => {
  try {
    const userData = await AsyncStorage.getItem(CURRENT_USER_KEY);
    if (userData) {
      const user = JSON.parse(userData);
      console.log('üë§ –¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω:', user.name);
      return user;
    }
    console.log('üë§ –¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
    return null;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    return null;
  }
};

export const logoutUser = async (): Promise<void> => {
  try {
    await AsyncStorage.removeItem(CURRENT_USER_KEY);
    console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã—à–µ–ª –∏–∑ —Å–∏—Å—Ç–µ–º—ã');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞ –∏–∑ —Å–∏—Å—Ç–µ–º—ã:', error);
  }
};

export const sendMessage = async (message: Omit<Message, 'id' | 'timestamp'>): Promise<Message> => {
  try {
    const messages = await getMessages(message.senderId, message.receiverId);
    const newMessage: Message = {
      ...message,
      id: Date.now().toString(),
      timestamp: new Date()
    };
    
    messages.push(newMessage);
    await AsyncStorage.setItem(MESSAGES_KEY, JSON.stringify(messages));
    
    return newMessage;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
    throw error;
  }
};

export const getMessages = async (userId1: string, userId2: string): Promise<Message[]> => {
  try {
    const messagesData = await AsyncStorage.getItem(MESSAGES_KEY);
    if (messagesData) {
      const allMessages = JSON.parse(messagesData);
      return allMessages.filter((msg: Message) => 
        (msg.senderId === userId1 && msg.receiverId === userId2) ||
        (msg.senderId === userId2 && msg.receiverId === userId1)
      );
    }
    return [];
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π:', error);
    return [];
  }
};

export const getUnreadMessageCount = async (userId: string): Promise<number> => {
  try {
    const messagesData = await AsyncStorage.getItem(MESSAGES_KEY);
    if (messagesData) {
      const allMessages = JSON.parse(messagesData);
      return allMessages.filter((msg: Message) => 
        msg.receiverId === userId && !msg.read
      ).length;
    }
    return 0;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥—Å—á–µ—Ç–∞ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π:', error);
    return 0;
  }
};

// –°–∏—Å—Ç–µ–º–∞ –¥—Ä—É–∑–µ–π
export const sendFriendRequest = async (fromId: string, toId: string): Promise<FriendRequest> => {
  try {
    const requests = await getFriendRequestsFromStorage();
    const newRequest: FriendRequest = {
      id: Date.now().toString(),
      fromId,
      toId,
      status: 'pending',
      timestamp: new Date()
    };
    
    requests.push(newRequest);
    await AsyncStorage.setItem(FRIEND_REQUESTS_KEY, JSON.stringify(requests));
    
    console.log('‚úÖ –ó–∞–ø—Ä–æ—Å –¥—Ä—É–∂–±—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω');
    return newRequest;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –¥—Ä—É–∂–±—ã:', error);
    throw error;
  }
};

export const getFriendRequests = async (userId: string): Promise<FriendRequest[]> => {
  try {
    const requests = await getFriendRequestsFromStorage();
    return requests.filter(req => req.toId === userId && req.status === 'pending');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –¥—Ä—É–∂–±—ã:', error);
    return [];
  }
};

export const getFriendRequestsFromStorage = async (): Promise<FriendRequest[]> => {
  try {
    const requestsData = await AsyncStorage.getItem(FRIEND_REQUESTS_KEY);
    return requestsData ? JSON.parse(requestsData) : [];
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –¥—Ä—É–∂–±—ã:', error);
    return [];
  }
};

export const respondToFriendRequest = async (requestId: string, accept: boolean): Promise<void> => {
  try {
    const requests = await getFriendRequestsFromStorage();
    const requestIndex = requests.findIndex(req => req.id === requestId);
    
    if (requestIndex !== -1) {
      const request = requests[requestIndex];
      request.status = accept ? 'accepted' : 'rejected';
      
      if (accept) {
        // –î–æ–±–∞–≤–ª—è–µ–º –¥—Ä—É–∂–±—É
        const friendships = await getFriendshipsFromStorage();
        friendships.push({
          userId1: request.fromId,
          userId2: request.toId
        });
        await AsyncStorage.setItem(FRIENDSHIPS_KEY, JSON.stringify(friendships));
      }
      
      await AsyncStorage.setItem(FRIEND_REQUESTS_KEY, JSON.stringify(requests));
      console.log('‚úÖ –û—Ç–≤–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å –¥—Ä—É–∂–±—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω');
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∑–∞–ø—Ä–æ—Å –¥—Ä—É–∂–±—ã:', error);
  }
};

export const getFriends = async (userId: string): Promise<Player[]> => {
  try {
    const friendships = await getFriendshipsFromStorage();
    const friendIds = friendships
      .filter(friendship => 
        friendship.userId1 === userId || friendship.userId2 === userId
      )
      .map(friendship => 
        friendship.userId1 === userId ? friendship.userId2 : friendship.userId1
      );
    
    const players = await loadPlayers();
    return players.filter(player => friendIds.includes(player.id));
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥—Ä—É–∑–µ–π:', error);
    return [];
  }
};

export const getFriendshipsFromStorage = async (): Promise<Array<{userId1: string, userId2: string}>> => {
  try {
    const friendshipsData = await AsyncStorage.getItem(FRIENDSHIPS_KEY);
    return friendshipsData ? JSON.parse(friendshipsData) : [];
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥—Ä—É–∂–±:', error);
    return [];
  }
};

export const addFriendship = async (userId1: string, userId2: string): Promise<void> => {
  try {
    const friendships = await getFriendshipsFromStorage();
    const existingFriendship = friendships.find(friendship => 
      (friendship.userId1 === userId1 && friendship.userId2 === userId2) ||
      (friendship.userId1 === userId2 && friendship.userId2 === userId1)
    );
    
    if (!existingFriendship) {
      friendships.push({ userId1, userId2 });
      await AsyncStorage.setItem(FRIENDSHIPS_KEY, JSON.stringify(friendships));
      console.log('‚úÖ –î—Ä—É–∂–±–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞');
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥—Ä—É–∂–±—ã:', error);
  }
};

export const removeFriendship = async (userId1: string, userId2: string): Promise<void> => {
  try {
    const friendships = await getFriendshipsFromStorage();
    const filteredFriendships = friendships.filter(friendship => 
      !((friendship.userId1 === userId1 && friendship.userId2 === userId2) ||
        (friendship.userId1 === userId2 && friendship.userId2 === userId1))
    );
    
    await AsyncStorage.setItem(FRIENDSHIPS_KEY, JSON.stringify(filteredFriendships));
    console.log('‚úÖ –î—Ä—É–∂–±–∞ —É–¥–∞–ª–µ–Ω–∞');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –¥—Ä—É–∂–±—ã:', error);
  }
};

export const getReceivedFriendRequests = async (userId: string): Promise<Player[]> => {
  try {
    const requests = await getFriendRequestsFromStorage();
    const receivedRequestIds = requests
      .filter(req => req.toId === userId && req.status === 'pending')
      .map(req => req.fromId);
    
    const players = await loadPlayers();
    return players.filter(player => receivedRequestIds.includes(player.id));
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –¥—Ä—É–∂–±—ã:', error);
    return [];
  }
};

export const acceptFriendRequest = async (fromId: string, toId: string): Promise<boolean> => {
  try {
    const requests = await getFriendRequestsFromStorage();
    const request = requests.find(req => 
      req.fromId === fromId && req.toId === toId && req.status === 'pending'
    );
    
    if (request) {
      request.status = 'accepted';
      await AsyncStorage.setItem(FRIEND_REQUESTS_KEY, JSON.stringify(requests));
      
      // –î–æ–±–∞–≤–ª—è–µ–º –¥—Ä—É–∂–±—É
      await addFriendship(fromId, toId);
      
      console.log('‚úÖ –ó–∞–ø—Ä–æ—Å –¥—Ä—É–∂–±—ã –ø—Ä–∏–Ω—è—Ç');
      return true;
    }
    
    return false;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è –∑–∞–ø—Ä–æ—Å–∞ –¥—Ä—É–∂–±—ã:', error);
    return false;
  }
};

export const declineFriendRequest = async (fromId: string, toId: string): Promise<boolean> => {
  try {
    const requests = await getFriendRequestsFromStorage();
    const request = requests.find(req => 
      req.fromId === fromId && req.toId === toId && req.status === 'pending'
    );
    
    if (request) {
      request.status = 'rejected';
      await AsyncStorage.setItem(FRIEND_REQUESTS_KEY, JSON.stringify(requests));
      
      console.log('‚úÖ –ó–∞–ø—Ä–æ—Å –¥—Ä—É–∂–±—ã –æ—Ç–∫–ª–æ–Ω–µ–Ω');
      return true;
    }
    
    return false;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –¥—Ä—É–∂–±—ã:', error);
    return false;
  }
};

export const getFriendshipStatus = async (userId1: string, userId2: string): Promise<string> => {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –¥—Ä—É–∂–±–∞
    const friendships = await getFriendshipsFromStorage();
    const areFriends = friendships.some(friendship => 
      (friendship.userId1 === userId1 && friendship.userId2 === userId2) ||
      (friendship.userId1 === userId2 && friendship.userId2 === userId1)
    );
    
    if (areFriends) {
      return 'friends';
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–ø—Ä–æ—Å –¥—Ä—É–∂–±—ã
    const requests = await getFriendRequestsFromStorage();
    const pendingRequest = requests.find(req => 
      ((req.fromId === userId1 && req.toId === userId2) ||
       (req.fromId === userId2 && req.toId === userId1)) &&
      req.status === 'pending'
    );
    
    if (pendingRequest) {
      return pendingRequest.fromId === userId1 ? 'sent' : 'received';
    }
    
    return 'none';
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –¥—Ä—É–∂–±—ã:', error);
    return 'none';
  }
};

export const addFriend = async (userId1: string, userId2: string): Promise<boolean> => {
  try {
    await addFriendship(userId1, userId2);
    return true;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥—Ä—É–≥–∞:', error);
    return false;
  }
};

export const removeFriend = async (userId1: string, userId2: string): Promise<boolean> => {
  try {
    await removeFriendship(userId1, userId2);
    return true;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –¥—Ä—É–≥–∞:', error);
    return false;
  }
};

export const areFriends = async (userId1: string, userId2: string): Promise<boolean> => {
  try {
    const friendships = await getFriendshipsFromStorage();
    return friendships.some(friendship => 
      (friendship.userId1 === userId1 && friendship.userId2 === userId2) ||
      (friendship.userId1 === userId2 && friendship.userId2 === userId1)
    );
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥—Ä—É–∂–±—ã:', error);
    return false;
  }
};

export const cancelFriendRequest = async (fromId: string, toId: string): Promise<boolean> => {
  try {
    const requests = await getFriendRequestsFromStorage();
    const filteredRequests = requests.filter(req => 
      !(req.fromId === fromId && req.toId === toId && req.status === 'pending')
    );
    
    await AsyncStorage.setItem(FRIEND_REQUESTS_KEY, JSON.stringify(filteredRequests));
    console.log('‚úÖ –ó–∞–ø—Ä–æ—Å –¥—Ä—É–∂–±—ã –æ—Ç–º–µ–Ω–µ–Ω');
    return true;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –∑–∞–ø—Ä–æ—Å–∞ –¥—Ä—É–∂–±—ã:', error);
    return false;
  }
};

export const calculateHockeyExperience = (startDate?: string): string => {
  if (!startDate) return '–ù–µ —É–∫–∞–∑–∞–Ω–æ';
  
  try {
    const start = new Date(startDate);
    const now = new Date();
    const years = now.getFullYear() - start.getFullYear();
    
    const getYearWord = (num: number): string => {
      if (num === 1) return '–≥–æ–¥';
      if (num >= 2 && num <= 4) return '–≥–æ–¥–∞';
      return '–ª–µ—Ç';
    };
    
    return `${years} ${getYearWord(years)}`;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –æ–ø—ã—Ç–∞:', error);
    return '–ù–µ —É–∫–∞–∑–∞–Ω–æ';
  }
};

export const fixCorruptedData = async (): Promise<void> => {
  try {
    console.log('üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...');
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
    console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:', error);
  }
};

// –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
export const forceInitializeStorage = async (): Promise<boolean> => {
  try {
    console.log('üîß –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ö—Ä–∞–Ω–∏–ª–∏—â–∞...');
    await initializeStorage();
    console.log('‚úÖ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    return true;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
    return false;
  }
};

export const getUserConversations = async (userId: string): Promise<any[]> => {
  try {
    console.log('üí¨ –ó–∞–≥—Ä—É–∑–∫–∞ –±–µ—Å–µ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userId);
    // –ü—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
    return [];
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–µ—Å–µ–¥:', error);
    return [];
  }
};

export const loadNotifications = async (userId: string): Promise<any[]> => {
  try {
    console.log('üîî –ó–∞–≥—Ä—É–∑–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userId);
    // –ü—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
    return [];
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', error);
    return [];
  }
};

export const addAdminToExistingData = async (): Promise<void> => {
  try {
    console.log('üëë –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –¥–∞–Ω–Ω—ã–º...');
    const players = await loadPlayers();
    const adminExists = players.some(p => p.status === 'admin');
    
    if (!adminExists) {
      const adminPlayer = testPlayers.find(p => p.status === 'admin');
      if (adminPlayer) {
        await addPlayer(adminPlayer);
        console.log('‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –¥–æ–±–∞–≤–ª–µ–Ω');
      }
    } else {
      console.log('‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:', error);
  }
}; 