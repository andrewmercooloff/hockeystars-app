import AsyncStorage from '@react-native-async-storage/async-storage';

export interface Player {
  id: string;
  name: string;
  position: string;
  team: string;
  age: number;
  height: string;
  weight: string;
  photo?: string;
  email?: string;
  password?: string;
  status?: string;
  birthDate?: string;
  experience?: string;
  achievements?: string;
  phone?: string;
  city?: string;
  goals?: string;
  assists?: string;
}

export interface Message {
  id: string;
  senderId: string;
  receiverId: string;
  text: string;
  timestamp: Date;
  read: boolean;
}

export interface FriendRequest {
  id: string;
  fromId: string;
  toId: string;
  status: 'pending' | 'accepted' | 'rejected';
  timestamp: Date;
}

// –¢–µ—Å—Ç–æ–≤—ã–µ –∏–≥—Ä–æ–∫–∏ –∫–∞–∫ –±—ã–ª–æ 24 –∏—é–ª—è
const testPlayers: Player[] = [
  {
    id: '1',
    name: '–ê–Ω–¥—Ä–µ–π –ö–æ—Å—Ç–∏—Ü—ã–Ω',
    position: '–ù–∞–ø–∞–¥–∞—é—â–∏–π',
    team: '–î–∏–Ω–∞–º–æ –ú–∏–Ω—Å–∫',
    age: 36,
    height: '183 —Å–º',
    weight: '85 –∫–≥',
    photo: '../assets/images/me.jpg',
    status: 'star',
    city: '–ú–∏–Ω—Å–∫',
    goals: '25',
    assists: '30'
  },
  {
    id: '2',
    name: '–°–µ—Ä–≥–µ–π –ö–æ—Å—Ç–∏—Ü—ã–Ω',
    position: '–ù–∞–ø–∞–¥–∞—é—â–∏–π',
    team: '–î–∏–Ω–∞–º–æ –ú–∏–Ω—Å–∫',
    age: 34,
    height: '185 —Å–º',
    weight: '87 –∫–≥',
    photo: '../assets/images/me.jpg',
    status: 'star',
    city: '–ú–∏–Ω—Å–∫',
    goals: '22',
    assists: '28'
  },
  {
    id: '3', 
    name: '–ï–≥–æ—Ä –®–∞—Ä–∞–Ω–≥–æ–≤–∏—á',
    position: '–ù–∞–ø–∞–¥–∞—é—â–∏–π',
    team: '–î–∏–Ω–∞–º–æ –ú–∏–Ω—Å–∫',
    age: 26,
    height: '188 —Å–º',
    weight: '88 –∫–≥',
    photo: '../assets/images/me.jpg',
    status: 'star',
    city: '–ú–∏–Ω—Å–∫',
    goals: '18',
    assists: '22'
  },
  {
    id: '4',
    name: '–ú–∏—Ö–∞–∏–ª –ì—Ä–∞–±–æ–≤—Å–∫–∏–π',
    position: '–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –Ω–∞–ø–∞–¥–∞—é—â–∏–π',
    team: '–î–∏–Ω–∞–º–æ –ú–∏–Ω—Å–∫',
    age: 38,
    height: '180 —Å–º',
    weight: '82 –∫–≥',
    photo: '../assets/images/me.jpg',
    status: 'star',
    city: '–ú–∏–Ω—Å–∫',
    goals: '15',
    assists: '35'
  },
  {
    id: '5',
    name: 'Ivan Merkulov',
    position: '–ó–∞—â–∏—Ç–Ω–∏–∫',
    team: '–Æ–Ω–æ—Å—Ç—å –ú–∏–Ω—Å–∫',
    age: 22,
    height: '188 —Å–º',
    weight: '90 –∫–≥',
    photo: '../assets/images/me.jpg',
    status: '–ú–æ–ª–æ–¥–æ–π –∏–≥—Ä–æ–∫',
    city: '–ú–∏–Ω—Å–∫',
    goals: '8',
    assists: '12'
  },
  {
    id: '6',
    name: 'Petr Merkulov',
    position: '–í—Ä–∞—Ç–∞—Ä—å',
    team: '–Æ–Ω–æ—Å—Ç—å –ú–∏–Ω—Å–∫', 
    age: 19,
    height: '190 —Å–º',
    weight: '88 –∫–≥',
    photo: '../assets/images/me.jpg',
    status: '–Æ–Ω–∏–æ—Ä',
    city: '–ú–∏–Ω—Å–∫',
    goals: '0',
    assists: '2'
  }
];

// –ö–ª—é—á–∏ –¥–ª—è AsyncStorage
const PLAYERS_KEY = 'hockey_players';
const CURRENT_USER_KEY = 'current_user';
const MESSAGES_KEY = 'messages';
const FRIEND_REQUESTS_KEY = 'friend_requests';

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
export const initializeStorage = async (): Promise<void> => {
  try {
    const existingPlayers = await AsyncStorage.getItem(PLAYERS_KEY);
    if (!existingPlayers) {
      await AsyncStorage.setItem(PLAYERS_KEY, JSON.stringify(testPlayers));
      console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –∏–≥—Ä–æ–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ');
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞:', error);
  }
};

// –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤
export const loadPlayers = async (): Promise<Player[]> => {
  try {
    const playersData = await AsyncStorage.getItem(PLAYERS_KEY);
    if (playersData) {
      return JSON.parse(playersData);
    }
    return testPlayers;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–≥—Ä–æ–∫–æ–≤:', error);
    return testPlayers;
  }
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞ –ø–æ ID
export const getPlayerById = async (id: string): Promise<Player | null> => {
  try {
    const players = await loadPlayers();
    return players.find(player => player.id === id) || null;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞:', error);
    return null;
  }
};

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞
export const addPlayer = async (player: Omit<Player, 'id'>): Promise<Player> => {
  try {
    const players = await loadPlayers();
    const newPlayer: Player = {
      ...player,
      id: Date.now().toString()
    };
    
    players.push(newPlayer);
    await AsyncStorage.setItem(PLAYERS_KEY, JSON.stringify(players));
    
    console.log('‚úÖ –ò–≥—Ä–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω:', newPlayer.name);
    return newPlayer;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞:', error);
    throw error;
  }
};

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞
export const updatePlayer = async (id: string, updates: Partial<Player>): Promise<Player | null> => {
  try {
    const players = await loadPlayers();
    const playerIndex = players.findIndex(p => p.id === id);
    
    if (playerIndex === -1) {
      throw new Error('–ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }
    
    players[playerIndex] = { ...players[playerIndex], ...updates };
    await AsyncStorage.setItem(PLAYERS_KEY, JSON.stringify(players));
    
    console.log('‚úÖ –ò–≥—Ä–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω:', players[playerIndex].name);
    return players[playerIndex];
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞:', error);
    return null;
  }
};

// –ü–æ–∏—Å–∫ –∏–≥—Ä–æ–∫–∞ –ø–æ —É—á–µ—Ç–Ω—ã–º –¥–∞–Ω–Ω—ã–º
export const findPlayerByCredentials = async (email: string, password: string): Promise<Player | null> => {
  try {
    const players = await loadPlayers();
    return players.find(player => 
      player.email === email && player.password === password
    ) || null;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∏–≥—Ä–æ–∫–∞:', error);
    return null;
  }
};

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export const saveCurrentUser = async (user: Player): Promise<void> => {
  try {
    await AsyncStorage.setItem(CURRENT_USER_KEY, JSON.stringify(user));
    console.log('‚úÖ –¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω:', user.name);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
  }
};

// –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export const loadCurrentUser = async (): Promise<Player | null> => {
  try {
    const userData = await AsyncStorage.getItem(CURRENT_USER_KEY);
    if (userData) {
      return JSON.parse(userData);
    }
    return null;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    return null;
  }
};

// –í—ã—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export const logoutUser = async (): Promise<void> => {
  try {
    await AsyncStorage.removeItem(CURRENT_USER_KEY);
    console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã—à–µ–ª –∏–∑ —Å–∏—Å—Ç–µ–º—ã');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞:', error);
  }
};

// –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–π —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –¥—Ä—É–∑–µ–π
export const sendMessage = async (message: Omit<Message, 'id' | 'timestamp'>): Promise<Message> => {
  const newMessage: Message = {
    ...message,
    id: Date.now().toString(),
    timestamp: new Date(),
    read: false
  };
  return newMessage;
};

export const getMessages = async (userId1: string, userId2: string): Promise<Message[]> => {
  return [];
};

export const getUnreadMessageCount = async (userId: string): Promise<number> => {
  return 0;
};

export const sendFriendRequest = async (fromId: string, toId: string): Promise<FriendRequest> => {
  const request: FriendRequest = {
    id: Date.now().toString(),
    fromId,
    toId,
    status: 'pending',
    timestamp: new Date()
  };
  return request;
};

export const getFriendRequests = async (userId: string): Promise<FriendRequest[]> => {
  return [];
};

export const respondToFriendRequest = async (requestId: string, accept: boolean): Promise<void> => {
  // –ó–∞–≥–ª—É—à–∫–∞
};

export const getFriends = async (userId: string): Promise<Player[]> => {
  return [];
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ (–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏)
export const uploadLocalPlayersToFirebase = async (): Promise<void> => {
  console.log('üì± –õ–æ–∫–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è - —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å –æ–±–ª–∞–∫–æ–º –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
}; 