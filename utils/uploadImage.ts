import * as FileSystem from 'expo-file-system';
import * as ImageManipulator from 'expo-image-manipulator';
import { supabase } from './supabase';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ bucket avatars
const ensureAvatarsBucket = async () => {
  try {
    // –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ bucket
    const testFileName = `test_access_${Date.now()}.txt`;
    const testContent = 'test';
    
    const { data, error } = await supabase.storage
      .from('avatars')
      .upload(testFileName, testContent, {
        contentType: 'text/plain',
        upsert: false
      });
    
    if (error) {
      console.error('üö®üö®üö® BUCKET_DEBUG: –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ bucket avatars:', error);
      console.log('üö®üö®üö® BUCKET_DEBUG: –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ bucket avatars —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –¥–æ—Å—Ç—É–ø–µ–Ω');
      return false;
    }
    
    // –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
    await supabase.storage
      .from('avatars')
      .remove([testFileName]);
    
    console.log('üö®üö®üö® BUCKET_DEBUG: Bucket avatars –¥–æ—Å—Ç—É–ø–µ–Ω');
    return true;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ bucket:', error);
    return false;
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Supabase Storage
export const uploadImageToStorage = async (imageUri: string, fileName?: string): Promise<string | null> => {
  try {
    console.log('üö®üö®üö® UPLOAD_DEBUG: –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Supabase Storage...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —Å–æ–∑–¥–∞–µ–º bucket –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    const bucketReady = await ensureAvatarsBucket();
    if (!bucketReady) {
      console.error('üö®üö®üö® UPLOAD_DEBUG: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å bucket avatars');
      return null;
    }
    
    // –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
    const timestamp = Date.now();
    const fileExtension = imageUri.split('.').pop() || 'jpg';
    let finalFileName = fileName || `avatar_${timestamp}.${fileExtension}`;
    
    // –û—á–∏—â–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–ª–µ—à–µ–π
    finalFileName = finalFileName.replace(/^\/+/, '').replace(/\/+$/, '');
    
    console.log('üö®üö®üö® UPLOAD_DEBUG: –ò–º—è —Ñ–∞–π–ª–∞:', finalFileName);
    
    // –ï—Å–ª–∏ —ç—Ç–æ –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª, —Å–Ω–∞—á–∞–ª–∞ —Å–∂–∏–º–∞–µ–º –µ–≥–æ
    let processedImageUri = imageUri;
    if (imageUri.startsWith('file://') || imageUri.startsWith('content://')) {
      console.log('üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...');
      
      try {
        const result = await ImageManipulator.manipulateAsync(
          imageUri,
          [{ resize: { width: 400, height: 400 } }],
          { compress: 0.8, format: ImageManipulator.SaveFormat.JPEG }
        );
        
        processedImageUri = result.uri;
        console.log('‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ:', processedImageUri);
      } catch (manipulatorError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', manipulatorError);
        console.log('‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π URI');
        processedImageUri = imageUri;
      }
    }
    
    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ blob
    console.log('üì§ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ blob:', processedImageUri);
    let blob;
    
    if (processedImageUri.startsWith('file://')) {
      // –î–ª—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º expo-file-system
      console.log('üö®üö®üö® UPLOAD_DEBUG: –ò—Å–ø–æ–ª—å–∑—É–µ–º expo-file-system –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞');
      try {
        const base64 = await FileSystem.readAsStringAsync(processedImageUri, {
          encoding: FileSystem.EncodingType.Base64,
        });
        
        console.log('üö®üö®üö® UPLOAD_DEBUG: Base64 –ø–æ–ª—É—á–µ–Ω, –¥–ª–∏–Ω–∞:', base64.length);
        
        // –°–æ–∑–¥–∞–µ–º FormData —Å base64
        const formData = new FormData();
        formData.append('file', {
          uri: processedImageUri,
          type: 'image/jpeg',
          name: finalFileName,
        } as any);
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º FormData –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
        console.log('üö®üö®üö® UPLOAD_DEBUG: FormData —Å–æ–∑–¥–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏');
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ FormData
        const { data, error } = await supabase.storage
          .from('avatars')
          .upload(finalFileName, formData, {
            contentType: 'image/jpeg',
            upsert: true
          });
        
        if (error) {
          console.error('üö®üö®üö® UPLOAD_DEBUG: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —á–µ—Ä–µ–∑ FormData:', error);
          return null;
        }
        
        console.log('üö®üö®üö® UPLOAD_DEBUG: –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω —á–µ—Ä–µ–∑ FormData:', data.path);
        
        // –ü–æ–ª—É—á–∞–µ–º –ø—É–±–ª–∏—á–Ω—ã–π URL
        const { data: urlData } = supabase.storage
          .from('avatars')
          .getPublicUrl(data.path);
        
        const publicUrl = urlData.publicUrl;
        console.log('üö®üö®üö® UPLOAD_DEBUG: –ü—É–±–ª–∏—á–Ω—ã–π URL –ø–æ–ª—É—á–µ–Ω:', publicUrl);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ –¥–≤–æ–π–Ω—ã—Ö —Å–ª–µ—à–µ–π –≤ URL
        if (publicUrl.includes('avatars//')) {
          console.error('‚ùå –û–ë–ù–ê–†–£–ñ–ï–ù –î–í–û–ô–ù–û–ô –°–õ–ï–® –í URL!');
          console.error('URL:', publicUrl);
          return null;
        }
        
        console.log('üö®üö®üö® UPLOAD_DEBUG: –í–æ–∑–≤—Ä–∞—â–∞–µ–º URL:', publicUrl);
        return publicUrl;
        
      } catch (fileSystemError) {
        console.error('üö®üö®üö® UPLOAD_DEBUG: –û—à–∏–±–∫–∞ FileSystem:', fileSystemError);
        return null;
      }
    } else {
      // –î–ª—è –¥—Ä—É–≥–∏—Ö URI –∏—Å–ø–æ–ª—å–∑—É–µ–º fetch
      try {
        const response = await fetch(processedImageUri);
        if (!response.ok) {
          console.error('‚ùå –û—à–∏–±–∫–∞ fetch:', response.status, response.statusText);
          return null;
        }
        blob = await response.blob();
        console.log('üö®üö®üö® UPLOAD_DEBUG: Blob —Å–æ–∑–¥–∞–Ω —á–µ—Ä–µ–∑ fetch, —Ä–∞–∑–º–µ—Ä:', blob.size, '–±–∞–π—Ç');
        
        if (blob.size === 0) {
          console.error('üö®üö®üö® UPLOAD_DEBUG: Blob –ø—É—Å—Ç–æ–π!');
          return null;
        }
        
        console.log('üì§ –ó–∞–≥—Ä—É–∂–∞–µ–º –≤ Supabase Storage...');
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤ Supabase Storage
        const { data, error } = await supabase.storage
          .from('avatars')
          .upload(finalFileName, blob, {
            cacheControl: '3600',
            upsert: false
          });
        
        if (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤ Storage:', error);
          return null;
        }
        
        console.log('‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω –≤ Storage:', data.path);
        
        // –ü–æ–ª—É—á–∞–µ–º –ø—É–±–ª–∏—á–Ω—ã–π URL
        const { data: urlData } = supabase.storage
          .from('avatars')
          .getPublicUrl(finalFileName);
        
        if (!urlData || !urlData.publicUrl) {
          console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—É–±–ª–∏—á–Ω—ã–π URL');
          return null;
        }
        
        const publicUrl = urlData.publicUrl;
        console.log('üö®üö®üö® UPLOAD_DEBUG: –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ:', publicUrl);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ –¥–≤–æ–π–Ω—ã—Ö —Å–ª–µ—à–µ–π –≤ URL
        if (publicUrl.includes('avatars//')) {
          console.error('‚ùå –û–ë–ù–ê–†–£–ñ–ï–ù –î–í–û–ô–ù–û–ô –°–õ–ï–® –í URL!');
          console.error('URL:', publicUrl);
          return null;
        }
        
        console.log('üö®üö®üö® UPLOAD_DEBUG: –í–æ–∑–≤—Ä–∞—â–∞–µ–º URL:', publicUrl);
        return publicUrl;
        
      } catch (fetchError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ fetch:', fetchError);
        return null;
      }
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', error);
    return null;
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ Storage
export const deleteImageFromStorage = async (imageUrl: string): Promise<boolean> => {
  try {
    if (!imageUrl || !imageUrl.includes('avatars/')) {
      return true; // –ù–µ —É–¥–∞–ª—è–µ–º, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –Ω–∞—à Storage
    }
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –∏–∑ URL
    const fileName = imageUrl.split('avatars/').pop()?.split('?')[0];
    if (!fileName) {
      return false;
    }
    
    console.log('üóëÔ∏è –£–¥–∞–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:', fileName);
    
    const { error } = await supabase.storage
      .from('avatars')
      .remove([fileName]);
    
    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', error);
      return false;
    }
    
    console.log('‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ');
    return true;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', error);
    return false;
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ URL –ª–æ–∫–∞–ª—å–Ω—ã–º
export const isLocalImage = (imageUrl: string): boolean => {
  return imageUrl.startsWith('file://') || 
         imageUrl.startsWith('content://') || 
         imageUrl.startsWith('data:');
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ Storage
export const migrateLocalImageToStorage = async (imageUrl: string): Promise<string | null> => {
  if (!isLocalImage(imageUrl)) {
    return imageUrl; // –£–∂–µ –≤ Storage
  }
  
  console.log('üîÑ –ú–∏–≥—Ä–∏—Ä—É–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ Storage...');
  return await uploadImageToStorage(imageUrl);
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
export const checkImageAvailability = async (imageUrl: string): Promise<boolean> => {
  try {
    const response = await fetch(imageUrl, { method: 'HEAD' });
    return response.ok;
  } catch (error) {
    console.log('‚ùå –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ:', imageUrl, error);
    return false;
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞–±–æ—á–µ–≥–æ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å fallback
export const getWorkingImageUrl = async (imageUrl: string, fallbackUrl?: string): Promise<string> => {
  if (!imageUrl) {
    return fallbackUrl || '';
  }
  
  // –ï—Å–ª–∏ —ç—Ç–æ –ª–æ–∫–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
  if (isLocalImage(imageUrl)) {
    return imageUrl;
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
  const isAvailable = await checkImageAvailability(imageUrl);
  
  if (isAvailable) {
    return imageUrl;
  } else {
    console.log('‚ö†Ô∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback:', imageUrl);
    return fallbackUrl || imageUrl; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º fallback –∏–ª–∏ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π URL
  }
}; 