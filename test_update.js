// –¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–∏ updatePlayer
// –ó–∞–ø—É—Å—Ç–∏—Ç–µ: node test_update.js

const { createClient } = require('@supabase/supabase-js');

const supabaseUrl = 'https://jvsypfwiajuwsyuzkyda.supabase.co';
const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Imp2c3lwZndpYWp1d3N5dXpreWRhIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTM5OTczNTcsImV4cCI6MjA2OTU3MzM1N30.8d8k7HK7lFgIirdHzackMYRn6gGgD5OyqgOUq2rk2RM';

const supabase = createClient(supabaseUrl, supabaseKey);

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö (–∫–æ–ø–∏—è –∏–∑ playerStorage.ts)
const convertSupabaseToPlayer = (supabasePlayer) => {
  return {
    id: supabasePlayer.id,
    name: supabasePlayer.name,
    position: supabasePlayer.position,
    team: supabasePlayer.team,
    age: supabasePlayer.age,
    height: supabasePlayer.height ? `${supabasePlayer.height} —Å–º` : '',
    weight: supabasePlayer.weight ? `${supabasePlayer.weight} –∫–≥` : '',
    avatar: supabasePlayer.avatar,
    email: supabasePlayer.email,
    password: supabasePlayer.password,
    status: supabasePlayer.status,
    birthDate: supabasePlayer.birth_date,
    hockeyStartDate: supabasePlayer.hockey_start_date,
    experience: supabasePlayer.experience ? supabasePlayer.experience.toString() : '',
    achievements: supabasePlayer.achievements,
    phone: supabasePlayer.phone,
    city: supabasePlayer.city,
    goals: supabasePlayer.goals ? supabasePlayer.goals.toString() : '0',
    assists: supabasePlayer.assists ? supabasePlayer.assists.toString() : '0',
    country: supabasePlayer.country,
    grip: supabasePlayer.grip,
    games: supabasePlayer.games ? supabasePlayer.games.toString() : '0',
    pullUps: supabasePlayer.pull_ups ? supabasePlayer.pull_ups.toString() : '0',
    pushUps: supabasePlayer.push_ups ? supabasePlayer.push_ups.toString() : '0',
    plankTime: supabasePlayer.plank_time ? supabasePlayer.plank_time.toString() : '0',
    sprint100m: supabasePlayer.sprint_100m ? supabasePlayer.sprint_100m.toString() : '0',
    longJump: supabasePlayer.long_jump ? supabasePlayer.long_jump.toString() : '0',
    favoriteGoals: supabasePlayer.favorite_goals || '',
    photos: supabasePlayer.photos && supabasePlayer.photos !== '[]' ? 
      (() => {
        try {
          return JSON.parse(supabasePlayer.photos);
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ photos:', error);
          return [];
        }
      })() : [],
    number: supabasePlayer.number || '',
    unreadNotificationsCount: 0,
    unreadMessagesCount: 0
  };
};

// –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞ (–∫–æ–ø–∏—è –∏–∑ playerStorage.ts)
const updatePlayer = async (id, updates) => {
  try {
    console.log('üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –∏–≥—Ä–æ–∫–∞ —Å ID:', id);
    console.log('üìù –û–±–Ω–æ–≤–ª–µ–Ω–∏—è:', JSON.stringify(updates, null, 2));
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç Supabase
    const supabaseUpdates = {};
    
    if (updates.height) supabaseUpdates.height = parseInt(updates.height) || 0;
    if (updates.weight) supabaseUpdates.weight = parseInt(updates.weight) || 0;
    if (updates.birthDate) supabaseUpdates.birth_date = updates.birthDate;
    if (updates.hockeyStartDate) supabaseUpdates.hockey_start_date = updates.hockeyStartDate;
    if (updates.experience) supabaseUpdates.experience = parseInt(updates.experience) || 0;
    if (updates.goals) supabaseUpdates.goals = parseInt(updates.goals) || 0;
    if (updates.assists) supabaseUpdates.assists = parseInt(updates.assists) || 0;
    if (updates.games) supabaseUpdates.games = parseInt(updates.games) || 0;
    if (updates.pullUps) supabaseUpdates.pull_ups = parseInt(updates.pullUps) || 0;
    if (updates.pushUps) supabaseUpdates.push_ups = parseInt(updates.pushUps) || 0;
    if (updates.plankTime) supabaseUpdates.plank_time = parseInt(updates.plankTime) || 0;
    if (updates.sprint100m) supabaseUpdates.sprint_100m = parseFloat(updates.sprint100m) || 0;
    if (updates.longJump) supabaseUpdates.long_jump = parseInt(updates.longJump) || 0;
    if (updates.favoriteGoals !== undefined) supabaseUpdates.favorite_goals = updates.favoriteGoals;
    if (updates.photos !== undefined) supabaseUpdates.photos = updates.photos && updates.photos.length > 0 ? JSON.stringify(updates.photos) : '[]';
    if (updates.number !== undefined) supabaseUpdates.number = updates.number;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ–ª—è –Ω–∞–ø—Ä—è–º—É—é
    Object.assign(supabaseUpdates, {
      name: updates.name,
      position: updates.position,
      team: updates.team,
      age: updates.age,
      avatar: updates.avatar,
      email: updates.email,
      password: updates.password,
      status: updates.status,
      achievements: updates.achievements,
      phone: updates.phone,
      city: updates.city,
      country: updates.country,
      grip: updates.grip
    });
    
    console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Supabase:', JSON.stringify(supabaseUpdates, null, 2));
    
    const { data, error } = await supabase
      .from('players')
      .update(supabaseUpdates)
      .eq('id', id)
      .select()
      .single();
    
    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞:', error);
      return null;
    }
    
    console.log('‚úÖ –ò–≥—Ä–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ');
    return convertSupabaseToPlayer(data);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞:', error);
    return null;
  }
};

async function testUpdate() {
  try {
    console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é updatePlayer...\n');
    
    // –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞
    const { data: players, error: playersError } = await supabase
      .from('players')
      .select('*')
      .limit(1);
    
    if (playersError || !players || players.length === 0) {
      console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–≥—Ä–æ–∫–æ–≤:', playersError);
      return;
    }
    
    const player = players[0];
    console.log('üë§ –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞ –∏–≥—Ä–æ–∫–µ:', player.name);
    console.log('üÜî ID:', player.id);
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    const testUpdates = {
      number: '99',
      favoriteGoals: 'https://youtube.com/watch?v=test123\nhttps://youtube.com/watch?v=test456',
      photos: ['photo1.jpg', 'photo2.jpg'],
      height: '185',
      weight: '80'
    };
    
    console.log('\nüìù –¢–µ—Å—Ç–æ–≤—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', JSON.stringify(testUpdates, null, 2));
    
    const updatedPlayer = await updatePlayer(player.id, testUpdates);
    
    if (updatedPlayer) {
      console.log('\n‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:');
      console.log(`   –ù–æ–º–µ—Ä: ${updatedPlayer.number}`);
      console.log(`   –õ—é–±–∏–º—ã–µ –≥–æ–ª—ã: ${updatedPlayer.favoriteGoals}`);
      console.log(`   –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏: ${JSON.stringify(updatedPlayer.photos)}`);
      console.log(`   –†–æ—Å—Ç: ${updatedPlayer.height}`);
      console.log(`   –í–µ—Å: ${updatedPlayer.weight}`);
    } else {
      console.log('‚ùå –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å');
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å
    console.log('\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑–µ...');
    const { data: checkData, error: checkError } = await supabase
      .from('players')
      .select('*')
      .eq('id', player.id)
      .single();
    
    if (checkError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏:', checkError);
    } else {
      console.log('üìã –î–∞–Ω–Ω—ã–µ –≤ –±–∞–∑–µ:');
      console.log(`   –ù–æ–º–µ—Ä: ${checkData.number}`);
      console.log(`   –õ—é–±–∏–º—ã–µ –≥–æ–ª—ã: ${checkData.favorite_goals}`);
      console.log(`   –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏: ${checkData.photos}`);
      console.log(`   –†–æ—Å—Ç: ${checkData.height}`);
      console.log(`   –í–µ—Å: ${checkData.weight}`);
    }
    
  } catch (error) {
    console.error('‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞:', error);
  }
}

testUpdate(); 