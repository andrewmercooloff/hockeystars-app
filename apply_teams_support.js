const { createClient } = require('@supabase/supabase-js');
const fs = require('fs');
const path = require('path');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Supabase
const supabaseUrl = 'https://jvsypfwiajuwsyuzkyda.supabase.co';
const supabaseAnonKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Imp2c3lwZndpYWp1d3N5dXpreWRhIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTM5OTczNTcsImV4cCI6MjA2OTU3MzM1N30.8d8k7HK7lFgIirdHzackMYRn6gGgD5OyqgOUq2rk2RM';

const supabase = createClient(supabaseUrl, supabaseAnonKey);

async function applyTeamsSupport() {
  try {
    console.log('üöÄ –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∫–æ–º–∞–Ω–¥ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
    
    // –ß–∏—Ç–∞–µ–º SQL —Ñ–∞–π–ª
    const sqlPath = path.join(__dirname, 'database', 'add_teams_support.sql');
    const sqlContent = fs.readFileSync(sqlPath, 'utf8');
    
    console.log('üìÑ SQL —Ñ–∞–π–ª –ø—Ä–æ—á–∏—Ç–∞–Ω, —Ä–∞–∑–º–µ—Ä:', sqlContent.length, '—Å–∏–º–≤–æ–ª–æ–≤');
    
    // –†–∞–∑–±–∏–≤–∞–µ–º SQL –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    const sqlCommands = sqlContent
      .split(';')
      .map(cmd => cmd.trim())
      .filter(cmd => cmd.length > 0 && !cmd.startsWith('--'));
    
    console.log('üîß –ù–∞–π–¥–µ–Ω–æ SQL –∫–æ–º–∞–Ω–¥:', sqlCommands.length);
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—ã –ø–æ –æ—á–µ—Ä–µ–¥–∏
    for (let i = 0; i < sqlCommands.length; i++) {
      const command = sqlCommands[i];
      if (command.trim()) {
        console.log(`\nüìù –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã ${i + 1}/${sqlCommands.length}:`);
        console.log(command.substring(0, 100) + (command.length > 100 ? '...' : ''));
        
        try {
          const { data, error } = await supabase.rpc('exec_sql', { sql: command });
          
          if (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ ${i + 1}:`, error);
            // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥—Ä—É–≥–∏—Ö –∫–æ–º–∞–Ω–¥
          } else {
            console.log(`‚úÖ –ö–æ–º–∞–Ω–¥–∞ ${i + 1} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ`);
          }
        } catch (err) {
          console.error(`‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –≤ –∫–æ–º–∞–Ω–¥–µ ${i + 1}:`, err.message);
        }
      }
    }
    
    console.log('\nüéâ –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ SQL –∫–æ–º–∞–Ω–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã
    console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü...');
    
    const { data: teamsData, error: teamsError } = await supabase
      .from('teams')
      .select('count')
      .limit(1);
    
    if (teamsError) {
      console.error('‚ùå –¢–∞–±–ª–∏—Ü–∞ teams –Ω–µ –Ω–∞–π–¥–µ–Ω–∞:', teamsError);
    } else {
      console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ teams —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
    }
    
    const { data: playerTeamsData, error: playerTeamsError } = await supabase
      .from('player_teams')
      .select('count')
      .limit(1);
    
    if (playerTeamsError) {
      console.error('‚ùå –¢–∞–±–ª–∏—Ü–∞ player_teams –Ω–µ –Ω–∞–π–¥–µ–Ω–∞:', playerTeamsError);
    } else {
      console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ player_teams —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–∞–Ω–¥
    const { data: teamsCount, error: countError } = await supabase
      .from('teams')
      .select('*', { count: 'exact' });
    
    if (countError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥—Å—á–µ—Ç–∞ –∫–æ–º–∞–Ω–¥:', countError);
    } else {
      console.log(`‚úÖ –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö ${teamsCount.length} –∫–æ–º–∞–Ω–¥`);
    }
    
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
  }
}

// –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ - –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ SQL Editor
async function checkDatabaseStatus() {
  try {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã
    const { data: tables, error: tablesError } = await supabase
      .from('information_schema.tables')
      .select('table_name')
      .eq('table_schema', 'public');
    
    if (tablesError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ç–∞–±–ª–∏—Ü:', tablesError);
    } else {
      console.log('üìã –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã:');
      tables.forEach(table => {
        console.log(`   - ${table.table_name}`);
      });
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–±–ª–∏—Ü–∞ teams
    const teamsExists = tables?.some(table => table.table_name === 'teams');
    
    if (teamsExists) {
      console.log('‚ö†Ô∏è  –¢–∞–±–ª–∏—Ü–∞ teams —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–∞–Ω–¥
      const { data: teams, error: teamsError } = await supabase
        .from('teams')
        .select('*');
      
      if (teamsError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥:', teamsError);
      } else {
        console.log(`‚úÖ –í —Ç–∞–±–ª–∏—Ü–µ teams ${teams.length} –∑–∞–ø–∏—Å–µ–π`);
        if (teams.length > 0) {
          console.log('üìù –ü—Ä–∏–º–µ—Ä—ã –∫–æ–º–∞–Ω–¥:');
          teams.slice(0, 5).forEach(team => {
            console.log(`   - ${team.name} (${team.type})`);
          });
        }
      }
    } else {
      console.log('‚ùå –¢–∞–±–ª–∏—Ü–∞ teams –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ù—É–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å SQL —Å–∫—Ä–∏–ø—Ç.');
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞:', error);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
checkDatabaseStatus().then(() => {
  console.log('\nüí° –î–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è SQL –∏–∑–º–µ–Ω–µ–Ω–∏–π:');
  console.log('1. –û—Ç–∫—Ä–æ–π—Ç–µ Supabase Dashboard');
  console.log('2. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ SQL Editor');
  console.log('3. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ database/add_teams_support.sql');
  console.log('4. –í—ã–ø–æ–ª–Ω–∏—Ç–µ SQL –∫–æ–º–∞–Ω–¥—ã');
  console.log('\nüìÑ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ SQL —Ñ–∞–π–ª–∞:');
  console.log('='.repeat(50));
  
  const sqlPath = path.join(__dirname, 'database', 'add_teams_support.sql');
  if (fs.existsSync(sqlPath)) {
    const sqlContent = fs.readFileSync(sqlPath, 'utf8');
    console.log(sqlContent);
  } else {
    console.log('‚ùå SQL —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω');
  }
}); 