// –¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª–µ–π
// –ó–∞–ø—É—Å—Ç–∏—Ç–µ: node test_duplicate_profiles.js

const { createClient } = require('@supabase/supabase-js');

const supabaseUrl = 'https://jvsypfwiajuwsyuzkyda.supabase.co';
const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Imp2c3lwZndpYWp1d3N5dXpreWRhIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTM5OTczNTcsImV4cCI6MjA2OTU3MzM1N30.8d8k7HK7lFgIirdHzackMYRn6gGgD5OyqgOUq2rk2RM';

const supabase = createClient(supabaseUrl, supabaseKey);

async function testDuplicateProfiles() {
  try {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª–µ–π...\n');
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const { data: users, error } = await supabase
      .from('players')
      .select('id, name, email, status, created_at')
      .order('created_at', { ascending: false });
    
    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
      return;
    }
    
    console.log(`üìã –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${users.length}\n`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ email
    const emailCounts = {};
    const duplicateEmails = [];
    
    users.forEach(user => {
      if (user.email) {
        emailCounts[user.email] = (emailCounts[user.email] || 0) + 1;
        if (emailCounts[user.email] > 1) {
          duplicateEmails.push(user.email);
        }
      }
    });
    
    // –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –∏–∑ –º–∞—Å—Å–∏–≤–∞
    const uniqueDuplicateEmails = [...new Set(duplicateEmails)];
    
    if (uniqueDuplicateEmails.length > 0) {
      console.log('‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è email:');
      uniqueDuplicateEmails.forEach(email => {
        const duplicates = users.filter(user => user.email === email);
        console.log(`\nüìß Email: ${email}`);
        console.log(`   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: ${duplicates.length}`);
        duplicates.forEach((user, index) => {
          console.log(`   ${index + 1}. ${user.name} (ID: ${user.id}) - ${user.status}`);
          console.log(`      –°–æ–∑–¥–∞–Ω: ${user.created_at}`);
        });
      });
      
      console.log('\nüîß –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:');
      console.log('1. –£–¥–∞–ª–∏—Ç–µ –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è –ø—Ä–æ—Ñ–∏–ª–∏ —á–µ—Ä–µ–∑ Supabase Dashboard');
      console.log('2. –û—Å—Ç–∞–≤—å—Ç–µ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è –∫–∞–∂–¥–æ–≥–æ email');
      console.log('3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –æ—Å—Ç–∞–≤—à–∏–π—Å—è –ø—Ä–æ—Ñ–∏–ª—å —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ –Ω—É–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ');
      
    } else {
      console.log('‚úÖ –î—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è email –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ –∏–º–µ–Ω–∏ (–º–æ–∂–µ—Ç –±—ã—Ç—å —Å–ª—É—á–∞–π–Ω—ã–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ–º)
    const nameCounts = {};
    const duplicateNames = [];
    
    users.forEach(user => {
      if (user.name) {
        nameCounts[user.name] = (nameCounts[user.name] || 0) + 1;
        if (nameCounts[user.name] > 1) {
          duplicateNames.push(user.name);
        }
      }
    });
    
    const uniqueDuplicateNames = [...new Set(duplicateNames)];
    
    if (uniqueDuplicateNames.length > 0) {
      console.log('\n‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º–∏ –∏–º–µ–Ω–∞–º–∏:');
      uniqueDuplicateNames.forEach(name => {
        const duplicates = users.filter(user => user.name === name);
        console.log(`\nüë§ –ò–º—è: ${name}`);
        console.log(`   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${duplicates.length}`);
        duplicates.forEach((user, index) => {
          console.log(`   ${index + 1}. ${user.email} (ID: ${user.id}) - ${user.status}`);
          console.log(`      –°–æ–∑–¥–∞–Ω: ${user.created_at}`);
        });
      });
    } else {
      console.log('\n‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º–∏ –∏–º–µ–Ω–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    console.log('\nüìã –ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:');
    users.forEach((user, index) => {
      console.log(`${index + 1}. ${user.name} (${user.email}) - ${user.status}`);
      console.log(`   ID: ${user.id}`);
      console.log(`   –°–æ–∑–¥–∞–Ω: ${user.created_at}`);
      console.log('');
    });
    
  } catch (error) {
    console.error('‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞:', error);
  }
}

testDuplicateProfiles(); 