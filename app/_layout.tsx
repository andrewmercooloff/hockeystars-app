import { Ionicons } from '@expo/vector-icons';
import { useFocusEffect } from '@react-navigation/native';
import { useFonts } from 'expo-font';
import { SplashScreen, Tabs, useLocalSearchParams, useRouter } from 'expo-router';
import React, { useEffect, useState } from 'react';
import { Image, LogBox, Text, TouchableOpacity, View } from 'react-native';
import { initializeStorage, loadCurrentUser, loadNotifications, Player } from '../utils/playerStorage';

// –û—Ç–∫–ª—é—á–∞–µ–º –≤—Å–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
LogBox.ignoreAllLogs();

const logo = require('../assets/images/logo.png');



const LogoHeader = () => {
  const router = useRouter();
  const params = useLocalSearchParams();
  const [currentUser, setCurrentUser] = useState<Player | null>(null);

  const loadUser = async () => {
    try {
      const user = await loadCurrentUser();
      setCurrentUser(user);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    }
  };

  useEffect(() => {
    loadUser();
  }, []);

  // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –Ω–∞ —ç–∫—Ä–∞–Ω
  useFocusEffect(
    React.useCallback(() => {
      loadUser();
    }, [])
  );

  // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
  useEffect(() => {
    if (params.refresh) {
      console.log('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ...');
      loadUser();
    }
  }, [params.refresh]);

  return (
    <View style={{ 
      height: 128, 
      flexDirection: 'row',
      justifyContent: 'space-between',
      alignItems: 'center',
      paddingHorizontal: 20,
      gap: 40
    }}>
      <Image source={logo} style={{ width: 180, height: 60, resizeMode: 'contain' }} />
      
      <TouchableOpacity 
        style={{ alignItems: 'center', marginTop: -8 }}
        onPress={() => {
          if (currentUser) {
            router.push('/profile');
          } else {
            router.push('/login');
          }
        }}
      >
        <View style={{
          width: 51,
          height: 51,
          borderRadius: 25.5,
          backgroundColor: '#333',
          justifyContent: 'center',
          alignItems: 'center',
          borderWidth: 2,
          borderColor: '#fff',
        }}>
          {currentUser?.avatar ? (
            <Image
              source={
                (currentUser.avatar && typeof currentUser.avatar === 'string' && (
                  currentUser.avatar.startsWith('data:image/') || 
                  currentUser.avatar.startsWith('http') || 
                  currentUser.avatar.startsWith('file://') || 
                  currentUser.avatar.startsWith('content://')
                ))
                  ? { uri: currentUser.avatar }
                  : require('../assets/images/me.jpg')
              }
              style={{
                width: 45,
                height: 45,
                borderRadius: 22.5,
                resizeMode: 'cover'
              }}
              onError={() => {}}
            />
          ) : (
            <Ionicons name="person" size={25} color="#fff" />
          )}
        </View>
        {currentUser && currentUser.name && currentUser.name.trim() !== '' && (
          <Text style={{
            color: '#fff',
            fontSize: 12,
            fontFamily: 'Gilroy-Regular',
            marginTop: 2,
          }}>
            {currentUser?.name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}
          </Text>
        )}
        <Text style={{
          color: '#fff',
          fontSize: 10,
          fontFamily: 'Gilroy-Bold',
          marginTop: 1,
        }}>
          {currentUser && currentUser.status ? (
            currentUser?.status === 'player' ? '–ò–≥—Ä–æ–∫' : 
            currentUser?.status === 'coach' ? '–¢—Ä–µ–Ω–µ—Ä' : 
            currentUser?.status === 'scout' ? '–°–∫–∞—É—Ç' : 
            currentUser?.status === 'star' ? '–ó–≤–µ–∑–¥–∞' : 
            currentUser?.status === 'admin' ? '–¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞' : '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
          ) : '–ì–æ—Å—Ç—å'}
        </Text>
      </TouchableOpacity>
    </View>
  );
};

export default function RootLayout() {
  const [loaded, error] = useFonts({
    'Gilroy-Regular': require('../assets/fonts/gilroy-regular.ttf'),
    'Gilroy-Bold': require('../assets/fonts/gilroy-bold.ttf'),
    'SpaceMono': require('../assets/fonts/SpaceMono-Regular.ttf'),
  });

  const [currentUser, setCurrentUser] = useState<Player | null>(null);

  const loadUser = async () => {
    try {
      const user = await loadCurrentUser();
      if (user) {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        const notifications = await loadNotifications(user.id);
        const unreadNotificationsCount = notifications.filter((n: any) => !n.isRead).length;
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        const { getUnreadMessageCount } = await import('../utils/playerStorage');
        const unreadMessagesCount = await getUnreadMessageCount(user.id);
        
        // –û–±–Ω–æ–≤–ª–µ–Ω—ã —Å—á–µ—Ç—á–∏–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        
        setCurrentUser({ 
          ...user, 
          unreadNotificationsCount,
          unreadMessagesCount 
        });
      } else {
        setCurrentUser(null);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–æ–≤
  const refreshCounters = async () => {
    if (currentUser) {
      await loadUser();
    }
  };

  useEffect(() => {
    if (loaded) {
      SplashScreen.hideAsync();
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
      initializeStorage();
    }
  }, [loaded]);

  useEffect(() => {
    loadUser();
    // –£–º–µ–Ω—å—à–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–æ 3 —Å–µ–∫—É–Ω–¥ –¥–ª—è –±–æ–ª–µ–µ —á–∞—Å—Ç–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–æ–≤
    const interval = setInterval(loadUser, 3000);
    return () => clearInterval(interval);
  }, []);

  // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø—Ä–∏ —Ñ–æ–∫—É—Å–µ
  useFocusEffect(
    React.useCallback(() => {
      if (currentUser) {
        loadUser();
      }
    }, [currentUser?.id])
  );

  // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –ø—Ä–∏ —Ñ–æ–∫—É—Å–µ –Ω–∞ —ç–∫—Ä–∞–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–π
  useFocusEffect(
    React.useCallback(() => {
              // –ì–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω –ø–æ–ª—É—á–∏–ª —Ñ–æ–∫—É—Å
      refreshCounters();
    }, [])
  );

  if (!loaded) {
    return null;
  }

  return (
    <Tabs
      screenOptions={{
        headerStyle: { backgroundColor: '#000', height: 128 },
        headerTitleAlign: 'center',
        tabBarStyle: { backgroundColor: '#000', borderTopWidth: 0 },
        tabBarActiveTintColor: '#fff',
        tabBarInactiveTintColor: '#888',
        tabBarShowLabel: false, // –£–±–∏—Ä–∞–µ–º –ø–æ–¥–ø–∏—Å–∏ –∫ –∏–∫–æ–Ω–∫–∞–º
      }}
    >
      <Tabs.Screen
        name="index"
        options={{
          tabBarIcon: ({ size }) => (
            <View style={{
              backgroundColor: '#FF4444',
              borderRadius: 20,
              width: 40,
              height: 40,
              justifyContent: 'center',
              alignItems: 'center',
            }}>
              <Ionicons name="home" size={size - 2} color="#fff" />
            </View>
          ),
          headerTitle: () => <LogoHeader />,
        }}
      />
      <Tabs.Screen
        name="messages"
        options={{
          tabBarIcon: ({ size }) => {
            // –†–µ–Ω–¥–µ—Ä–∏–º –∏–∫–æ–Ω–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π
            return (
              <View style={{
                position: 'relative',
              }}>
                <Ionicons name="chatbubble-outline" size={size} color="#fff" />
                {currentUser && currentUser.unreadMessagesCount && currentUser.unreadMessagesCount > 0 && (
                  <View style={{
                    position: 'absolute',
                    top: -5,
                    right: -5,
                    backgroundColor: '#FF4444',
                    borderRadius: 10,
                    width: 20,
                    height: 20,
                    justifyContent: 'center',
                    alignItems: 'center',
                  }}>
                    <Text style={{
                      color: '#fff',
                      fontSize: 12,
                      fontFamily: 'Gilroy-Bold',
                    }}>
                      {currentUser.unreadMessagesCount}
                    </Text>
                  </View>
                )}
              </View>
            );
          },
          headerTitle: () => <LogoHeader />,
        }}
      />
      <Tabs.Screen
        name="notifications"
        options={{
          tabBarIcon: ({ size }) => {
            // –†–µ–Ω–¥–µ—Ä–∏–º –∏–∫–æ–Ω–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            return (
              <View style={{
                position: 'relative',
              }}>
                <Ionicons name="notifications-outline" size={size} color="#fff" />
                {currentUser && currentUser.unreadNotificationsCount && currentUser.unreadNotificationsCount > 0 && (
                  <View style={{
                    position: 'absolute',
                    top: -5,
                    right: -5,
                    backgroundColor: '#FF4444',
                    borderRadius: 10,
                    width: 20,
                    height: 20,
                    justifyContent: 'center',
                    alignItems: 'center',
                  }}>
                    <Text style={{
                      color: '#fff',
                      fontSize: 12,
                      fontFamily: 'Gilroy-Bold',
                    }}>
                      {currentUser.unreadNotificationsCount}
                    </Text>
                  </View>
                )}
              </View>
            );
          },
          headerTitle: () => <LogoHeader />,
        }}
      />
      <Tabs.Screen
        name="login"
        options={{
          href: null,
          headerTitle: () => <LogoHeader />,
        }}
      />
      <Tabs.Screen
        name="register"
        options={{
          href: null,
          headerTitle: () => <LogoHeader />,
        }}
      />
      <Tabs.Screen
        name="profile"
        options={{
          href: null,
          headerTitle: () => <LogoHeader />,
        }}
      />
      <Tabs.Screen
        name="chat/[id]"
        options={{
          href: null,
          headerTitle: () => <LogoHeader />,
        }}
      />
      <Tabs.Screen
        name="player/[id]"
        options={{
          href: null,
          headerTitle: () => <LogoHeader />,
        }}
      />
      <Tabs.Screen
        name="admin"
        options={{
          href: null,
          headerTitle: () => <LogoHeader />,
        }}
      />
      <Tabs.Screen
        name="sync"
        options={{
          href: null,
          headerTitle: () => <LogoHeader />,
        }}
      />
      
      {/* <Tabs.Screen
        name="(tabs)"
        options={{
          href: null,
          headerTitle: () => <LogoHeader />,
        }}
      /> */}
      <Tabs.Screen
        name="+not-found"
        options={{
          href: null,
          headerTitle: () => <LogoHeader />,
        }}
      />
      <Tabs.Screen
        name="components/Puck"
        options={{
          href: null,
          headerTitle: () => <LogoHeader />,
        }}
      />

    </Tabs>
  );
}
