import React, { useState, useEffect, useCallback } from 'react';
import { 
  View, 
  Text, 
  StyleSheet, 
  ScrollView, 
  ImageBackground,
  Image,
  TouchableOpacity,
  TextInput,
  Linking,
  Modal,
  Alert,
  Platform
} from 'react-native';

import { useRouter, useFocusEffect, useLocalSearchParams } from 'expo-router';
import { Ionicons } from '@expo/vector-icons';
import { 
  Player, 
  loadPlayers, 
  updatePlayer, 
  loadCurrentUser, 
  saveCurrentUser, 
  forceInitializeStorage,
  addAdminToExistingData,
  getFriends
} from '../utils/playerStorage';
import * as ImagePicker from 'expo-image-picker';
import CustomAlert from '../components/CustomAlert';
import YouTubeVideo from '../components/YouTubeVideo';
import VideoCarousel from '../components/VideoCarousel';

const iceBg = require('../assets/images/led.jpg');

function getStatusText(status?: string) {
  if (status === 'player') return '–ò–≥—Ä–æ–∫';
  if (status === 'coach') return '–¢—Ä–µ–Ω–µ—Ä';
  if (status === 'scout') return '–°–∫–∞—É—Ç';
  if (status === 'star') return '–ó–≤–µ–∑–¥–∞';
  if (status === 'admin') return '–¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞';
  return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
}

export default function PersonalCabinetScreen() {
  const router = useRouter();
  const params = useLocalSearchParams();
  const [currentUser, setCurrentUser] = useState<Player | null>(null);
  const [isEditing, setIsEditing] = useState(false);
  const [editData, setEditData] = useState<Partial<Player>>({});
  const [loading, setLoading] = useState(true);
  const [showCountryPicker, setShowCountryPicker] = useState(false);
  const [showPositionPicker, setShowPositionPicker] = useState(false);

  const [videoFields, setVideoFields] = useState<Array<{ url: string; timeCode: string }>>([]);
  const [galleryPhotos, setGalleryPhotos] = useState<string[]>([]);
  const [friends, setFriends] = useState<Player[]>([]);
  const [selectedVideo, setSelectedVideo] = useState<{ url: string; timeCode?: string } | null>(null);
  const [selectedPhoto, setSelectedPhoto] = useState<string | null>(null);
  const [receivedFriendRequests, setReceivedFriendRequests] = useState<Player[]>([]);
  const [alert, setAlert] = useState({
    visible: false,
    title: '',
    message: '',
    type: 'info' as 'success' | 'error' | 'warning' | 'info',
    onConfirm: () => {},
    onCancel: () => {},
    onSecondary: () => {},
    showCancel: false,
    showSecondary: false,
    confirmText: 'OK',
    cancelText: '–û—Ç–º–µ–Ω–∞',
    secondaryText: '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ'
  });

  const positions = ['–ù–∞–ø–∞–¥–∞—é—â–∏–π', '–ó–∞—â–∏—Ç–Ω–∏–∫', '–í—Ä–∞—Ç–∞—Ä—å'];
  const countries = ['–ë–µ–ª–∞—Ä—É—Å—å', '–†–æ—Å—Å–∏—è', '–ö–∞–Ω–∞–¥–∞', '–°–®–ê', '–§–∏–Ω–ª—è–Ω–¥–∏—è', '–®–≤–µ—Ü–∏—è', '–õ–∏—Ç–≤–∞', '–õ–∞—Ç–≤–∏—è', '–ü–æ–ª—å—à–∞'];

  const showAlert = (title: string, message: string, type: 'success' | 'error' | 'warning' | 'info' = 'info', onConfirm?: () => void) => {
    setAlert({
      visible: true,
      title,
      message,
      type,
      onConfirm: onConfirm || (() => setAlert(prev => ({ ...prev, visible: false }))),
      onCancel: () => {},
      onSecondary: () => {},
      showCancel: false,
      showSecondary: false,
      confirmText: 'OK',
      cancelText: '–û—Ç–º–µ–Ω–∞',
      secondaryText: '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ'
    });
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ –æ—á–∫–æ–≤
  const calculatePoints = (goals: string, assists: string): string => {
    const goalsNum = parseInt(goals) || 0;
    const assistsNum = parseInt(assists) || 0;
    return (goalsNum + assistsNum).toString();
  };

  // –õ–æ–∫–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –æ–ø—ã—Ç–∞ –≤ —Ö–æ–∫–∫–µ–µ (–≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ)
  const calculateHockeyExperience = (startDate?: string): string => {
    console.log('üîß –õ–æ–∫–∞–ª—å–Ω–∞—è calculateHockeyExperience –≤—ã–∑–≤–∞–Ω–∞ —Å:', startDate);
    if (!startDate) return '';
    try {
      const [month, year] = startDate.split('.');
      const start = new Date(parseInt(year), parseInt(month) - 1);
      const now = new Date();
      let years = now.getFullYear() - start.getFullYear();
      let months = now.getMonth() - start.getMonth();
      if (months < 0) {
        years--;
        months += 12;
      }
      
      // –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–∫–ª–æ–Ω–µ–Ω–∏–µ –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞
      const getYearWord = (num: number): string => {
        if (num === 1) return '–≥–æ–¥';
        if (num >= 2 && num <= 4) return '–≥–æ–¥–∞';
        return '–ª–µ—Ç';
      };
      
      const result = years > 0 ? `${years} ${getYearWord(years)}` : `${months} –º–µ—Å.`;
      console.log('üîß –õ–æ–∫–∞–ª—å–Ω–∞—è calculateHockeyExperience —Ä–µ–∑—É–ª—å—Ç–∞—Ç:', result);
      return result;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π calculateHockeyExperience:', error);
      return '';
    }
  };

  useEffect(() => {
    loadUserData();
    console.log('üîç –ü—Ä–æ—Ñ–∏–ª—å: —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', currentUser?.name, '—Å—Ç–∞—Ç—É—Å:', currentUser?.status);
  }, []);

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä edit
  useEffect(() => {
    if (params.edit === 'true' && !isEditing) {
      console.log('–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
      setIsEditing(true);
    }
  }, [params.edit, isEditing]);

  // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ —Ñ–æ–∫—É—Å–µ –Ω–∞ —ç–∫—Ä–∞–Ω–µ
  useFocusEffect(
    useCallback(() => {
      console.log('–≠–∫—Ä–∞–Ω –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—É—á–∏–ª —Ñ–æ–∫—É—Å, –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ...');
      loadUserData();
    }, [])
  );





  const loadUserData = async () => {
    try {
      const user = await loadCurrentUser();
      if (user) {
        setCurrentUser(user);
        setEditData(user);
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–ª—è –≤–∏–¥–µ–æ
        if (user.favoriteGoals) {
          const goals = user.favoriteGoals.split('\n').filter(goal => goal.trim());
          const videoData = goals.map(goal => {
            const { url, timeCode } = parseVideoUrl(goal);
            return { url, timeCode: timeCode || '' };
          });
          setVideoFields(videoData.length > 0 ? videoData : [{ url: '', timeCode: '' }]);
        } else {
          setVideoFields([{ url: '', timeCode: '' }]);
        }
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
        setGalleryPhotos(user.photos || []);
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥—Ä—É–∑–µ–π
        const friendsList = await getFriends(user.id);
        setFriends(friendsList);
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã –¥—Ä—É–∂–±—ã
        await loadFriendRequests();
      } else {
        Alert.alert('–û—à–∏–±–∫–∞', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
        router.push('/login');
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
      Alert.alert('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ');
    } finally {
      setLoading(false);
    }
  };

  const refreshFriends = async () => {
    if (!currentUser) return;
    try {
      const friendsList = await getFriends(currentUser.id);
      setFriends(friendsList);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥—Ä—É–∑–µ–π:', error);
    }
  };

  const loadFriendRequests = async () => {
    if (!currentUser) return;
    try {
      const requestsList = await getReceivedFriendRequests(currentUser.id);
      setReceivedFriendRequests(requestsList);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –¥—Ä—É–∂–±—ã:', error);
    }
  };

  const handleAcceptFriendRequest = async (requesterId: string) => {
    if (!currentUser) {
      Alert.alert('–û—à–∏–±–∫–∞', '–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã');
      return;
    }
    
    try {
      const success = await acceptFriendRequest(currentUser.id, requesterId);
      if (success) {
        showAlert('–î—Ä—É–∂–±–∞ –ø—Ä–∏–Ω—è—Ç–∞', '–ó–∞–ø—Ä–æ—Å –¥—Ä—É–∂–±—ã –ø—Ä–∏–Ω—è—Ç', 'success');
        await refreshFriends();
        await loadFriendRequests();
      } else {
        showAlert('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–Ω—è—Ç—å –∑–∞–ø—Ä–æ—Å', 'error');
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è –∑–∞–ø—Ä–æ—Å–∞ –¥—Ä—É–∂–±—ã:', error);
      showAlert('–û—à–∏–±–∫–∞', '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ –∑–∞–ø—Ä–æ—Å–∞', 'error');
    }
  };

  const handleDeclineFriendRequest = async (requesterId: string) => {
    if (!currentUser) {
      Alert.alert('–û—à–∏–±–∫–∞', '–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã');
      return;
    }
    
    try {
      const success = await declineFriendRequest(currentUser.id, requesterId);
      if (success) {
        showAlert('–ó–∞–ø—Ä–æ—Å –æ—Ç–∫–ª–æ–Ω–µ–Ω', '–ó–∞–ø—Ä–æ—Å –¥—Ä—É–∂–±—ã –æ—Ç–∫–ª–æ–Ω–µ–Ω', 'info');
        await loadFriendRequests();
      } else {
        showAlert('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å', 'error');
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –¥—Ä—É–∂–±—ã:', error);
      showAlert('–û—à–∏–±–∫–∞', '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞', 'error');
    }
  };

  const handleSave = async () => {
    console.log('handleSave() –≤—ã–∑–≤–∞–Ω–∞');
    if (!currentUser) {
      console.log('currentUser –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
      return;
    }

    try {
      console.log('–ù–∞—á–∏–Ω–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...');
      // –û–±—ä–µ–¥–∏–Ω—è–µ–º –ø–æ–ª—è –≤–∏–¥–µ–æ –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É
      const goalsText = videoFields
        .filter(video => video.url.trim())
        .map(video => {
          const timeCodePart = video.timeCode.trim() ? ` (–≤—Ä–µ–º—è: ${video.timeCode})` : '';
          return video.url + timeCodePart;
        })
        .join('\n');
      console.log('–û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–µ –≤–∏–¥–µ–æ:', goalsText);
      const updatedUser = { ...currentUser, ...editData, favoriteGoals: goalsText };
      console.log('–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', updatedUser);
      console.log('üì∏ –§–æ—Ç–æ –≤ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:', updatedUser.photo, '–∞–≤–∞—Ç–∞—Ä:', updatedUser.avatar);
      await updatePlayer(currentUser.id, updatedUser);
      console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ');
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
      await saveCurrentUser(updatedUser);
      console.log('–¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ');
      
      setCurrentUser(updatedUser);
      setIsEditing(false);
      console.log('–†–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—ã–∫–ª—é—á–µ–Ω');
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –≤–∏–¥–µ–æ
      if (updatedUser.favoriteGoals) {
        const goals = updatedUser.favoriteGoals.split('\n').filter(goal => goal.trim());
        const videoData = goals.map(goal => {
          const { url, timeCode } = parseVideoUrl(goal);
          return { url, timeCode: timeCode || '' };
        });
        setVideoFields(videoData.length > 0 ? videoData : [{ url: '', timeCode: '' }]);
      }
      
      // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤
      setTimeout(() => {
        // –≠—Ç–æ –∑–∞—Å—Ç–∞–≤–∏—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
        router.setParams({ refresh: Date.now().toString() });
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ –Ω–∞ –≥–ª–∞–≤–Ω–æ–º —ç–∫—Ä–∞–Ω–µ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        router.push({ pathname: '/', params: { refresh: Date.now().toString() } });
      }, 100);
      
      showAlert('–£—Å–ø–µ—à–Ω–æ', '–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã', 'success');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', error);
      Alert.alert('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è');
    }
  };

  const pickImage = async () => {
    if (!currentUser) {
      Alert.alert('–û—à–∏–±–∫–∞', '–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã');
      return;
    }
    Alert.alert(
      '–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫ —Ñ–æ—Ç–æ',
      '–û—Ç–∫—É–¥–∞ —Ö–æ—Ç–∏—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ?',
      [
        {
          text: '–ì–∞–ª–µ—Ä–µ—è',
          onPress: () => pickFromGallery()
        },
        {
          text: '–ö–∞–º–µ—Ä–∞',
          onPress: () => takePhoto()
        },
        {
          text: '–û—Ç–º–µ–Ω–∞',
          style: 'cancel'
        }
      ]
    );
  };

  const pickFromGallery = async () => {
    if (!currentUser) {
      Alert.alert('–û—à–∏–±–∫–∞', '–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã');
      return;
    }
    const { status } = await ImagePicker.requestMediaLibraryPermissionsAsync();
    
    if (status !== 'granted') {
      Alert.alert('–û—à–∏–±–∫–∞', '–ù—É–∂–Ω–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –≥–∞–ª–µ—Ä–µ–µ');
      return;
    }

    const result = await ImagePicker.launchImageLibraryAsync({
      mediaTypes: ImagePicker.MediaTypeOptions.Images,
      allowsEditing: true,
      aspect: [1, 1],
      quality: 0.8,
    });

    if (!result.canceled && result.assets[0]) {
      console.log('üì∏ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ñ–æ—Ç–æ –∏–∑ –≥–∞–ª–µ—Ä–µ–∏:', result.assets[0].uri);
      setEditData({...editData, photo: result.assets[0].uri, avatar: result.assets[0].uri});
    }
  };

  const takePhoto = async () => {
    if (!currentUser) {
      Alert.alert('–û—à–∏–±–∫–∞', '–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã');
      return;
    }
    const { status } = await ImagePicker.requestCameraPermissionsAsync();
    
    if (status !== 'granted') {
      Alert.alert('–û—à–∏–±–∫–∞', '–ù—É–∂–Ω–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–º–µ—Ä–µ');
      return;
    }

    const result = await ImagePicker.launchCameraAsync({
      allowsEditing: true,
      aspect: [1, 1],
      quality: 0.8,
    });

    if (!result.canceled && result.assets[0]) {
      console.log('üì∏ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ñ–æ—Ç–æ —Å –∫–∞–º–µ—Ä—ã:', result.assets[0].uri);
      setEditData({...editData, photo: result.assets[0].uri, avatar: result.assets[0].uri});
    }
  };

  // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏ –≥–∞–ª–µ—Ä–µ–∏
  const addPhotoToGallery = async () => {
    if (!currentUser) {
      Alert.alert('–û—à–∏–±–∫–∞', '–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã');
      return;
    }
    Alert.alert(
      '–î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é',
      '–û—Ç–∫—É–¥–∞ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ?',
      [
        {
          text: '–ì–∞–ª–µ—Ä–µ—è',
          onPress: () => pickPhotoFromGallery()
        },
        {
          text: '–ö–∞–º–µ—Ä–∞',
          onPress: () => takePhotoForGallery()
        },
        {
          text: '–û—Ç–º–µ–Ω–∞',
          style: 'cancel'
        }
      ]
    );
  };

  const pickPhotoFromGallery = async () => {
    if (!currentUser) {
      Alert.alert('–û—à–∏–±–∫–∞', '–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã');
      return;
    }
    const { status } = await ImagePicker.requestMediaLibraryPermissionsAsync();
    
    if (status !== 'granted') {
      showAlert('–û—à–∏–±–∫–∞', '–ù—É–∂–Ω–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –≥–∞–ª–µ—Ä–µ–µ', 'error');
      return;
    }

    const result = await ImagePicker.launchImageLibraryAsync({
      mediaTypes: ImagePicker.MediaTypeOptions.Images,
      allowsEditing: true,
      aspect: [4, 3],
      quality: 0.8,
    });

    if (!result.canceled && result.assets[0]) {
      const newPhotos = [...galleryPhotos, result.assets[0].uri];
      setGalleryPhotos(newPhotos);
      setEditData({...editData, photos: newPhotos});
    }
  };

  const takePhotoForGallery = async () => {
    if (!currentUser) {
      Alert.alert('–û—à–∏–±–∫–∞', '–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã');
      return;
    }
    const { status } = await ImagePicker.requestCameraPermissionsAsync();
    
    if (status !== 'granted') {
      showAlert('–û—à–∏–±–∫–∞', '–ù—É–∂–Ω–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–º–µ—Ä–µ', 'error');
      return;
    }

    const result = await ImagePicker.launchCameraAsync({
      allowsEditing: true,
      aspect: [4, 3],
      quality: 0.8,
    });

    if (!result.canceled && result.assets[0]) {
      const newPhotos = [...galleryPhotos, result.assets[0].uri];
      setGalleryPhotos(newPhotos);
      setEditData({...editData, photos: newPhotos});
    }
  };

  const removePhotoFromGallery = (index: number) => {
    const newPhotos = galleryPhotos.filter((_, i) => i !== index);
    setGalleryPhotos(newPhotos);
    setEditData({...editData, photos: newPhotos});
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ URL –∏ —Ç–∞–π–º–∫–æ–¥–∞
  const parseVideoUrl = (input: string): { url: string; timeCode?: string } => {
    // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–∞–π–º–∫–æ–¥ –∏–∑ —Ñ–æ—Ä–º–∞—Ç–∞ "(–≤—Ä–µ–º—è: MM:SS)"
    const timeMatch = input.match(/\(–≤—Ä–µ–º—è:\s*(\d{1,2}:\d{2})\)/);
    const timeCode = timeMatch ? timeMatch[1] : undefined;
    
    // –£–±–∏—Ä–∞–µ–º —Ç–∞–π–º–∫–æ–¥ –∏–∑ —Å—Ç—Ä–æ–∫–∏ –∏ –æ—á–∏—â–∞–µ–º URL
    let url = input.replace(/\s*\(–≤—Ä–µ–º—è:\s*\d{1,2}:\d{2}\)/, '').trim();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ YouTube —Å—Å—ã–ª–∫–∞ (—Ä–µ–≥–∏—Å—Ç—Ä–æ–Ω–µ–∑–∞–≤–∏—Å–∏–º–æ)
    const cleanUrl = url.trim();
    const youtubePatterns = [
      /youtube\.com\/watch\?v=/i,
      /youtu\.be\//i,
      /youtube\.com\/embed\//i,
      /youtube\.com\/shorts\//i,
      /youtube\.com\/live\//i,
      /m\.youtube\.com\/watch\?v=/i
    ];
    
    const isValidYouTubeUrl = youtubePatterns.some(pattern => pattern.test(cleanUrl));
    
    if (!isValidYouTubeUrl) {
      console.warn('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç YouTube —Å—Å—ã–ª–∫–∏:', url);
    }
    
    return { url, timeCode };
  };

  const openYouTubeLink = (url: string) => {
    if (url) {
      Linking.openURL(url).catch(() => {
        Alert.alert('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Å—Å—ã–ª–∫—É');
      });
    }
  };

  const handleLogout = async () => {
    setAlert({
      visible: true,
      title: '–í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è',
      message: '–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏ –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è?',
      type: 'warning',
      onConfirm: async () => {
        try {
          await saveCurrentUser(null);
          // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
          setCurrentUser(null);
          setEditData({
            name: '',
            birthDate: '',
            country: '',
            team: '',
            position: '',
            number: '',
            grip: '',
            height: '',
            weight: '',
            favoriteGoals: '',
            avatar: '',
            games: '',
            goals: '',
            assists: '',
            points: ''
          });
          setFriends([]);
          setAlert(prev => ({ ...prev, visible: false }));
          router.push('/');
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ:', error);
          setAlert({
            visible: true,
            title: '–û—à–∏–±–∫–∞',
            message: '–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–π—Ç–∏ –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è',
            type: 'error',
            onConfirm: () => setAlert(prev => ({ ...prev, visible: false })),
            onCancel: () => {},
            onSecondary: () => {},
            showCancel: false,
            showSecondary: false,
            confirmText: 'OK',
            cancelText: '–û—Ç–º–µ–Ω–∞',
            secondaryText: '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ'
          });
        }
      },
      onCancel: () => setAlert(prev => ({ ...prev, visible: false })),
      onSecondary: () => {},
      showCancel: true,
      showSecondary: false,
      confirmText: '–í—ã–π—Ç–∏',
      cancelText: '–û—Ç–º–µ–Ω–∞',
      secondaryText: '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ'
    });
  };



  if (loading) {
    return (
      <View style={styles.container}>
        <ImageBackground source={iceBg} style={styles.background} resizeMode="cover">
          <View style={styles.overlay}>
            <View style={styles.loadingContainer}>
              <Text style={styles.loadingText}>–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è...</Text>
            </View>
          </View>
        </ImageBackground>
      </View>
    );
  }

  if (!currentUser) {
    return null;
  }

  return (
    <View style={styles.container}>
      <ImageBackground source={iceBg} style={styles.background} resizeMode="cover">
        <View style={styles.overlay}>
          <ScrollView contentContainerStyle={styles.scrollContainer}>
            


    
            <View style={styles.profileSection}>
              <TouchableOpacity onPress={isEditing ? pickImage : undefined} style={styles.photoContainer}>
                {(() => {
                  const hasValidImage = (editData.photo && typeof editData.photo === 'string' && (
                    editData.photo.startsWith('data:image/') || 
                    editData.photo.startsWith('http') || 
                    editData.photo.startsWith('file://') || 
                    editData.photo.startsWith('content://')
                  )) || (editData.avatar && typeof editData.avatar === 'string' && (
                    editData.avatar.startsWith('data:image/') || 
                    editData.avatar.startsWith('http') || 
                    editData.avatar.startsWith('file://') || 
                    editData.avatar.startsWith('content://')
                  )) || (currentUser?.photo && typeof currentUser.photo === 'string' && (
                    currentUser.photo.startsWith('data:image/') || 
                    currentUser.photo.startsWith('http') || 
                    currentUser.photo.startsWith('file://') || 
                    currentUser.photo.startsWith('content://')
                  )) || (currentUser?.avatar && typeof currentUser.avatar === 'string' && (
                    currentUser.avatar.startsWith('data:image/') || 
                    currentUser.avatar.startsWith('http') || 
                    currentUser.avatar.startsWith('file://') || 
                    currentUser.avatar.startsWith('content://')
                  ));

                  if (hasValidImage) {
                    return (
                      <Image 
                        source={{ uri: editData.photo || editData.avatar || currentUser?.photo || currentUser?.avatar }}
                        style={styles.profileImage}
                        onError={() => console.log('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è')}
                      />
                    );
                  } else {
                    return (
                      <View style={[styles.profileImage, styles.avatarPlaceholder]}>
                        <Ionicons name="person" size={48} color="#FFFFFF" />
                      </View>
                    );
                  }
                })()}
                {isEditing && (
                  <View style={styles.editOverlay}>
                    <Ionicons name="camera" size={24} color="#fff" />
                  </View>
                )}
              </TouchableOpacity>
              <View style={styles.nameRow}>
                {currentUser?.status === 'admin' ? (
                  // –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
                  <View style={styles.adminProfile}>
                    <Text style={styles.adminTitle}>–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞</Text>
                    <Text style={styles.adminSubtitle}>–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∑–∞ –ø–æ–º–æ—â—å—é</Text>
                  </View>
                ) : (
                  // –û–±—ã—á–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                  <>
                    <Text style={styles.playerName}>{(currentUser?.name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å').toUpperCase()}</Text>
                    {currentUser?.status === 'player' && (
                      isEditing ? (
                        <TextInput
                          style={styles.numberInput}
                          value={editData.number || ''}
                          onChangeText={(text) => setEditData({...editData, number: text})}
                          placeholder="#"
                          placeholderTextColor="#888"
                          keyboardType="numeric"
                          maxLength={2}
                        />
                      ) : currentUser.number ? (
                        <View style={styles.numberBadge}>
                          <Text style={styles.numberText}>#{currentUser?.number || '0'}</Text>
                        </View>
                      ) : null
                    )}
                  </>
                )}
                <TouchableOpacity 
                  style={styles.editButton} 
                  onPress={() => {
                    console.log('–ö–Ω–æ–ø–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–∂–∞—Ç–∞, isEditing:', isEditing);
                    if (isEditing) {
                      // –ï—Å–ª–∏ –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
                      console.log('–í—ã–∑—ã–≤–∞–µ–º handleSave()');
                      handleSave();
                    } else {
                      // –ï—Å–ª–∏ –Ω–µ –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –≤—Ö–æ–¥–∏–º –≤ –Ω–µ–≥–æ
                      console.log('–í—Ö–æ–¥–∏–º –≤ —Ä–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
                      setIsEditing(true);
                    }
                  }}
                >
                  <Ionicons name={isEditing ? "checkmark" : "create"} size={25} color="#fff" />
                </TouchableOpacity>
                

                
        
                {currentUser?.status === 'admin' && (
                  <TouchableOpacity 
                    style={[styles.editButton, { marginLeft: 10, backgroundColor: '#FF4444' }]} 
                    onPress={() => {
                      console.log('üîß –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–≥—Ä–æ–∫–æ–≤');
                      console.log('üîß –°—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', currentUser?.status);
                      router.push('/admin');
                    }}
                  >
                    <Ionicons name="people" size={25} color="#fff" />
                  </TouchableOpacity>
                )}
                

              </View>
                              {currentUser?.status !== 'admin' && (
                <>
                  <Text style={styles.playerStatus}>
                    {getStatusText(currentUser?.status)}
                  </Text>
                  {currentUser?.team && <Text style={styles.playerTeam}>{currentUser?.team}</Text>}
                </>
              )}
            </View>

    
                            {currentUser?.status !== 'star' && (
              <View style={styles.section}>
                <Text style={styles.sectionTitle}>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</Text>
                {isEditing ? (
                  <View style={styles.statsEditGrid}>
                    <View style={styles.statEditItem}>
                      <Text style={styles.statEditLabel}>–ò–≥—Ä</Text>
                      <TextInput
                        style={styles.statEditInput}
                        value={editData.games || ''}
                        onChangeText={(text) => setEditData({...editData, games: text})}
                        placeholder="0"
                        placeholderTextColor="#888"
                        keyboardType="numeric"
                      />
                    </View>
                    <View style={styles.statEditItem}>
                      <Text style={styles.statEditLabel}>–ì–æ–ª–æ–≤</Text>
                      <TextInput
                        style={styles.statEditInput}
                        value={editData.goals || ''}
                        onChangeText={(text) => {
                          const newGoals = text;
                          const newPoints = calculatePoints(newGoals, editData.assists || '');
                          setEditData({
                            ...editData, 
                            goals: newGoals, 
                            points: newPoints
                          });
                        }}
                        placeholder="0"
                        placeholderTextColor="#888"
                        keyboardType="numeric"
                      />
                    </View>
                    <View style={styles.statEditItem}>
                      <Text style={styles.statEditLabel}>–ü–µ—Ä–µ–¥–∞—á</Text>
                      <TextInput
                        style={styles.statEditInput}
                        value={editData.assists || ''}
                        onChangeText={(text) => {
                          const newAssists = text;
                          const newPoints = calculatePoints(editData.goals || '', newAssists);
                          setEditData({
                            ...editData, 
                            assists: newAssists, 
                            points: newPoints
                          });
                        }}
                        placeholder="0"
                        placeholderTextColor="#888"
                        keyboardType="numeric"
                      />
                    </View>
                    <View style={styles.statEditItem}>
                      <Text style={styles.statEditLabel}>–û—á–∫–æ–≤</Text>
                      <TextInput
                        style={[styles.statEditInput, styles.readOnlyInput]}
                        value={editData.points || '0'}
                        editable={false}
                        placeholder="0"
                        placeholderTextColor="#888"
                        keyboardType="numeric"
                      />
                    </View>
                  </View>
                ) : (() => {
                  const goalsNum = parseInt(currentUser?.goals || '0') || 0;
                  const assistsNum = parseInt(currentUser?.assists || '0') || 0;
                  const gamesNum = parseInt(currentUser?.games || '0') || 0;
                  const pointsNum = goalsNum + assistsNum;
                  
                  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –Ω–µ–Ω—É–ª–µ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                  const hasStats = pointsNum > 0 || goalsNum > 0 || assistsNum > 0 || gamesNum > 0;
                  
                  return hasStats ? (
                    <View style={styles.statsGrid}>
                      {pointsNum > 0 && (
                        <View style={styles.statItem}>
                          <Text style={styles.statValue}>{pointsNum.toString()}</Text>
                          <Text style={styles.statLabel}>–û—á–∫–æ–≤</Text>
                        </View>
                      )}
                      <View style={styles.statItem}>
                        <Text style={styles.statValue}>{friends.length}</Text>
                        <Text style={styles.statLabel}>–î—Ä—É–∑–µ–π</Text>
                      </View>
                      {goalsNum > 0 && (
                        <View style={styles.statItem}>
                          <Text style={styles.statValue}>{goalsNum.toString()}</Text>
                          <Text style={styles.statLabel}>–ì–æ–ª–æ–≤</Text>
                        </View>
                      )}
                      {gamesNum > 0 && (
                        <View style={styles.statItem}>
                          <Text style={styles.statValue}>{gamesNum.toString()}</Text>
                          <Text style={styles.statLabel}>–ò–≥—Ä</Text>
                        </View>
                      )}
                    </View>
                  ) : (
                    <View style={styles.statsGrid}>
                      <View style={styles.statItem}>
                        <Text style={styles.statValue}>{friends.length}</Text>
                        <Text style={styles.statLabel}>–î—Ä—É–∑–µ–π</Text>
                      </View>
                    </View>
                  );
                })()}
              </View>
            )}

    
            {currentUser?.status === 'star' && (
              <View style={styles.section}>
                <Text style={styles.sectionTitle}>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–∞–Ω–¥–µ</Text>
                <View style={styles.infoGrid}>
                  <View style={styles.infoItem}>
                    <Text style={styles.infoLabel}>–ö–æ–º–∞–Ω–¥–∞</Text>
                    <Text style={styles.infoValue}>{currentUser.team || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}</Text>
                  </View>
                  <View style={styles.infoItem}>
                    <Text style={styles.infoLabel}>–î—Ä—É–∑–µ–π</Text>
                    <Text style={styles.infoValue}>{friends.length}</Text>
                  </View>
                  <View style={styles.infoItem}>
                    <Text style={styles.infoLabel}>–°—Ç—Ä–∞–Ω–∞</Text>
                    <Text style={styles.infoValue}>{currentUser?.country || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}</Text>
                  </View>
                  <View style={styles.infoItem}>
                    <Text style={styles.infoLabel}>–ü–æ–∑–∏—Ü–∏—è</Text>
                    <Text style={styles.infoValue}>{currentUser.position || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}</Text>
                  </View>
                  {currentUser?.grip && (
                    <View style={styles.infoItem}>
                      <Text style={styles.infoLabel}>–•–≤–∞—Ç</Text>
                                              <Text style={styles.infoValue}>{currentUser?.grip || '–ù–µ —É–∫–∞–∑–∞–Ω'}</Text>
                    </View>
                  )}
                </View>
              </View>
            )}

    
            <View style={styles.section}>
              <Text style={styles.sectionTitle}>–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</Text>
              <View style={styles.infoGrid}>
                <View style={styles.infoItem}>
                  <Text style={styles.infoLabel}>–°—Ç—Ä–∞–Ω–∞</Text>
                  {isEditing ? (
                    <TouchableOpacity
                      style={styles.pickerButton}
                      onPress={() => setShowCountryPicker(true)}
                    >
                      <Text style={styles.pickerButtonText}>
                        {editData.country || '–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É'}
                      </Text>
                      <Ionicons name="chevron-down" size={16} color="#fff" />
                    </TouchableOpacity>
                  ) : (
                    <Text style={styles.infoValue}>{currentUser?.country || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}</Text>
                  )}
                </View>
                {currentUser?.status === 'player' && (
                  <>
                    <View style={styles.infoItem}>
                      <Text style={styles.infoLabel}>–ü–æ–∑–∏—Ü–∏—è</Text>
                      {isEditing ? (
                        <TouchableOpacity
                          style={styles.pickerButton}
                          onPress={() => setShowPositionPicker(true)}
                        >
                          <Text style={styles.pickerButtonText}>
                            {editData.position || '–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–∑–∏—Ü–∏—é'}
                          </Text>
                          <Ionicons name="chevron-down" size={16} color="#fff" />
                        </TouchableOpacity>
                      ) : (
                        <Text style={styles.infoValue}>{currentUser.position || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}</Text>
                      )}
                    </View>

                    {currentUser?.birthDate && (
                      <View style={styles.infoItem}>
                        <Text style={styles.infoLabel}>–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è</Text>
                        <Text style={styles.infoValue}>{currentUser?.birthDate || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}</Text>
                      </View>
                    )}
                    {currentUser?.grip && (
                      <View style={styles.infoItem}>
                        <Text style={styles.infoLabel}>–•–≤–∞—Ç</Text>
                        <Text style={styles.infoValue}>{currentUser?.grip || '–ù–µ —É–∫–∞–∑–∞–Ω'}</Text>
                      </View>
                    )}
                  </>
                )}
              </View>
            </View>

    
            {currentUser?.status === 'player' && (currentUser?.height || currentUser?.weight) && (
              <View style={styles.section}>
                <Text style={styles.sectionTitle}>–§–∏–∑–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ</Text>
                <View style={styles.infoGrid}>
                  {currentUser?.height && (
                    <View style={styles.infoItem}>
                      <Text style={styles.infoLabel}>–†–æ—Å—Ç</Text>
                      {isEditing ? (
                        <TextInput
                          style={styles.editInput}
                          value={editData.height || ''}
                          onChangeText={(text) => setEditData({...editData, height: text})}
                          placeholder="–†–æ—Å—Ç (—Å–º)"
                          placeholderTextColor="#888"
                          keyboardType="numeric"
                        />
                      ) : (
                        <Text style={styles.infoValue}>{currentUser?.height || '–ù–µ —É–∫–∞–∑–∞–Ω'} —Å–º</Text>
                      )}
                    </View>
                  )}
                  {currentUser?.weight && (
                    <View style={styles.infoItem}>
                      <Text style={styles.infoLabel}>–í–µ—Å</Text>
                      {isEditing ? (
                        <TextInput
                          style={styles.editInput}
                          value={editData.weight || ''}
                          onChangeText={(text) => setEditData({...editData, weight: text})}
                          placeholder="–í–µ—Å (–∫–≥)"
                          placeholderTextColor="#888"
                          keyboardType="numeric"
                        />
                      ) : (
                        <Text style={styles.infoValue}>{currentUser?.weight || '–ù–µ —É–∫–∞–∑–∞–Ω'} –∫–≥</Text>
                      )}
                    </View>
                  )}
                </View>
              </View>
            )}

    
            {currentUser?.status === 'player' && (currentUser?.hockeyStartDate || isEditing) && (
              <View style={styles.section}>
                <Text style={styles.sectionTitle}>–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –∑–∞–Ω—è—Ç–∏–π —Ö–æ–∫–∫–µ–µ–º</Text>
                <View style={styles.infoGrid}>
                  <View style={styles.infoItem}>
                    <Text style={styles.infoLabel}>–ù–∞—á–∞–ª –∑–∞–Ω–∏–º–∞—Ç—å—Å—è</Text>
                    {isEditing ? (
                      <View style={styles.dateInputContainer}>
                        <TextInput
                          style={styles.dateInput}
                          value={editData.hockeyStartDate || ''}
                          onChangeText={(text) => {
                            // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∞ MM.YYYY
                            const dateRegex = /^(\d{0,2})\.?(\d{0,4})$/;
                            const match = text.match(dateRegex);
                            
                            if (match) {
                              let formattedText = text;
                              // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è–µ–º —Ç–æ—á–∫—É –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç –∏ –µ—Å—Ç—å —Ü–∏—Ñ—Ä—ã
                              if (!text.includes('.') && text.length > 0) {
                                if (text.length <= 2) {
                                  formattedText = text;
                                } else {
                                  formattedText = text.slice(0, 2) + '.' + text.slice(2);
                                }
                              }
                              
                              // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–µ—Å—è—Ü –¥–æ 12, –≥–æ–¥ –¥–æ 4 —Ü–∏—Ñ—Ä
                              const parts = formattedText.split('.');
                              if (parts.length === 2) {
                                const month = parseInt(parts[0]) || 0;
                                const year = parts[1];
                                if (month > 12) formattedText = '12.' + parts[1];
                                if (year.length > 4) formattedText = parts[0] + '.' + year.slice(0, 4);
                              }
                              
                              setEditData({...editData, hockeyStartDate: formattedText});
                            } else if (text === '' || text === '.') {
                              setEditData({...editData, hockeyStartDate: text});
                            }
                          }}
                          placeholder="MM.YYYY"
                          placeholderTextColor="#888"
                          keyboardType="numeric"
                          maxLength={7}
                        />
                        <Ionicons name="calendar-outline" size={20} color="#FF4444" style={styles.dateInputIcon} />
                      </View>
                    ) : (
                      <Text style={styles.infoValue}>
                        {currentUser?.hockeyStartDate ? 
                          `${currentUser?.hockeyStartDate} (${calculateHockeyExperience(currentUser?.hockeyStartDate || '')})` : 
                          '–ù–µ —É–∫–∞–∑–∞–Ω–∞'
                        }
                      </Text>
                    )}
                  </View>
                </View>
              </View>
            )}



            {/* –í–∏–¥–µ–æ –º–æ–∏—Ö –º–æ–º–µ–Ω—Ç–æ–≤ */}
            <View style={styles.section}>
              <Text style={styles.sectionTitle}>–í–∏–¥–µ–æ –º–æ–∏—Ö –º–æ–º–µ–Ω—Ç–æ–≤</Text>
              {isEditing && (
                <Text style={styles.sectionSubtitle}>
                  –î–æ–±–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ YouTube –≤–∏–¥–µ–æ –∏ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –º–æ–º–µ–Ω—Ç–∞ (—Ñ–æ—Ä–º–∞—Ç: –º–∏–Ω—É—Ç—ã:—Å–µ–∫—É–Ω–¥—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä: 1:25){'\n'}
                  –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è: youtube.com/watch?v=, youtu.be/, youtube.com/shorts/, youtube.com/live/, m.youtube.com/
                </Text>
              )}
              {isEditing ? (
                  <View>
                    {videoFields.map((video, index) => (
                      <View key={index} style={styles.videoFieldContainer}>
                        <TextInput
                          style={styles.videoUrlInput}
                          value={video.url}
                          onChangeText={(text) => {
                            const newVideoFields = [...videoFields];
                            newVideoFields[index] = { ...newVideoFields[index], url: text };
                            setVideoFields(newVideoFields);
                          }}
                          placeholder="https://youtube.com/watch?v=... –∏–ª–∏ youtube.com/live/..."
                          placeholderTextColor="#888"
                        />
                        <TextInput
                          style={styles.timeCodeInput}
                          value={video.timeCode}
                          onChangeText={(text) => {
                            // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏ (–º–∏–Ω—É—Ç—ã:—Å–µ–∫—É–Ω–¥—ã)
                            const timeRegex = /^(\d{0,2}):?(\d{0,2})$/;
                            const match = text.match(timeRegex);
                            
                            if (match) {
                              let formattedText = text;
                              // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è–µ–º –¥–≤–æ–µ—Ç–æ—á–∏–µ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç –∏ –µ—Å—Ç—å —Ü–∏—Ñ—Ä—ã
                              if (!text.includes(':') && text.length > 0) {
                                if (text.length <= 2) {
                                  formattedText = text;
                                } else {
                                  formattedText = text.slice(0, 2) + ':' + text.slice(2);
                                }
                              }
                              
                              // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∏–Ω—É—Ç—ã –¥–æ 59, —Å–µ–∫—É–Ω–¥—ã –¥–æ 59
                              const parts = formattedText.split(':');
                              if (parts.length === 2) {
                                const minutes = parseInt(parts[0]) || 0;
                                const seconds = parseInt(parts[1]) || 0;
                                if (minutes > 59) formattedText = '59:' + parts[1];
                                if (seconds > 59) formattedText = parts[0] + ':59';
                              }
                              
                              const newVideoFields = [...videoFields];
                              newVideoFields[index] = { ...newVideoFields[index], timeCode: formattedText };
                              setVideoFields(newVideoFields);
                            } else if (text === '' || text === ':') {
                              // –†–∞–∑—Ä–µ—à–∞–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –∏ –¥–≤–æ–µ—Ç–æ—á–∏–µ
                              const newVideoFields = [...videoFields];
                              newVideoFields[index] = { ...newVideoFields[index], timeCode: text };
                              setVideoFields(newVideoFields);
                            }
                          }}
                          placeholder="–º–∏–Ω:—Å–µ–∫"
                          placeholderTextColor="#888"
                          keyboardType="default"
                          maxLength={5}
                        />
                        {videoFields.length > 1 && (
                          <TouchableOpacity
                            style={styles.removeVideoButton}
                            onPress={() => {
                              const newVideoFields = videoFields.filter((_, i) => i !== index);
                              setVideoFields(newVideoFields.length > 0 ? newVideoFields : [{ url: '', timeCode: '' }]);
                            }}
                          >
                            <Ionicons name="close-circle" size={20} color="#FF4444" />
                          </TouchableOpacity>
                        )}
                      </View>
                    ))}
                    <TouchableOpacity
                      style={styles.addMoreButton}
                      onPress={() => {
                        setVideoFields([...videoFields, { url: '', timeCode: '' }]);
                      }}
                    >
                      <Ionicons name="add-circle" size={20} color="#FF4444" />
                      <Text style={styles.addMoreButtonText}>–î–æ–±–∞–≤–∏—Ç—å –µ—â–µ</Text>
                    </TouchableOpacity>
                  </View>
                ) : currentUser.favoriteGoals ? (
                  <VideoCarousel
                    videos={currentUser.favoriteGoals.split('\n').filter(goal => goal.trim()).map(goal => parseVideoUrl(goal.trim()))}
                    onVideoPress={(video) => setSelectedVideo(video)}
                  />
                ) : (
                  <Text style={styles.noDataText}>–ù–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –≤–∏–¥–µ–æ</Text>
                )}
              </View>
            )}

            {currentUser?.status === 'player' && 
              (currentUser?.pullUps || currentUser?.pushUps || currentUser?.plankTime || currentUser?.sprint100m || currentUser?.longJump || isEditing) && (
                <View style={styles.section}>
                  <Text style={styles.sectionTitle}>–ù–æ—Ä–º–∞—Ç–∏–≤—ã</Text>
                  <View style={styles.infoGrid}>
                  <View style={styles.infoItem}>
                    <Text style={styles.infoLabel}>–ü–æ–¥—Ç—è–≥–∏–≤–∞–Ω–∏—è</Text>
                    {isEditing ? (
                      <TextInput
                        style={styles.editInput}
                        value={editData.pullUps || ''}
                        onChangeText={(text) => setEditData({...editData, pullUps: text})}
                        placeholder="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑"
                        placeholderTextColor="#888"
                        keyboardType="numeric"
                      />
                    ) : (
                      <Text style={styles.infoValue}>
                        {currentUser?.pullUps ? `${currentUser.pullUps} —Ä–∞–∑` : '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
                      </Text>
                    )}
                  </View>
                  <View style={styles.infoItem}>
                    <Text style={styles.infoLabel}>–û—Ç–∂–∏–º–∞–Ω–∏—è</Text>
                    {isEditing ? (
                      <TextInput
                        style={styles.editInput}
                        value={editData.pushUps || ''}
                        onChangeText={(text) => setEditData({...editData, pushUps: text})}
                        placeholder="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑"
                        placeholderTextColor="#888"
                        keyboardType="numeric"
                      />
                    ) : (
                      <Text style={styles.infoValue}>
                        {currentUser?.pushUps ? `${currentUser.pushUps} —Ä–∞–∑` : '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
                      </Text>
                    )}
                  </View>
                  <View style={styles.infoItem}>
                    <Text style={styles.infoLabel}>–ü–ª–∞–Ω–∫–∞</Text>
                    {isEditing ? (
                      <TextInput
                        style={styles.editInput}
                        value={editData.plankTime || ''}
                        onChangeText={(text) => setEditData({...editData, plankTime: text})}
                        placeholder="–í—Ä–µ–º—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö"
                        placeholderTextColor="#888"
                        keyboardType="numeric"
                      />
                    ) : (
                      <Text style={styles.infoValue}>
                        {currentUser?.plankTime ? `${currentUser.plankTime} —Å–µ–∫` : '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
                      </Text>
                    )}
                  </View>
                  <View style={styles.infoItem}>
                    <Text style={styles.infoLabel}>100 –º–µ—Ç—Ä–æ–≤</Text>
                    {isEditing ? (
                      <TextInput
                        style={styles.editInput}
                        value={editData.sprint100m || ''}
                        onChangeText={(text) => setEditData({...editData, sprint100m: text})}
                        placeholder="–í—Ä–µ–º—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö"
                        placeholderTextColor="#888"
                        keyboardType="numeric"
                      />
                    ) : (
                      <Text style={styles.infoValue}>
                        {currentUser?.sprint100m ? `${currentUser.sprint100m} —Å–µ–∫` : '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
                      </Text>
                    )}
                  </View>
                  <View style={styles.infoItem}>
                    <Text style={styles.infoLabel}>–ü—Ä—ã–∂–æ–∫ –≤ –¥–ª–∏–Ω—É</Text>
                    {isEditing ? (
                      <TextInput
                        style={styles.editInput}
                        value={editData.longJump || ''}
                        onChangeText={(text) => setEditData({...editData, longJump: text})}
                        placeholder="–î–ª–∏–Ω–∞ –≤ —Å–º"
                        placeholderTextColor="#888"
                        keyboardType="numeric"
                      />
                    ) : (
                      <Text style={styles.infoValue}>
                        {currentUser?.longJump ? `${currentUser.longJump} —Å–º` : '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
                      </Text>
                    )}
                  </View>
                </View>
              </View>
            )}



            {/* –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ - —Ç–æ–ª—å–∫–æ –¥–ª—è –∏–≥—Ä–æ–∫–æ–≤ (–Ω–µ –∑–≤–µ–∑–¥) */}
            {currentUser?.status === 'player' && (
                              (currentUser?.photos && currentUser.photos.length > 0) || isEditing ? (
                <View style={styles.section}>
                  <Text style={styles.sectionTitle}>–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏</Text>
                  {isEditing && (
                    <Text style={styles.sectionSubtitle}>
                      –î–æ–±–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –¥–ª—è –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è
                    </Text>
                  )}
                  {isEditing ? (
                    <View>
                      <TouchableOpacity
                        style={styles.addPhotoButton}
                        onPress={addPhotoToGallery}
                      >
                        <Ionicons name="add-circle" size={24} color="#FF4444" />
                        <Text style={styles.addPhotoButtonText}>–î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é</Text>
                      </TouchableOpacity>
                      
                      {/* –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ */}
                      {galleryPhotos.length > 0 && (
                        <View style={styles.galleryContainer}>
                          <Text style={styles.galleryTitle}>–î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏:</Text>
                          <View style={styles.galleryGrid}>
                            {galleryPhotos.map((photo, index) => (
                              <View key={index} style={styles.galleryItem}>
                                <Image source={{ uri: photo }} style={styles.galleryImage} />
                                <TouchableOpacity
                                  style={styles.removePhotoButton}
                                  onPress={() => removePhotoFromGallery(index)}
                                >
                                  <Ionicons name="close-circle" size={24} color="#FF4444" />
                                </TouchableOpacity>
                              </View>
                            ))}
                          </View>
                        </View>
                      )}
                    </View>
                  ) : currentUser?.photos && currentUser.photos.length > 0 ? (
                    <View style={styles.galleryContainer}>
                      <View style={styles.galleryGrid}>
                        {currentUser.photos.map((photo, index) => (
                        <TouchableOpacity
                          key={index}
                            style={styles.galleryItem}
                            onPress={() => setSelectedPhoto(photo)}
                          >
                            <Image source={{ uri: photo }} style={styles.galleryImage} />
                        </TouchableOpacity>
                        ))}
                      </View>
                  </View>
                ) : (
                    <Text style={styles.noDataText}>–ù–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π</Text>
                )}
              </View>
              ) : null
            )}

            {/* –î—Ä—É–∑—å—è - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –ù–ï –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è */}
            {!isEditing && (
            <View style={styles.section}>
              <View style={styles.sectionHeader}>
                <Text style={styles.sectionTitle}>–î—Ä—É–∑—å—è</Text>
                <TouchableOpacity onPress={refreshFriends} style={styles.refreshButton}>
                  <Ionicons name="refresh" size={20} color="#FF4444" />
                </TouchableOpacity>
              </View>
              {friends.length > 0 ? (
                <View style={styles.friendsGrid}>
                  {friends.map((friend) => (
                    <TouchableOpacity
                      key={friend.id}
                      style={styles.friendItem}
                      onPress={() => router.push(`/player/${friend.id}`)}
                    >
                      <Image 
                        source={{ uri: friend.avatar || 'https://via.placeholder.com/60/333/fff?text=Player' }} 
                        style={styles.friendAvatar}
                      />
                      <Text style={styles.friendName} numberOfLines={2}>
                          {friend.name?.toUpperCase()}
                      </Text>
                      {friend.team && (
                        <Text style={styles.friendTeam} numberOfLines={1}>
                          {friend.team}
                        </Text>
                      )}
                    </TouchableOpacity>
                  ))}
                </View>
              ) : (
                <View style={styles.friendsContainer}>
                  <Text style={styles.noDataText}>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥—Ä—É–∑–µ–π</Text>
                  <Text style={styles.noDataSubtext}>
                    –ù–∞–π–¥–∏—Ç–µ –¥—Ä—É–≥–∏—Ö –∏–≥—Ä–æ–∫–æ–≤ –∏ –¥–æ–±–∞–≤—å—Ç–µ –∏—Ö –≤ –¥—Ä—É–∑—å—è
                  </Text>
                </View>
              )}
            </View>
            )}

            {/* –ó–∞–ø—Ä–æ—Å—ã –¥—Ä—É–∂–±—ã - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ–≥–¥–∞, –µ—Å–ª–∏ –µ—Å—Ç—å */}
            {receivedFriendRequests.length > 0 && (
              <View style={styles.section}>
                <View style={styles.sectionHeader}>
                  <Text style={styles.sectionTitle}>–ó–∞–ø—Ä–æ—Å—ã –¥—Ä—É–∂–±—ã</Text>
                  <TouchableOpacity onPress={loadFriendRequests} style={styles.refreshButton}>
                    <Ionicons name="refresh" size={20} color="#FF4444" />
                  </TouchableOpacity>
                </View>
                <View style={styles.friendsGrid}>
                  {receivedFriendRequests.map((requester) => (
                    <View key={requester.id} style={styles.friendRequestItem}>
                      <TouchableOpacity
                        style={styles.friendRequestContent}
                        onPress={() => router.push(`/player/${requester.id}`)}
                      >
                        <Image 
                          source={{ uri: requester.avatar || 'https://via.placeholder.com/60/333/fff?text=Player' }} 
                          style={styles.friendAvatar}
                        />
                        <Text style={styles.friendName} numberOfLines={2}>
                          {requester.name?.toUpperCase()}
                        </Text>
                        {requester.team && (
                          <Text style={styles.friendTeam} numberOfLines={1}>
                            {requester.team}
                          </Text>
                        )}
                      </TouchableOpacity>
                      <View style={styles.friendRequestActionsBottom}>
                        <TouchableOpacity
                          style={[styles.actionButton, styles.acceptButton]}
                          onPress={() => handleAcceptFriendRequest(requester.id)}
                        >
                          <Ionicons name="checkmark" size={16} color="#fff" />
                        </TouchableOpacity>
                        <TouchableOpacity
                          style={[styles.actionButton, styles.declineButton]}
                          onPress={() => handleDeclineFriendRequest(requester.id)}
                        >
                          <Ionicons name="close" size={16} color="#fff" />
                        </TouchableOpacity>
                      </View>
                    </View>
                  ))}
                </View>
              </View>
            )}

            {/* –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π */}
            {isEditing && (
              <View style={styles.actionsSection}>
                <TouchableOpacity style={styles.saveButton} onPress={handleSave}>
                  <Ionicons name="save" size={20} color="#fff" />
                  <Text style={styles.saveButtonText}>–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è</Text>
                </TouchableOpacity>
                <TouchableOpacity 
                  style={styles.cancelButton} 
                  onPress={() => {
                    setEditData(currentUser);
                    setIsEditing(false);
                  }}
                >
                  <Ionicons name="close" size={20} color="#000" />
                  <Text style={styles.cancelButtonText}>–û—Ç–º–µ–Ω–∏—Ç—å</Text>
                </TouchableOpacity>
              </View>
            )}

            {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –≤—ã–±–æ—Ä–∞ —Å—Ç—Ä–∞–Ω—ã */}
            {showCountryPicker && (
              <View style={styles.modalOverlay}>
                <View style={styles.modalContainer}>
                  <Text style={styles.modalTitle}>–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É</Text>
                  <ScrollView style={styles.modalScroll}>
                    {countries.map((country) => (
                      <TouchableOpacity
                        key={country}
                        style={styles.modalOption}
                        onPress={() => {
                          setEditData({...editData, country: country});
                          setShowCountryPicker(false);
                        }}
                      >
                        <Text style={styles.modalOptionText}>{country}</Text>
                      </TouchableOpacity>
                    ))}
                  </ScrollView>
                  <TouchableOpacity
                    style={styles.modalCancelButton}
                    onPress={() => setShowCountryPicker(false)}
                  >
                    <Text style={styles.modalCancelButtonText}>–û—Ç–º–µ–Ω–∞</Text>
                  </TouchableOpacity>
                </View>
              </View>
            )}

            {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –≤—ã–±–æ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏ */}
            {showPositionPicker && (
              <View style={styles.modalOverlay}>
                <View style={styles.modalContainer}>
                  <Text style={styles.modalTitle}>–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–∑–∏—Ü–∏—é</Text>
                  <ScrollView style={styles.modalScroll}>
                    {positions.map((position) => (
                      <TouchableOpacity
                        key={position}
                        style={styles.modalOption}
                        onPress={() => {
                          setEditData({...editData, position: position});
                          setShowPositionPicker(false);
                        }}
                      >
                        <Text style={styles.modalOptionText}>{position}</Text>
                      </TouchableOpacity>
                    ))}
                  </ScrollView>
                  <TouchableOpacity
                    style={styles.modalCancelButton}
                    onPress={() => setShowPositionPicker(false)}
                  >
                    <Text style={styles.modalCancelButtonText}>–û—Ç–º–µ–Ω–∞</Text>
                  </TouchableOpacity>
                </View>
              </View>
            )}
            
            {/* –ö–Ω–æ–ø–∫–∞ –≤—ã—Ö–æ–¥–∞ */}
            <View style={styles.logoutContainer}>
              <TouchableOpacity 
                style={styles.logoutButton} 
                onPress={handleLogout}
              >
                <Ionicons name="log-out-outline" size={20} color="#fff" />
                <Text style={styles.logoutButtonText}>–í—ã–π—Ç–∏ –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è</Text>
              </TouchableOpacity>
            </View>
          </ScrollView>
        </View>
      </ImageBackground>
      


      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π */}
      <Modal
        visible={!!selectedPhoto}
        transparent={true}
        animationType="fade"
        onRequestClose={() => setSelectedPhoto(null)}
      >
        <View style={styles.videoModalOverlay}>
          <TouchableOpacity 
            style={styles.videoModalOverlay} 
            activeOpacity={1}
            onPress={() => setSelectedPhoto(null)}
          >
            {selectedPhoto && (
              <Image 
                source={{ uri: selectedPhoto }} 
                style={styles.fullScreenImage}
                resizeMode="contain"
              />
            )}
          </TouchableOpacity>
        </View>
      </Modal>
      
      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –≤–∏–¥–µ–æ */}
      <Modal
        visible={!!selectedVideo}
        transparent={true}
        animationType="fade"
        onRequestClose={() => setSelectedVideo(null)}
      >
        <View style={styles.videoModalOverlay}>
          <View style={styles.videoModalContainer}>
            {selectedVideo && (
              <YouTubeVideo
                url={selectedVideo.url}
                title="–ú–æ–π –º–æ–º–µ–Ω—Ç"
                timeCode={selectedVideo.timeCode || undefined}
                onClose={() => setSelectedVideo(null)}
              />
            )}
          </View>
        </View>
      </Modal>
      
      {/* –ö–∞—Å—Ç–æ–º–Ω—ã–π –∞–ª–µ—Ä—Ç */}
      <CustomAlert
        visible={alert.visible}
        title={alert.title}
        message={alert.message}
        type={alert.type}
        onConfirm={alert.onConfirm}
        onCancel={alert.onCancel}
        onSecondary={alert.onSecondary}
        showCancel={alert.showCancel}
        showSecondary={alert.showSecondary}
        confirmText={alert.confirmText}
        cancelText={alert.cancelText}
        secondaryText={alert.secondaryText}
      />
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#000',
  },
  background: {
    flex: 1,
    backgroundColor: '#000',
  },
  overlay: {
    flex: 1,
    backgroundColor: 'rgba(0, 0, 0, 0.5)',
  },
  scrollContainer: {
    flexGrow: 1,
    paddingTop: 0,
    paddingHorizontal: 20,
    paddingBottom: 20,
  },
  loadingContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
  loadingText: {
    color: '#fff',
    fontSize: 18,
    fontFamily: 'Gilroy-Regular',
  },
  header: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    marginBottom: 30,
    marginTop: 20,
  },
  backButton: {
    padding: 10,
  },
  headerTitle: {
    fontSize: 24,
    fontFamily: 'Gilroy-Bold',
    color: '#fff',
    flex: 1,
    textAlign: 'center',
  },
  editButton: {
    padding: 10,
    marginTop: -12,
  },
  profileSection: {
    alignItems: 'center',
    marginBottom: 30,
  },
  photoContainer: {
    borderRadius: 60,
    overflow: 'hidden',
    marginBottom: 15,
  },
  profileImage: {
    width: 120,
    height: 120,
    borderRadius: 60,
    borderWidth: 3,
    borderColor: '#FF4444',
  },
  avatarPlaceholder: {
    backgroundColor: '#2C3E50',
    justifyContent: 'center',
    alignItems: 'center',
  },
  editOverlay: {
    position: 'absolute',
    top: 0,
    left: 0,
    right: 0,
    bottom: 0,
    backgroundColor: 'rgba(0, 0, 0, 0.5)',
    borderRadius: 60,
    justifyContent: 'center',
    alignItems: 'center',
  },
  playerName: {
    fontSize: 28,
    fontFamily: 'Gilroy-Bold',
    color: '#fff',
    marginBottom: 5,
    lineHeight: 28,
  },
  nameRow: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    gap: 10,
  },
  numberBadge: {
    backgroundColor: '#FF4444',
    borderRadius: 15,
    paddingHorizontal: 8,
    paddingVertical: 4,
    minWidth: 30,
    alignItems: 'center',
    justifyContent: 'center',
    marginTop: -6,
  },
  numberText: {
    fontSize: 21,
    fontFamily: 'Gilroy-Bold',
    color: '#fff',
  },
  numberInput: {
    backgroundColor: '#FF4444',
    borderRadius: 15,
    paddingHorizontal: 8,
    paddingVertical: 4,
    minWidth: 30,
    textAlign: 'center',
    fontSize: 14,
    fontFamily: 'Gilroy-Bold',
    color: '#fff',
    borderWidth: 0,
  },
  playerStatus: {
    fontSize: 16,
    fontFamily: 'Gilroy-Bold',
    color: '#FF4444',
    textAlign: 'center',
    marginBottom: 2,
  },
  playerTeam: {
    fontSize: 18,
    fontFamily: 'Gilroy-Regular',
    color: '#fff',
    textAlign: 'center',
  },
  section: {
    backgroundColor: 'rgba(0, 0, 0, 0.8)',
    borderRadius: 15,
    padding: 20,
    marginBottom: 20,
    borderWidth: 1,
    borderColor: 'rgba(255, 255, 255, 0.1)',
    shadowColor: '#000',
    shadowOffset: {
      width: 0,
      height: 2,
    },
    shadowOpacity: 0.25,
    shadowRadius: 3.84,
    elevation: 5,
  },
  sectionTitle: {
    fontSize: 20,
    fontFamily: 'Gilroy-Bold',
    color: '#FF4444',
    marginBottom: 15,
  },
  sectionSubtitle: {
    fontSize: 14,
    fontFamily: 'Gilroy-Regular',
    color: '#ccc',
    marginBottom: 15,
    fontStyle: 'italic',
  },
  statsGrid: {
    flexDirection: 'row',
    justifyContent: 'space-around',
  },
  statItem: {
    alignItems: 'center',
  },
  statValue: {
    fontSize: 24,
    fontFamily: 'Gilroy-Bold',
    color: '#fff',
  },
  statLabel: {
    fontSize: 12,
    fontFamily: 'Gilroy-Regular',
    color: '#fff',
    marginTop: 5,
  },
  infoGrid: {
    flexDirection: 'row',
    flexWrap: 'wrap',
    gap: 15,
  },
  infoItem: {
    flex: 1,
    minWidth: '45%',
  },
  infoLabel: {
    fontSize: 14,
    fontFamily: 'Gilroy-Regular',
    color: '#fff',
    marginBottom: 5,
  },
  infoValue: {
    fontSize: 16,
    fontFamily: 'Gilroy-Bold',
    color: '#fff',
  },
  editInput: {
    fontSize: 16,
    fontFamily: 'Gilroy-Regular',
    color: '#fff',
    backgroundColor: 'rgba(255, 255, 255, 0.05)',
    borderRadius: 8,
    padding: 10,
    borderWidth: 1,
    borderColor: 'rgba(255, 255, 255, 0.1)',
  },
  pickerButton: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    backgroundColor: 'rgba(255, 255, 255, 0.05)',
    borderRadius: 8,
    padding: 10,
    borderWidth: 1,
    borderColor: 'rgba(255, 255, 255, 0.1)',
  },
  pickerButtonText: {
    fontSize: 16,
    fontFamily: 'Gilroy-Regular',
    color: '#fff',
  },
  dateInputContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: 'rgba(255, 255, 255, 0.05)',
    borderRadius: 8,
    paddingHorizontal: 10,
    borderWidth: 1,
    borderColor: 'rgba(255, 255, 255, 0.1)',
  },
  dateInput: {
    flex: 1,
    fontSize: 16,
    fontFamily: 'Gilroy-Regular',
    color: '#fff',
    paddingVertical: 10,
  },
  dateInputIcon: {
    marginLeft: 10,
  },
  galleryContainer: {
    marginTop: 20,
  },
  galleryTitle: {
    fontSize: 16,
    fontFamily: 'Gilroy-Bold',
    color: '#fff',
    marginBottom: 15,
  },
  galleryGrid: {
    flexDirection: 'row',
    flexWrap: 'wrap',
    gap: 10,
  },
  galleryItem: {
    position: 'relative',
    width: 100,
    height: 75,
  },
  galleryImage: {
    width: '100%',
    height: '100%',
    borderRadius: 8,
  },
  removePhotoButton: {
    position: 'absolute',
    top: -8,
    right: -8,
    backgroundColor: '#000',
    borderRadius: 12,
  },
  textArea: {
    height: 80,
    textAlignVertical: 'top',
  },
  goalsContainer: {
    gap: 10,
  },
  goalLink: {
    flexDirection: 'row',
    alignItems: 'center',
    padding: 10,
    backgroundColor: 'rgba(255, 255, 255, 0.03)',
    borderRadius: 8,
    borderWidth: 1,
    borderColor: 'rgba(255, 255, 255, 0.05)',
  },
  goalLinkText: {
    fontSize: 14,
    fontFamily: 'Gilroy-Regular',
    color: '#fff',
    marginLeft: 10,
    flex: 1,
  },
  friendsContainer: {
    alignItems: 'center',
    padding: 20,
  },
  noDataText: {
    fontSize: 16,
    fontFamily: 'Gilroy-Regular',
    color: '#888',
    textAlign: 'center',
  },
  actionsSection: {
    gap: 15,
    marginTop: 20,
  },
  saveButton: {
    backgroundColor: '#FF4444',
    borderRadius: 12,
    padding: 15,
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
  },
  saveButtonText: {
    fontSize: 16,
    fontFamily: 'Gilroy-Bold',
    color: '#fff',
    marginLeft: 10,
  },
  cancelButton: {
    backgroundColor: '#fff',
    borderRadius: 12,
    padding: 15,
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    borderWidth: 1,
    borderColor: '#fff',
  },
  cancelButtonText: {
    fontSize: 16,
    fontFamily: 'Gilroy-Bold',
    color: '#000',
    marginLeft: 10,
  },
  modalOverlay: {
    position: 'absolute',
    top: 0,
    left: 0,
    right: 0,
    bottom: 0,
    backgroundColor: 'rgba(0, 0, 0, 0.8)',
    justifyContent: 'center',
    alignItems: 'center',
    zIndex: 1000,
  },
  modalContainer: {
    backgroundColor: 'rgba(0, 0, 0, 0.9)',
    borderRadius: 15,
    padding: 20,
    borderWidth: 1,
    borderColor: 'rgba(255, 255, 255, 0.2)',
    minWidth: 300,
    maxHeight: 400,
  },
  modalTitle: {
    fontSize: 18,
    fontFamily: 'Gilroy-Bold',
    color: '#fff',
    textAlign: 'center',
    marginBottom: 15,
  },
  modalScroll: {
    maxHeight: 250,
  },
  modalOption: {
    padding: 15,
    borderBottomWidth: 1,
    borderBottomColor: 'rgba(255, 255, 255, 0.1)',
  },
  modalOptionText: {
    fontSize: 16,
    fontFamily: 'Gilroy-Regular',
    color: '#fff',
    textAlign: 'center',
  },
  modalCancelButton: {
    marginTop: 15,
    padding: 12,
    backgroundColor: 'rgba(255, 255, 255, 0.1)',
    borderRadius: 8,
    alignItems: 'center',
  },
  modalCancelButtonText: {
    fontSize: 16,
    fontFamily: 'Gilroy-Bold',
    color: '#fff',
  },
  addMoreButton: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    backgroundColor: 'rgba(255, 68, 68, 0.1)',
    borderRadius: 8,
    padding: 12,
    marginTop: 10,
    borderWidth: 1,
    borderColor: '#FF4444',
  },
  addMoreButtonText: {
    fontSize: 14,
    fontFamily: 'Gilroy-Bold',
    color: '#FF4444',
    marginLeft: 8,
  },
  videoFieldContainer: {
    marginBottom: 15,
  },
  videoUrlInput: {
    fontSize: 16,
    fontFamily: 'Gilroy-Regular',
    color: '#fff',
    backgroundColor: 'rgba(255, 255, 255, 0.05)',
    borderRadius: 8,
    padding: 10,
    borderWidth: 1,
    borderColor: 'rgba(255, 255, 255, 0.1)',
    marginBottom: 8,
  },
  timeCodeInput: {
    fontSize: 16,
    fontFamily: 'Gilroy-Regular',
    color: '#fff',
    backgroundColor: 'rgba(255, 255, 255, 0.05)',
    borderRadius: 8,
    padding: 10,
    borderWidth: 1,
    borderColor: 'rgba(255, 255, 255, 0.1)',
    width: '30%',
    textAlign: 'center',
  },
  removeVideoButton: {
    position: 'absolute',
    top: 5,
    right: 5,
    padding: 5,
  },
  logoutContainer: {
    marginTop: 30,
    marginBottom: 20,
  },
  logoutButton: {
    backgroundColor: '#000',
    borderRadius: 12,
    padding: 15,
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    borderWidth: 1,
    borderColor: '#fff',
  },
  logoutButtonText: {
    fontSize: 16,
    fontFamily: 'Gilroy-Bold',
    color: '#fff',
    marginLeft: 10,
  },
  resetButton: {
    backgroundColor: 'rgba(255, 193, 7, 0.2)',
    borderColor: 'rgba(255, 193, 7, 0.5)',
    marginBottom: 10,
  },
  friendsGrid: {
    flexDirection: 'row',
    flexWrap: 'wrap',
    gap: 15,
  },
  friendItem: {
    width: '45%',
    alignItems: 'center',
    backgroundColor: 'rgba(255, 255, 255, 0.03)',
    borderRadius: 12,
    padding: 12,
    borderWidth: 1,
    borderColor: 'rgba(255, 255, 255, 0.05)',
  },
  friendAvatar: {
    width: 60,
    height: 60,
    borderRadius: 30,
    marginBottom: 8,
  },
  friendName: {
    fontSize: 13,
    fontFamily: 'Gilroy-Bold',
    color: '#fff',
    textAlign: 'center',
    marginBottom: 3,
    lineHeight: 16,
    flexWrap: 'wrap',
  },
  friendTeam: {
    fontSize: 11,
    fontFamily: 'Gilroy-Regular',
    color: '#fff',
    textAlign: 'center',
    marginBottom: 5,
  },
  noDataSubtext: {
    fontSize: 14,
    fontFamily: 'Gilroy-Regular',
    color: '#666',
    textAlign: 'center',
        marginTop: 5,
  },
  sectionHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 15,
  },
  refreshButton: {
    padding: 5,
  },
  statsEditGrid: {
    flexDirection: 'row',
    flexWrap: 'wrap',
    gap: 15,
  },
  statEditItem: {
    flex: 1,
    minWidth: '45%',
  },
  statEditLabel: {
    fontSize: 14,
    fontFamily: 'Gilroy-Regular',
    color: '#fff',
    marginBottom: 5,
  },
  statEditInput: {
    fontSize: 16,
    fontFamily: 'Gilroy-Regular',
    color: '#fff',
    backgroundColor: 'rgba(255, 255, 255, 0.05)',
    borderRadius: 8,
    padding: 10,
    borderWidth: 1,
    borderColor: 'rgba(255, 255, 255, 0.1)',
    textAlign: 'center',
  },
  readOnlyInput: {
    backgroundColor: 'rgba(255, 255, 255, 0.02)',
    borderColor: 'rgba(255, 255, 255, 0.05)',
    color: '#ccc',
  },
  videoModalOverlay: {
    flex: 1,
    backgroundColor: 'rgba(0, 0, 0, 0.9)',
    justifyContent: 'center',
  },
  addPhotoButton: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: 'rgba(255, 68, 68, 0.1)',
    borderRadius: 12,
    padding: 15,
    borderWidth: 1,
    borderColor: '#FF4444',
    justifyContent: 'center',
  },
  addPhotoButtonText: {
    fontSize: 16,
    fontFamily: 'Gilroy-Bold',
    color: '#FF4444',
    marginLeft: 8,
  },
  photosContainer: {
    alignItems: 'center',
    paddingVertical: 10,
  },
  videoModalContainer: {
    width: '90%',
    height: '80%',
    borderRadius: 12,
    overflow: 'hidden',
  },
  friendRequestItem: {
    flexDirection: 'column',
    alignItems: 'center',
    backgroundColor: 'rgba(255, 255, 255, 0.03)',
    borderRadius: 8,
    padding: 12,
    borderWidth: 1,
    borderColor: 'rgba(255, 255, 255, 0.05)',
    minWidth: 140,
    width: '45%',
  },
  friendRequestActions: {
    flexDirection: 'row',
    gap: 10,
  },
  friendRequestActionsBottom: {
    flexDirection: 'row',
    justifyContent: 'center',
    gap: 10,
    marginTop: 8,
  },
  actionButton: {
    padding: 8,
    borderRadius: 10,
  },
  acceptButton: {
    backgroundColor: '#4CAF50',
  },
  declineButton: {
    backgroundColor: '#F44336',
  },
  friendRequestContent: {
    width: '100%',
    alignItems: 'center',
    backgroundColor: 'rgba(255, 255, 255, 0.03)',
    borderRadius: 12,
    padding: 15,
    borderWidth: 1,
    borderColor: 'rgba(255, 255, 255, 0.05)',
  },
  fullScreenImage: {
    width: '100%',
    height: '100%',
  },
  adminProfile: {
    alignItems: 'center',
    padding: 10,
    backgroundColor: 'rgba(255, 255, 255, 0.1)',
    borderRadius: 8,
  },
  adminTitle: {
    fontSize: 16,
    fontFamily: 'Gilroy-Bold',
    color: '#FF4444',
    marginBottom: 5,
  },
  adminSubtitle: {
    fontSize: 14,
    fontFamily: 'Gilroy-Regular',
    color: '#fff',
    textAlign: 'center',
  },

}); 