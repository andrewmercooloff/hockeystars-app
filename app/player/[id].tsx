import { Ionicons } from '@expo/vector-icons';
import AsyncStorage from '@react-native-async-storage/async-storage';
import { useFocusEffect, useLocalSearchParams, useRouter } from 'expo-router';
import React, { useCallback, useEffect, useState } from 'react';
import {
    Alert,
    Image,
    ImageBackground,
    Linking,
    Modal,
    ScrollView,
    StyleSheet,
    Text,
    TouchableOpacity,
    View
} from 'react-native';
import CustomAlert from '../../components/CustomAlert';
import NormativesSection from '../../components/NormativesSection';
import PhotosSection from '../../components/PhotosSection';
import VideoCarousel from '../../components/VideoCarousel';
import YouTubeVideo from '../../components/YouTubeVideo';
import { acceptFriendRequest, cancelFriendRequest, clearAllFriendRequests, createFriendRequestNotification, debugFriendRequests, declineFriendRequest, getFriends, getFriendshipStatus, getPlayerById, loadCurrentUser, Player, removeFriend, sendFriendRequest } from '../../utils/playerStorage';
import { supabase } from '../../utils/supabase';

const iceBg = require('../../assets/images/led.jpg');

export default function PlayerProfile() {
  const { id } = useLocalSearchParams();
  const router = useRouter();
  const [player, setPlayer] = useState<Player | null>(null);
  const [currentUser, setCurrentUser] = useState<Player | null>(null);
  const [loading, setLoading] = useState(true);
  const [friendshipStatus, setFriendshipStatus] = useState<'friends' | 'sent_request' | 'received_request' | 'none'>('none');
  const [friendLoading, setFriendLoading] = useState(false);
  const [friends, setFriends] = useState<Player[]>([]);
  const [selectedVideo, setSelectedVideo] = useState<{ url: string; timeCode?: string } | null>(null);
  const [alert, setAlert] = useState({
    visible: false,
    title: '',
    message: '',
    type: 'info' as 'success' | 'error' | 'warning' | 'info',
    onConfirm: () => {},
    onCancel: () => {},
    onSecondary: () => {},
    showCancel: false,
    showSecondary: false,
    confirmText: 'OK',
    cancelText: '–û—Ç–º–µ–Ω–∞',
    secondaryText: '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ'
  });
  const [showAlert, setShowAlert] = useState(false);
  const [alertMessage, setAlertMessage] = useState('');
  const [alertType, setAlertType] = useState<'success' | 'error' | 'info'>('info');

  // –õ–æ–∫–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –æ–ø—ã—Ç–∞ –≤ —Ö–æ–∫–∫–µ–µ (–≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ)
  const calculateHockeyExperience = (startDate?: string): string => {
    console.log('üîß –õ–æ–∫–∞–ª—å–Ω–∞—è calculateHockeyExperience –≤—ã–∑–≤–∞–Ω–∞ —Å:', startDate);
    if (!startDate) return '';
    try {
      const [month, year] = startDate.split('.');
      const start = new Date(parseInt(year), parseInt(month) - 1);
      const now = new Date();
      let years = now.getFullYear() - start.getFullYear();
      let months = now.getMonth() - start.getMonth();
      if (months < 0) {
        years--;
        months += 12;
      }
      
      // –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–∫–ª–æ–Ω–µ–Ω–∏–µ –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞
      const getYearWord = (num: number): string => {
        if (num === 1) return '–≥–æ–¥';
        if (num >= 2 && num <= 4) return '–≥–æ–¥–∞';
        return '–ª–µ—Ç';
      };
      
      const result = years > 0 ? `${years} ${getYearWord(years)}` : `${months} –º–µ—Å.`;
      console.log('üîß –õ–æ–∫–∞–ª—å–Ω–∞—è calculateHockeyExperience —Ä–µ–∑—É–ª—å—Ç–∞—Ç:', result);
      return result;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π calculateHockeyExperience:', error);
      return '';
    }
  };

  useEffect(() => {
    loadPlayerData();
  }, [id]);

  // –î–æ–±–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏ —Ñ–æ–∫—É—Å–µ —ç–∫—Ä–∞–Ω–∞
  useFocusEffect(
    useCallback(() => {
      console.log('üîÑ –≠–∫—Ä–∞–Ω –ø—Ä–æ—Ñ–∏–ª—è –∏–≥—Ä–æ–∫–∞ –ø–æ–ª—É—á–∏–ª —Ñ–æ–∫—É—Å, –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ...');
      loadPlayerData();
    }, [id])
  );

  const loadPlayerData = async () => {
    try {
      if (id) {
        const playerData = await getPlayerById(id as string);
        const userData = await loadCurrentUser();
        console.log('Loaded player data:', playerData?.name, 'Status:', playerData?.status, 'Is star:', playerData?.status === 'star');
        console.log('üì∏ –ê–≤–∞—Ç–∞—Ä –∏–≥—Ä–æ–∫–∞:', {
          name: playerData?.name,
          hasAvatar: !!playerData?.avatar,
          avatarLength: playerData?.avatar?.length || 0
        });
        setPlayer(playerData);
        setCurrentUser(userData);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –¥—Ä—É–∂–±—ã, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
        if (userData && playerData) {
          // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–º–æ—Ç—Ä–∏—Ç —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å 'friends'
          if (userData.id === playerData.id) {
            console.log('üîç –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–º–æ—Ç—Ä–∏—Ç —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å friends');
            setFriendshipStatus('friends');
          } else {
            console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –¥—Ä—É–∂–±—ã –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º', userData.name, '–∏ –∏–≥—Ä–æ–∫–æ–º', playerData.name);
            const friendsStatus = await getFriendshipStatus(userData.id, playerData.id);
            console.log('üîç –ü–æ–ª—É—á–µ–Ω —Å—Ç–∞—Ç—É—Å –¥—Ä—É–∂–±—ã:', friendsStatus);
            setFriendshipStatus(friendsStatus);
          }
        }
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥—Ä—É–∑–µ–π –∏–≥—Ä–æ–∫–∞
        if (playerData) {
          const friendsList = await getFriends(playerData.id);
          setFriends(friendsList);
        }
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–∞:', error);
      showCustomAlert('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞', 'error');
    } finally {
      setLoading(false);
    }
  };

  const showCustomAlert = (title: string, message: string, type: 'success' | 'error' | 'warning' | 'info' = 'info', onConfirm?: () => void) => {
    setAlert({
      visible: true,
      title,
      message,
      type,
      onConfirm: onConfirm || (() => setAlert({ ...alert, visible: false })),
      onCancel: () => {},
      onSecondary: () => {},
      showCancel: false,
      showSecondary: false,
      confirmText: 'OK',
      cancelText: '–û—Ç–º–µ–Ω–∞',
      secondaryText: '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ'
    });
  };

  const handleSendMessage = () => {
    if (!currentUser) {
      showCustomAlert('–û—à–∏–±–∫–∞', '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π', 'error', () => router.push('/login'));
      return;
    }
    
    // –û—Ç–∫—Ä—ã–≤–∞–µ–º —á–∞—Ç —Å –∏–≥—Ä–æ–∫–æ–º
    router.push({ pathname: '/chat/[id]', params: { id: player!.id } });
  };

  const handleAddFriend = async () => {
    console.log('üîß handleAddFriend –≤—ã–∑–≤–∞–Ω–∞!');
    console.log('üîß friendshipStatus:', friendshipStatus);
    console.log('üîß currentUser.id:', currentUser?.id);
    console.log('üîß player.id:', player?.id);
    
    if (!currentUser || !player) {
      showCustomAlert('–û—à–∏–±–∫–∞', '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –¥—Ä—É–∑—å—è', 'error', () => router.push('/login'));
      return;
    }
    
    setFriendLoading(true);
    try {
      if (friendshipStatus === 'friends') {
        console.log('üîß –£–¥–∞–ª—è–µ–º –∏–∑ –¥—Ä—É–∑–µ–π');
        // –£–¥–∞–ª—è–µ–º –∏–∑ –¥—Ä—É–∑–µ–π
        const success = await removeFriend(currentUser.id, player.id);
        console.log('üîß removeFriend —Ä–µ–∑—É–ª—å—Ç–∞—Ç:', success);
        if (success) {
          setFriendshipStatus('none');
          showCustomAlert('–£—Å–ø–µ—à–Ω–æ', `${player.name} —É–¥–∞–ª–µ–Ω –∏–∑ –¥—Ä—É–∑–µ–π`, 'success');
        } else {
          showCustomAlert('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∏–∑ –¥—Ä—É–∑–µ–π', 'error');
        }
      } else if (friendshipStatus === 'none') {
        console.log('üîß –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –¥—Ä—É–∂–±—ã');
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –¥—Ä—É–∂–±—ã
        const success = await sendFriendRequest(currentUser.id, player.id);
        console.log('üîß sendFriendRequest —Ä–µ–∑—É–ª—å—Ç–∞—Ç:', success);
        if (success) {
          setFriendshipStatus('sent_request');
          showCustomAlert('–ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω', `–ó–∞–ø—Ä–æ—Å –¥—Ä—É–∂–±—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω ${player.name}`, 'success');
        } else {
          showCustomAlert('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –¥—Ä—É–∂–±—ã', 'error');
        }
      } else if (friendshipStatus === 'sent' || friendshipStatus === 'sent_request') {
        console.log('üîß –û—Ç–º–µ–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å');
        // –û—Ç–º–µ–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
        const success = await cancelFriendRequest(currentUser.id, player.id);
        console.log('üîß cancelFriendRequest —Ä–µ–∑—É–ª—å—Ç–∞—Ç:', success);
        if (success) {
          setFriendshipStatus('none');
          showCustomAlert('–ó–∞–ø—Ä–æ—Å –æ—Ç–º–µ–Ω–µ–Ω', '–ó–∞–ø—Ä–æ—Å –¥—Ä—É–∂–±—ã –æ—Ç–º–µ–Ω–µ–Ω', 'info');
        } else {
          showCustomAlert('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å', 'error');
        }
      } else if (friendshipStatus === 'received_request') {
        console.log('üîß –ü—Ä–∏–Ω–∏–º–∞–µ–º –∑–∞–ø—Ä–æ—Å');
        console.log('üîß –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è acceptFriendRequest:', { currentUserId: currentUser.id, playerId: player.id });
        // –ü—Ä–∏–Ω–∏–º–∞–µ–º –∑–∞–ø—Ä–æ—Å
        const success = await acceptFriendRequest(currentUser.id, player.id);
        console.log('üîß acceptFriendRequest —Ä–µ–∑—É–ª—å—Ç–∞—Ç:', success);
        if (success) {
          setFriendshipStatus('friends');
          showCustomAlert('–î—Ä—É–∂–±–∞ –ø—Ä–∏–Ω—è—Ç–∞', `${player.name} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –¥—Ä—É–∑—å—è`, 'success');
        } else {
          showCustomAlert('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–Ω—è—Ç—å –∑–∞–ø—Ä–æ—Å', 'error');
        }
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞ –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥—Ä—É–∑–µ–π
      await loadPlayerData();
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥—Ä—É–∑—å—è–º–∏:', error);
      showCustomAlert('–û—à–∏–±–∫–∞', '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –¥—Ä—É–∑—å—è–º–∏', 'error');
    } finally {
      setFriendLoading(false);
    }
  };

  const handleDeclineFriend = async () => {
    if (!currentUser || !player) {
      showCustomAlert('–û—à–∏–±–∫–∞', '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ –ø—Ä–æ—Ñ–∏–ª—å', 'error', () => router.push('/login'));
      return;
    }
    
    setFriendLoading(true);
    try {
      const success = await declineFriendRequest(currentUser.id, player.id);
      if (success) {
        setFriendshipStatus('none');
        showCustomAlert('–ó–∞–ø—Ä–æ—Å –æ—Ç–∫–ª–æ–Ω–µ–Ω', '–ó–∞–ø—Ä–æ—Å –¥—Ä—É–∂–±—ã –æ—Ç–∫–ª–æ–Ω–µ–Ω', 'info');
      } else {
        showCustomAlert('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å', 'error');
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞ –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥—Ä—É–∑–µ–π
      await loadPlayerData();
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –¥—Ä—É–∂–±—ã:', error);
      showCustomAlert('–û—à–∏–±–∫–∞', '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞', 'error');
    } finally {
      setFriendLoading(false);
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ URL –∏ —Ç–∞–π–º–∫–æ–¥–∞
  const parseVideoUrl = (input: string): { url: string; timeCode?: string } => {
    const timeMatch = input.match(/\(–≤—Ä–µ–º—è:\s*(\d{1,2}:\d{2})\)/);
    const timeCode = timeMatch ? timeMatch[1] : undefined;
    const url = input.replace(/\s*\(–≤—Ä–µ–º—è:\s*\d{1,2}:\d{2}\)/, '').trim();
    return { url, timeCode };
  };

  const openYouTubeLink = (url: string) => {
    if (url) {
      Linking.openURL(url).catch(() => {
        Alert.alert('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Å—Å—ã–ª–∫—É');
      });
    }
  };

  const handleRequestAutograph = () => {
    if (!currentUser || !player) {
      showCustomAlert('–û—à–∏–±–∫–∞', '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞', 'error', () => router.push('/login'));
      return;
    }
    showCustomAlert(
      '–ó–∞–ø—Ä–æ—Å –∞–≤—Ç–æ–≥—Ä–∞—Ñ–∞', 
      `–í–∞—à –∑–∞–ø—Ä–æ—Å –∞–≤—Ç–æ–≥—Ä–∞—Ñ–∞ –æ—Ç ${player.name} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! –ó–≤–µ–∑–¥–∞ –ø–æ–ª—É—á–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.`,
      'success'
    );
  };

  const handleRequestStick = () => {
    if (!currentUser || !player) {
      showCustomAlert('–û—à–∏–±–∫–∞', '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞', 'error', () => router.push('/login'));
      return;
    }
    showCustomAlert(
      '–ó–∞–ø—Ä–æ—Å –∫–ª—é—à–∫–∏', 
      `–í–∞—à –∑–∞–ø—Ä–æ—Å –∫–ª—é—à–∫–∏ –æ—Ç ${player.name} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! –ó–≤–µ–∑–¥–∞ –ø–æ–ª—É—á–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.`,
      'success'
    );
  };

  const handleDebugFriendRequests = async () => {
    console.log('üîß –û—Ç–ª–∞–¥–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –¥—Ä—É–∂–±—ã...');
    await debugFriendRequests();
    showCustomAlert('–û—Ç–ª–∞–¥–∫–∞', '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–ø—Ä–æ—Å–∞—Ö –¥—Ä—É–∂–±—ã', 'info');
  };

  const handleClearAllFriendRequests = async () => {
    console.log('üîß –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –¥—Ä—É–∂–±—ã...');
    await clearAllFriendRequests();
    showCustomAlert('–û—á–∏—Å—Ç–∫–∞', '–í—Å–µ –∑–∞–ø—Ä–æ—Å—ã –¥—Ä—É–∂–±—ã –æ—á–∏—â–µ–Ω—ã', 'info');
    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏
    await loadPlayerData();
  };

  const handleTestNotification = async () => {
    if (!currentUser || !player) return;
    
    console.log('üîî –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è...');
    await createFriendRequestNotification(player.id, currentUser.id);
    showCustomAlert('–¢–µ—Å—Ç', '–¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ', 'info');
  };

  const handleViewAllNotifications = async () => {
    try {
      const notificationsData = await AsyncStorage.getItem('hockeystars_notifications');
      const allNotifications = notificationsData ? JSON.parse(notificationsData) : [];
      console.log('üîî –í—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ —Å–∏—Å—Ç–µ–º–µ:', allNotifications);
      showCustomAlert('–û—Ç–ª–∞–¥–∫–∞', `–í—Å–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: ${allNotifications.length}`, 'info');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', error);
    }
  };

  const handleSendFriendRequestFromPlayer = async () => {
    if (!currentUser || !player) return;
    
    console.log('üîî –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –¥—Ä—É–∂–±—ã –æ—Ç –∏–≥—Ä–æ–∫–∞ –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É...');
    try {
      await sendFriendRequest(player.id, currentUser.id);
      showCustomAlert('–£—Å–ø–µ—Ö', '–ó–∞–ø—Ä–æ—Å –¥—Ä—É–∂–±—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç –∏–º–µ–Ω–∏ –∏–≥—Ä–æ–∫–∞', 'success');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –¥—Ä—É–∂–±—ã:', error);
      showCustomAlert('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –¥—Ä—É–∂–±—ã', 'error');
    }
  };

  const handleTestMessage = async () => {
    if (!currentUser || !player) return;
    
            // –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è
    try {
      const { sendMessageSimple } = await import('../../utils/playerStorage');
      const success = await sendMessageSimple(player.id, currentUser.id, '–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∏–≥—Ä–æ–∫–∞!');
      if (success) {
        showCustomAlert('–£—Å–ø–µ—Ö', '–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ', 'success');
      } else {
        showCustomAlert('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ', 'error');
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
      showCustomAlert('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ', 'error');
    }
  };

  const handleViewAllMessages = async () => {
    try {
      const messagesData = await AsyncStorage.getItem('hockeystars_messages');
      const allMessages = messagesData ? JSON.parse(messagesData) : [];
              // –í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å–∏—Å—Ç–µ–º–µ
      showCustomAlert('–û—Ç–ª–∞–¥–∫–∞', `–í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: ${allMessages.length}`, 'info');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏–π:', error);
    }
  };

  const handleRefreshCounters = async () => {
    if (!currentUser) return;
    
    console.log('üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏...');
    try {
      const { getUnreadMessageCount } = await import('../../utils/playerStorage');
      const unreadMessagesCount = await getUnreadMessageCount(currentUser.id);
              // –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å—á–µ—Ç—á–∏–∫ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
      showCustomAlert('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ', `–ù–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: ${unreadMessagesCount}`, 'info');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–æ–≤:', error);
    }
  };

  const handleDeletePlayer = async () => {
    if (!currentUser || currentUser.status !== 'admin') {
      showCustomAlert('–û—à–∏–±–∫–∞', '–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç —É–¥–∞–ª—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', 'error');
      return;
    }

    if (!player) {
      showCustomAlert('–û—à–∏–±–∫–∞', '–î–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã', 'error');
      return;
    }

    // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    showCustomAlert(
      '–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
      `–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è "${player.name}"? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.`,
      'warning',
      async () => {
        try {
          console.log('üóëÔ∏è –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', player.id);
          
          // –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
          const { error } = await supabase
            .from('players')
            .delete()
            .eq('id', player.id);
          
          if (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
            showCustomAlert('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', 'error');
          } else {
            console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω');
            showCustomAlert(
              '–£—Å–ø–µ—à–Ω–æ', 
              `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å "${player.name}" —É–¥–∞–ª–µ–Ω`,
              'success',
              () => router.push('/')
            );
          }
        } catch (error) {
          console.error('‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è:', error);
          showCustomAlert('–û—à–∏–±–∫–∞', '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', 'error');
        }
      }
    );
  };

  if (loading) {
    return (
      <View style={styles.container}>
        <ImageBackground source={iceBg} style={styles.background} resizeMode="cover">
          <View style={styles.overlay}>
            <View style={styles.loadingContainer}>
              <Text style={styles.loadingText}>–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è...</Text>
            </View>
          </View>
        </ImageBackground>
      </View>
    );
  }

  if (!player) {
    return (
      <View style={styles.container}>
        <ImageBackground source={iceBg} style={styles.background} resizeMode="cover">
          <View style={styles.overlay}>
            <View style={styles.errorContainer}>
              <Text style={styles.errorText}>–ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω</Text>
            </View>
          </View>
        </ImageBackground>
      </View>
    );
  }



  return (
    <View style={styles.container}>
      <ImageBackground source={iceBg} style={styles.background} resizeMode="cover">
        <View style={styles.overlay}>
          <ScrollView contentContainerStyle={styles.scrollContainer}>
            


            {/* –§–æ—Ç–æ –∏ –æ—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
            <View style={styles.profileSection}>
              {(() => {
                const imageSource = player.avatar;
                const hasValidImage = imageSource && typeof imageSource === 'string' && (
                  imageSource.startsWith('data:image/') || 
                  imageSource.startsWith('http') || 
                  imageSource.startsWith('file://') || 
                  imageSource.startsWith('content://')
                );

                if (hasValidImage) {
                  return (
                    <Image 
                      source={{ uri: imageSource }}
                      style={styles.profileImage}
                      onError={() => console.log('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è')}
                    />
                  );
                } else {
                  return (
                    <View style={[styles.profileImage, styles.avatarPlaceholder]}>
                      <Ionicons name="person" size={48} color="#FFFFFF" />
                    </View>
                  );
                }
              })()}
              <View style={styles.nameRow}>
                <Text style={styles.playerName}>{player.name?.toUpperCase()}</Text>
                {player.number && (
                  <View style={styles.numberBadge}>
                    <Text style={styles.numberText}>#{player.number}</Text>
                  </View>
                )}
                {/* –ö–Ω–æ–ø–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ */}
                {currentUser?.status === 'admin' && (
                  <TouchableOpacity 
                    style={styles.editButton} 
                    onPress={() => {
                      console.log('üîß –ê–¥–º–∏–Ω —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç –∏–≥—Ä–æ–∫–∞:', player.name);
                      router.push({ pathname: '/admin', params: { editPlayerId: player.id } });
                    }}
                  >
                    <Ionicons name="create" size={20} color="#8A2BE2" />
                  </TouchableOpacity>
                )}
              </View>
              <View style={styles.statusContainer}>
                <Text style={styles.playerStatus}>
                  {player.status === 'player' ? '–ò–≥—Ä–æ–∫' : 
                   player.status === 'coach' ? '–¢—Ä–µ–Ω–µ—Ä' : 
                   player.status === 'scout' ? '–°–∫–∞—É—Ç' : 
                   player.status === 'admin' ? '–¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞' : '–ó–≤–µ–∑–¥–∞'}
                </Text>
              </View>
              {player.team && <Text style={styles.playerTeam}>{player.team}</Text>}
              {player.hockeyStartDate && calculateHockeyExperience(player.hockeyStartDate) && (
                <Text style={styles.hockeyExperience}>
                  –í —Ö–æ–∫–∫–µ–µ {calculateHockeyExperience(player.hockeyStartDate)}
                </Text>
              )}
            </View>

            {/* –°–µ–∫—Ü–∏—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥—Ä—É–∂–±–æ–π - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–ª—è –≤—Å–µ—Ö —Å—Ç–∞—Ç—É—Å–æ–≤ –¥—Ä—É–∂–±—ã */}
            {currentUser && currentUser.id !== player.id && (
              <View style={styles.friendRequestSection}>
                {friendshipStatus === 'received_request' ? (
                  // –ó–∞–ø—Ä–æ—Å –¥—Ä—É–∂–±—ã –ø–æ–ª—É—á–µ–Ω
                  <>
                    <View style={styles.friendRequestHeader}>
                      <Ionicons name="person-add-outline" size={24} color="#FF4444" />
                      <Text style={[styles.friendRequestTitle, { color: '#FF4444' }]}>–ó–∞–ø—Ä–æ—Å –¥—Ä—É–∂–±—ã</Text>
                    </View>
                    <Text style={styles.friendRequestMessage}>
                      {player.name} —Ö–æ—á–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å –≤–∞—Å –≤ –¥—Ä—É–∑—å—è
                    </Text>
                    <View style={styles.friendRequestButtons}>
                      <TouchableOpacity 
                        style={[styles.friendRequestButton, styles.acceptRequestButton]} 
                        onPress={handleAddFriend}
                        disabled={friendLoading}
                      >
                        <Ionicons name="checkmark-outline" size={20} color="#fff" />
                        <Text style={styles.friendRequestButtonText}>
                          {friendLoading ? '–ó–∞–≥—Ä—É–∑–∫–∞...' : '–ü—Ä–∏–Ω—è—Ç—å'}
                        </Text>
                      </TouchableOpacity>
                      
                      <TouchableOpacity 
                        style={[styles.friendRequestButton, styles.declineRequestButton]} 
                        onPress={handleDeclineFriend}
                        disabled={friendLoading}
                      >
                        <Ionicons name="close-outline" size={20} color="#000" />
                        <Text style={[styles.friendRequestButtonText, { color: '#000', fontFamily: 'Gilroy-Bold' }]}>
                          {friendLoading ? '–ó–∞–≥—Ä—É–∑–∫–∞...' : '–û—Ç–∫–ª–æ–Ω–∏—Ç—å'}
                        </Text>
                      </TouchableOpacity>
                    </View>
                  </>
                ) : friendshipStatus === 'friends' ? (
                  // –£–∂–µ –¥—Ä—É–∑—å—è
                  <>
                    <View style={styles.friendRequestHeader}>
                      <Ionicons name="people-outline" size={24} color="#FF4444" />
                      <Text style={[styles.friendRequestTitle, { color: '#FF4444' }]}>–î—Ä—É–∑—å—è</Text>
                    </View>
                    <Text style={styles.friendRequestMessage}>
                      –í—ã –¥—Ä—É–∑—å—è —Å {player.name}
                    </Text>
                    <View style={styles.friendRequestButtons}>
                      <TouchableOpacity 
                        style={[styles.friendRequestButton, { backgroundColor: 'rgba(255, 0, 0, 0.3)', borderColor: '#FF0000' }]} 
                        onPress={handleAddFriend}
                        disabled={friendLoading}
                      >
                        <Ionicons name="person-remove-outline" size={20} color="#fff" />
                        <Text style={styles.friendRequestButtonText}>
                          {friendLoading ? '–ó–∞–≥—Ä—É–∑–∫–∞...' : '–£–¥–∞–ª–∏—Ç—å –∏–∑ –¥—Ä—É–∑–µ–π'}
                        </Text>
                      </TouchableOpacity>
                    </View>
                  </>
                ) : (friendshipStatus === 'sent' || friendshipStatus === 'sent_request') ? (
                  // –ó–∞–ø—Ä–æ—Å –¥—Ä—É–∂–±—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω
                  <>
                    <View style={styles.friendRequestHeader}>
                      <Ionicons name="time-outline" size={24} color="#FF4444" />
                      <Text style={[styles.friendRequestTitle, { color: '#FF4444' }]}>–ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω</Text>
                    </View>
                    <Text style={styles.friendRequestMessage}>
                      –ó–∞–ø—Ä–æ—Å –¥—Ä—É–∂–±—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω {player.name}
                    </Text>
                    <View style={styles.friendRequestButtons}>
                      <TouchableOpacity 
                        style={[styles.friendRequestButton, { backgroundColor: 'rgba(255, 255, 255, 0.3)', borderColor: '#FFFFFF' }]} 
                        onPress={handleAddFriend}
                        disabled={friendLoading}
                      >
                        <Ionicons name="close-outline" size={20} color="#fff" />
                        <Text style={[styles.friendRequestButtonText, { color: '#fff' }]}>
                          {friendLoading ? '–ó–∞–≥—Ä—É–∑–∫–∞...' : '–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å'}
                        </Text>
                      </TouchableOpacity>
                    </View>
                  </>
                ) : (
                  // –ù–µ—Ç –¥—Ä—É–∂–±—ã - –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å
                  <>
                    <View style={styles.friendRequestHeader}>
                      <Ionicons name="person-add-outline" size={24} color="#FF4444" />
                      <Text style={[styles.friendRequestTitle, { color: '#FF4444' }]}>–î–æ–±–∞–≤–∏—Ç—å –≤ –¥—Ä—É–∑—å—è</Text>
                    </View>
                    <Text style={styles.friendRequestMessage}>
                      –•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å {player.name} –≤ –¥—Ä—É–∑—å—è?
                    </Text>
                    <View style={styles.friendRequestButtons}>
                      <TouchableOpacity 
                        style={[styles.friendRequestButton, { backgroundColor: 'rgba(255, 68, 68, 0.3)', borderColor: '#FF4444' }]} 
                        onPress={handleAddFriend}
                        disabled={friendLoading}
                      >
                        <Ionicons name="person-add-outline" size={20} color="#fff" />
                        <Text style={styles.friendRequestButtonText}>
                          {friendLoading ? '–ó–∞–≥—Ä—É–∑–∫–∞...' : '–î–æ–±–∞–≤–∏—Ç—å –≤ –¥—Ä—É–∑—å—è'}
                        </Text>
                      </TouchableOpacity>
                    </View>
                  </>
                )}
              </View>
            )}

            {/* –ö–Ω–æ–ø–∫–∞ –æ—Ç–ª–∞–¥–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ */}
            {currentUser && currentUser.status === 'admin' && (
              <View style={styles.section}>
                <TouchableOpacity 
                  style={[styles.friendRequestButton, { backgroundColor: 'rgba(0, 0, 255, 0.3)', borderColor: '#0000FF' }]} 
                  onPress={handleDebugFriendRequests}
                >
                  <Ionicons name="bug-outline" size={20} color="#fff" />
                  <Text style={styles.friendRequestButtonText}>
                    –û—Ç–ª–∞–¥–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –¥—Ä—É–∂–±—ã
                  </Text>
                </TouchableOpacity>
                
                <TouchableOpacity 
                  style={[styles.friendRequestButton, { backgroundColor: 'rgba(255, 0, 0, 0.3)', borderColor: '#FF0000', marginTop: 10 }]} 
                  onPress={handleClearAllFriendRequests}
                >
                  <Ionicons name="trash-outline" size={20} color="#fff" />
                  <Text style={styles.friendRequestButtonText}>
                    –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã –¥—Ä—É–∂–±—ã
                  </Text>
                </TouchableOpacity>

                <TouchableOpacity 
                  style={[styles.friendRequestButton, { backgroundColor: 'rgba(0, 255, 0, 0.3)', borderColor: '#00FF00', marginTop: 10 }]} 
                  onPress={handleTestNotification}
                >
                  <Ionicons name="notifications-outline" size={20} color="#fff" />
                  <Text style={styles.friendRequestButtonText}>
                    –¢–µ—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                  </Text>
                </TouchableOpacity>

                <TouchableOpacity 
                  style={[styles.friendRequestButton, { backgroundColor: 'rgba(255, 165, 0, 0.3)', borderColor: '#FFA500', marginTop: 10 }]} 
                  onPress={handleViewAllNotifications}
                >
                  <Ionicons name="eye-outline" size={20} color="#fff" />
                  <Text style={styles.friendRequestButtonText}>
                    –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
                  </Text>
                </TouchableOpacity>

                <TouchableOpacity 
                  style={[styles.friendRequestButton, { backgroundColor: 'rgba(128, 0, 128, 0.3)', borderColor: '#800080', marginTop: 10 }]} 
                  onPress={handleSendFriendRequestFromPlayer}
                >
                  <Ionicons name="person-add-outline" size={20} color="#fff" />
                  <Text style={styles.friendRequestButtonText}>
                    –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –æ—Ç –∏–≥—Ä–æ–∫–∞
                  </Text>
                </TouchableOpacity>

                <TouchableOpacity 
                  style={[styles.friendRequestButton, { backgroundColor: 'rgba(0, 128, 128, 0.3)', borderColor: '#008080', marginTop: 10 }]} 
                  onPress={handleTestMessage}
                >
                  <Ionicons name="chatbubble-outline" size={20} color="#fff" />
                  <Text style={styles.friendRequestButtonText}>
                    –¢–µ—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
                  </Text>
                </TouchableOpacity>

                <TouchableOpacity 
                  style={[styles.friendRequestButton, { backgroundColor: 'rgba(128, 128, 0, 0.3)', borderColor: '#808000', marginTop: 10 }]} 
                  onPress={handleViewAllMessages}
                >
                  <Ionicons name="eye-outline" size={20} color="#fff" />
                  <Text style={styles.friendRequestButtonText}>
                    –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
                  </Text>
                </TouchableOpacity>

                <TouchableOpacity 
                  style={[styles.friendRequestButton, { backgroundColor: 'rgba(75, 0, 130, 0.3)', borderColor: '#4B0082', marginTop: 10 }]} 
                  onPress={handleRefreshCounters}
                >
                  <Ionicons name="refresh-outline" size={20} color="#fff" />
                  <Text style={styles.friendRequestButtonText}>
                    –û–±–Ω–æ–≤–∏—Ç—å —Å—á–µ—Ç—á–∏–∫–∏
                  </Text>
                </TouchableOpacity>
              </View>
            )}

            {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - —Ç–æ–ª—å–∫–æ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ —Å –¥–∞–Ω–Ω—ã–º–∏ */}
            {player && player.status !== 'star' && (() => {
              const goalsNum = parseInt(player.goals || '0') || 0;
              const assistsNum = parseInt(player.assists || '0') || 0;
              const gamesNum = parseInt(player.games || '0') || 0;
              const pointsNum = goalsNum + assistsNum;
              
              // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –Ω–µ–Ω—É–ª–µ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
              const hasStats = pointsNum > 0 || goalsNum > 0 || assistsNum > 0 || gamesNum > 0;
              
              return hasStats ? (
                <View style={styles.section}>
                  <Text style={styles.sectionTitle}>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</Text>
                  <View style={styles.statsGrid}>
                    {pointsNum > 0 && (
                      <View style={styles.statItem}>
                        <Text style={styles.statValue}>{pointsNum.toString()}</Text>
                        <Text style={styles.statLabel}>–û—á–∫–æ–≤</Text>
                      </View>
                    )}
                    <View style={styles.statItem}>
                      <Text style={styles.statValue}>{friends.length}</Text>
                      <Text style={styles.statLabel}>–î—Ä—É–∑–µ–π</Text>
                    </View>
                    {goalsNum > 0 && (
                      <View style={styles.statItem}>
                        <Text style={styles.statValue}>{goalsNum.toString()}</Text>
                        <Text style={styles.statLabel}>–ì–æ–ª–æ–≤</Text>
                      </View>
                    )}
                    {gamesNum > 0 && (
                      <View style={styles.statItem}>
                        <Text style={styles.statValue}>{gamesNum.toString()}</Text>
                        <Text style={styles.statLabel}>–ò–≥—Ä</Text>
                      </View>
                    )}
                  </View>
                </View>
              ) : null;
            })()}

            {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–∞–Ω–¥–µ –¥–ª—è –∑–≤–µ–∑–¥ */}
            {player.status === 'star' && (
              <View style={styles.section}>
                <Text style={styles.sectionTitle}>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–∞–Ω–¥–µ</Text>
                <View style={styles.infoGrid}>
                  <View style={styles.infoItem}>
                    <Text style={styles.infoLabel}>–ö–æ–º–∞–Ω–¥–∞</Text>
                    <Text style={styles.infoValue}>{player.team || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}</Text>
                  </View>
                  <View style={styles.infoItem}>
                    <Text style={styles.infoLabel}>–î—Ä—É–∑–µ–π</Text>
                    <Text style={styles.infoValue}>{friends.length}</Text>
                  </View>
                  <View style={styles.infoItem}>
                    <Text style={styles.infoLabel}>–°—Ç—Ä–∞–Ω–∞</Text>
                    <Text style={styles.infoValue}>{player.country}</Text>
                  </View>
                  <View style={styles.infoItem}>
                    <Text style={styles.infoLabel}>–ü–æ–∑–∏—Ü–∏—è</Text>
                    <Text style={styles.infoValue}>{player.position || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}</Text>
                  </View>
                  {player.grip && (
                    <View style={styles.infoItem}>
                      <Text style={styles.infoLabel}>–•–≤–∞—Ç</Text>
                      <Text style={styles.infoValue}>{player.grip}</Text>
                    </View>
                  )}
                </View>
              </View>
            )}


            {/* –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
            <View style={styles.section}>
              <Text style={styles.sectionTitle}>–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</Text>
              <View style={styles.infoGrid}>
                {player.country && (
                  <View style={styles.infoItem}>
                    <Text style={styles.infoLabel}>–°—Ç—Ä–∞–Ω–∞</Text>
                    <Text style={styles.infoValue}>{player.country}</Text>
                  </View>
                )}
                {player.position && (
                  <View style={styles.infoItem}>
                    <Text style={styles.infoLabel}>–ü–æ–∑–∏—Ü–∏—è</Text>
                    <Text style={styles.infoValue}>{player.position}</Text>
                  </View>
                )}
                {player.birthDate && (
                  <View style={styles.infoItem}>
                    <Text style={styles.infoLabel}>–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è</Text>
                    <Text style={styles.infoValue}>{player.birthDate}</Text>
                  </View>
                )}
                {player.grip && (
                  <View style={styles.infoItem}>
                    <Text style={styles.infoLabel}>–•–≤–∞—Ç</Text>
                    <Text style={styles.infoValue}>{player.grip}</Text>
                  </View>
                )}
              </View>
            </View>

            {/* –§–∏–∑–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ - —Ç–æ–ª—å–∫–æ –¥–ª—è –∏–≥—Ä–æ–∫–æ–≤ */}
            {player.status === 'player' && (player.height || player.weight) && (
              <View style={styles.section}>
                <Text style={styles.sectionTitle}>–§–∏–∑–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ</Text>
                <View style={styles.infoGrid}>
                  {player.height && (
                    <View style={styles.infoItem}>
                      <Text style={styles.infoLabel}>–†–æ—Å—Ç</Text>
                      <Text style={styles.infoValue}>{player.height} —Å–º</Text>
                    </View>
                  )}
                  {player.weight && (
                    <View style={styles.infoItem}>
                      <Text style={styles.infoLabel}>–í–µ—Å</Text>
                      <Text style={styles.infoValue}>{player.weight} –∫–≥</Text>
                    </View>
                  )}
                </View>
              </View>
            )}

            {/* –í–∏–¥–µ–æ –º–æ–º–µ–Ω—Ç–æ–≤ */}
            {player.favoriteGoals && (
              <View style={styles.section}>
                <Text style={styles.sectionTitle}>–í–∏–¥–µ–æ –º–æ–º–µ–Ω—Ç–æ–≤</Text>
                <VideoCarousel
                  videos={player.favoriteGoals.split('\n').filter(goal => goal.trim()).map(goal => parseVideoUrl(goal.trim()))}
                  onVideoPress={(video) => setSelectedVideo(video)}
                />
              </View>
            )}

            {/* –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ù–ï –∑–≤–µ–∑–¥–∞–º –∏ –ù–ï –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º */}
            {player && player.status && player.status.trim() !== 'star' && player.status.trim() !== 'admin' ? (
              (currentUser && currentUser.id === player.id) || 
              friendshipStatus === 'friends' || 
              currentUser?.status === 'coach' || 
              currentUser?.status === 'scout' ||
              currentUser?.status === 'admin' ? (
                <PhotosSection photos={player.photos} />
              ) : (
                <View style={styles.section}>
                  <Text style={styles.sectionTitle}>–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏</Text>
                  <View style={styles.lockedSectionContainer}>
                    <Ionicons name="lock-closed" size={48} color="#FF4444" />
                    <Text style={styles.lockedSectionTitle}>–î–æ–±–∞–≤—å—Ç–µ –≤ –¥—Ä—É–∑—å—è</Text>
                    <Text style={styles.lockedSectionText}>
                      –î–æ–±–∞–≤—å—Ç–µ {player.name} –≤ –¥—Ä—É–∑—å—è, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
                    </Text>
                  </View>
                </View>
              )
            ) : null}

            {/* –ù–æ—Ä–º–∞—Ç–∏–≤—ã - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –∏ –ù–ï –∑–≤–µ–∑–¥–∞–º –∏ –ù–ï –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º */}
            {player && player.status && player.status.trim() !== 'star' && player.status.trim() !== 'admin' ? (
              (currentUser && currentUser.id === player.id) || 
              friendshipStatus === 'friends' || 
              currentUser?.status === 'coach' || 
              currentUser?.status === 'scout' ||
              currentUser?.status === 'admin' ? (
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–æ—Ä–º–∞—Ç–∏–≤–æ–≤
                (player.pullUps && player.pullUps !== '0') ||
                (player.pushUps && player.pushUps !== '0') ||
                (player.plankTime && player.plankTime !== '0') ||
                (player.sprint100m && player.sprint100m !== '0') ||
                (player.longJump && player.longJump !== '0') ? (
                  <NormativesSection
                    pullUps={player.pullUps}
                    pushUps={player.pushUps}
                    plankTime={player.plankTime}
                    sprint100m={player.sprint100m}
                    longJump={player.longJump}
                  />
                ) : null // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–µ–∫—Ü–∏—é, –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç
              ) : (
                <View style={styles.section}>
                  <Text style={styles.sectionTitle}>–ù–æ—Ä–º–∞—Ç–∏–≤—ã</Text>
                  <View style={styles.lockedSectionContainer}>
                    <Ionicons name="lock-closed" size={48} color="#FF4444" />
                    <Text style={styles.lockedSectionTitle}>–î–æ–±–∞–≤—å—Ç–µ –≤ –¥—Ä—É–∑—å—è</Text>
                    <Text style={styles.lockedSectionText}>
                      –î–æ–±–∞–≤—å—Ç–µ {player.name} –≤ –¥—Ä—É–∑—å—è, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –Ω–æ—Ä–º–∞—Ç–∏–≤—ã
                    </Text>
                  </View>
                </View>
              )
            ) : null}





            {/* –î—Ä—É–∑—å—è */}
            <View style={styles.section}>
              <Text style={styles.sectionTitle}>–î—Ä—É–∑—å—è</Text>
              {friends.length > 0 ? (
                <View style={styles.friendsGrid}>
                  {friends.map((friend) => (
                    <TouchableOpacity
                      key={friend.id}
                      style={styles.friendItem}
                      onPress={() => router.push(`/player/${friend.id}`)}
                    >
                      <Image 
                        source={{ uri: friend.avatar || 'https://via.placeholder.com/60/333/fff?text=Player' }} 
                        style={styles.friendAvatar}
                      />
                      <Text style={styles.friendName} numberOfLines={2}>
                        {friend.name?.toUpperCase()}
                      </Text>
                      {friend.team && (
                        <Text style={styles.friendTeam} numberOfLines={1}>
                          {friend.team}
                        </Text>
                      )}
                    </TouchableOpacity>
                  ))}
                </View>
              ) : (
                <View style={styles.friendsContainer}>
                  <Text style={styles.noDataText}>–£ {player.name} –ø–æ–∫–∞ –Ω–µ—Ç –¥—Ä—É–∑–µ–π</Text>
                  <Text style={styles.noDataSubtext}>
                    –ë—É–¥—å—Ç–µ –ø–µ—Ä–≤—ã–º, –∫—Ç–æ –¥–æ–±–∞–≤–∏—Ç {player.name} –≤ –¥—Ä—É–∑—å—è
                  </Text>
                </View>
              )}
            </View>

            {/* –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π */}
            <View style={styles.actionsSection}>
              {currentUser && currentUser.id === player.id ? (
                // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–º–æ—Ç—Ä–∏—Ç —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                <TouchableOpacity 
                  style={styles.actionButton} 
                  onPress={() => router.push({ pathname: '/profile', params: { edit: 'true' } })}
                >
                  <Ionicons name="create-outline" size={20} color="#fff" />
                  <Text style={styles.actionButtonText}>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å</Text>
                </TouchableOpacity>
              ) : currentUser ? (
                // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∏ —Å–º–æ—Ç—Ä–∏—Ç —á—É–∂–æ–π –ø—Ä–æ—Ñ–∏–ª—å - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
                <>
                  {/* –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ */}
                  {currentUser.status === 'admin' && (
                    <TouchableOpacity 
                      style={[styles.actionButton, styles.deleteButton]} 
                      onPress={handleDeletePlayer}
                    >
                      <Ionicons name="trash-outline" size={20} color="#fff" />
                      <Text style={styles.actionButtonText}>–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</Text>
                    </TouchableOpacity>
                  )}
                  
                  {player.status === 'star' ? (
                    // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∑–≤–µ–∑–¥
                    <>
                      <TouchableOpacity 
                        style={[styles.actionButton, styles.starButton]} 
                        onPress={handleRequestAutograph}
                      >
                        <Ionicons name="create-outline" size={20} color="#000" />
                        <Text style={styles.starButtonText}>–ü–æ–ø—Ä–æ—Å–∏—Ç—å –∞–≤—Ç–æ–≥—Ä–∞—Ñ</Text>
                      </TouchableOpacity>
                      
                      <TouchableOpacity 
                        style={[styles.actionButton, styles.starButton]} 
                        onPress={handleRequestStick}
                      >
                        <Ionicons name="key-outline" size={20} color="#000" />
                        <Text style={styles.starButtonText}>–ü–æ–ø—Ä–æ—Å–∏—Ç—å –∫–ª—é—à–∫—É</Text>
                      </TouchableOpacity>
                    </>
                  ) : (
                    // –û–±—ã—á–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤
                    <>
                      <TouchableOpacity 
                        style={styles.actionButton} 
                        onPress={handleSendMessage}
                      >
                        <Ionicons name="chatbubble-outline" size={20} color="#fff" />
                        <Text style={styles.actionButtonText}>–ù–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ</Text>
                      </TouchableOpacity>
                    </>
                  )}
                </>
              ) : (
                // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –≤—Ö–æ–¥–∞
                <TouchableOpacity 
                  style={styles.actionButton} 
                  onPress={() => router.push('/login')}
                >
                  <Ionicons name="log-in-outline" size={20} color="#fff" />
                  <Text style={styles.actionButtonText}>–í–æ–π—Ç–∏ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è</Text>
                </TouchableOpacity>
              )}
            </View>

          </ScrollView>
        </View>
      </ImageBackground>
      
      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –≤–∏–¥–µ–æ */}
      <Modal
        visible={selectedVideo !== null}
        transparent={true}
        animationType="fade"
        onRequestClose={() => setSelectedVideo(null)}
      >
        <View style={styles.videoModalOverlay}>
          <View style={styles.videoModalContainer}>
            <TouchableOpacity
              style={styles.videoModalCloseButton}
              onPress={() => setSelectedVideo(null)}
            >
              <Ionicons name="close" size={24} color="#fff" />
            </TouchableOpacity>
            {selectedVideo && (
              <YouTubeVideo 
                url={selectedVideo.url}
                title="–ú–æ–π –º–æ–º–µ–Ω—Ç"
                timeCode={selectedVideo.timeCode}
                onClose={() => setSelectedVideo(null)}
              />
            )}
          </View>
        </View>
      </Modal>

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π */}
      <CustomAlert
        visible={alert.visible}
        title={alert.title}
        message={alert.message}
        type={alert.type}
        onConfirm={() => {
          setAlert({ ...alert, visible: false });
          if (alert.onConfirm) alert.onConfirm();
        }}
        onCancel={() => setAlert({ ...alert, visible: false })}
        confirmText={alert.confirmText}
        cancelText={alert.cancelText}
        showCancel={alert.showCancel}
      />
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#000',
  },
  background: {
    flex: 1,
    backgroundColor: '#000',
  },
  overlay: {
    flex: 1,
    backgroundColor: 'rgba(0, 0, 0, 0.7)',
  },
  scrollContainer: {
    flexGrow: 1,
    paddingTop: 0,
    paddingHorizontal: 20,
    paddingBottom: 20,
  },
  loadingContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
  loadingText: {
    color: '#fff',
    fontSize: 18,
    fontFamily: 'Gilroy-Regular',
  },
  errorContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
  errorText: {
    color: '#fff',
    fontSize: 18,
    fontFamily: 'Gilroy-Regular',
  },
  profileSection: {
    alignItems: 'center',
    marginBottom: 30,
    marginTop: 20,
  },
  profileImage: {
    width: 120,
    height: 120,
    borderRadius: 60,
    borderWidth: 3,
    borderColor: '#FF4444',
    marginBottom: 15,
  },
  avatarPlaceholder: {
    backgroundColor: '#2C3E50',
    justifyContent: 'center',
    alignItems: 'center',
  },
  nameRow: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: 5,
  },
  playerName: {
    fontSize: 28,
    fontFamily: 'Gilroy-Bold',
    color: '#fff',
    marginRight: 10,
  },
  numberBadge: {
    backgroundColor: '#FF4444',
    borderRadius: 19.5, // –£–≤–µ–ª–∏—á–∏–ª–∏ –Ω–∞ 30% —Å 15
    paddingHorizontal: 10.4, // –£–≤–µ–ª–∏—á–∏–ª–∏ –Ω–∞ 30% —Å 8
    paddingVertical: 2.6, // –£–≤–µ–ª–∏—á–∏–ª–∏ –Ω–∞ 30% —Å 2
  },
  numberText: {
    fontSize: 18.2, // –£–≤–µ–ª–∏—á–∏–ª–∏ –Ω–∞ 30% —Å 14
    fontFamily: 'Gilroy-Bold',
    color: '#fff',
  },
  statusContainer: {
    paddingHorizontal: 8,
    paddingVertical: 4,
    marginBottom: 5,
    alignSelf: 'center',
  },
  playerStatus: {
    fontSize: 20,
    fontFamily: 'Gilroy-Bold',
    color: '#FF4444',
    fontWeight: 'bold',
  },
  playerTeam: {
    fontSize: 18,
    fontFamily: 'Gilroy-Regular',
    color: '#fff',
  },
  hockeyExperience: {
    fontSize: 16,
    fontFamily: 'Gilroy-Regular',
    color: '#FF4444',
    marginTop: 4,
  },
  actionsSection: {
    gap: 15,
    marginTop: 20,
  },
  actionButton: {
    backgroundColor: '#FF4444',
    borderRadius: 12,
    padding: 15,
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
  },
  addFriendButton: {
    backgroundColor: 'rgba(255, 68, 68, 0.2)',
    borderWidth: 1,
    borderColor: '#FF4444',
  },
  removeFriendButton: {
    backgroundColor: 'rgba(255, 0, 0, 0.3)',
    borderWidth: 1,
    borderColor: '#FF0000',
  },
  cancelRequestButton: {
    backgroundColor: 'rgba(255, 0, 0, 0.3)',
    borderWidth: 1,
    borderColor: '#FF0000',
  },
  acceptRequestButton: {
    backgroundColor: '#FF4444',
    borderWidth: 1,
    borderColor: '#FF4444',
  },
  declineRequestButton: {
    backgroundColor: '#FFFFFF',
    borderWidth: 1,
    borderColor: '#FFFFFF',
  },

  actionButtonText: {
    fontSize: 14,
    fontFamily: 'Gilroy-Bold',
    color: '#fff',
    marginLeft: 8,
  },
  starButtonText: {
    fontSize: 14,
    fontFamily: 'Gilroy-Bold',
    color: '#000', // –ß–µ—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –∫–Ω–æ–ø–æ–∫ –∑–≤–µ–∑–¥
    marginLeft: 8,
  },
  section: {
    backgroundColor: 'rgba(0, 0, 0, 0.9)',
    borderRadius: 15,
    padding: 20,
    marginBottom: 20,
    borderWidth: 1,
    borderColor: 'rgba(255, 255, 255, 0.1)',
    shadowColor: '#000',
    shadowOffset: {
      width: 0,
      height: 2,
    },
    shadowOpacity: 0.25,
    shadowRadius: 3.84,
    elevation: 5,
  },
  sectionTitle: {
    fontSize: 20,
    fontFamily: 'Gilroy-Bold',
    color: '#FF4444',
    marginBottom: 15,
  },
  statsGrid: {
    flexDirection: 'row',
    justifyContent: 'space-around',
  },
  statItem: {
    alignItems: 'center',
  },
  statValue: {
    fontSize: 24,
    fontFamily: 'Gilroy-Bold',
    color: '#fff',
  },
  statLabel: {
    fontSize: 12,
    fontFamily: 'Gilroy-Regular',
    color: '#fff',
    marginTop: 5,
  },
  infoGrid: {
    flexDirection: 'row',
    flexWrap: 'wrap',
    gap: 15,
  },
  infoItem: {
    flex: 1,
    minWidth: '45%',
  },
  infoLabel: {
    fontSize: 14,
    fontFamily: 'Gilroy-Regular',
    color: '#fff',
    marginBottom: 5,
  },
  infoValue: {
    fontSize: 16,
    fontFamily: 'Gilroy-Bold',
    color: '#fff',
  },
  goalsContainer: {
    gap: 10,
  },
  goalLink: {
    flexDirection: 'row',
    alignItems: 'center',
    padding: 10,
    backgroundColor: 'rgba(255, 255, 255, 0.03)',
    borderRadius: 8,
    borderWidth: 1,
    borderColor: 'rgba(255, 255, 255, 0.05)',
  },
  goalLinkText: {
    fontSize: 14,
    fontFamily: 'Gilroy-Regular',
    color: '#fff',
    marginLeft: 10,
    flex: 1,
  },
  friendsGrid: {
    flexDirection: 'row',
    flexWrap: 'wrap',
    gap: 15,
  },
  friendItem: {
    width: '30%',
    alignItems: 'center',
    backgroundColor: 'rgba(255, 255, 255, 0.03)',
    borderRadius: 12,
    padding: 10,
    borderWidth: 1,
    borderColor: 'rgba(255, 255, 255, 0.05)',
  },
  friendAvatar: {
    width: 50,
    height: 50,
    borderRadius: 25,
    marginBottom: 8,
  },
  friendName: {
    fontSize: 12,
    fontFamily: 'Gilroy-Bold',
    color: '#fff',
    textAlign: 'center',
    marginBottom: 2,
  },
  friendTeam: {
    fontSize: 10,
    fontFamily: 'Gilroy-Regular',
    color: '#fff',
    textAlign: 'center',
  },
  friendsContainer: {
    alignItems: 'center',
    padding: 20,
  },
  // –°—Ç–∏–ª–∏ –¥–ª—è —Å–µ–∫—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ –¥—Ä—É–∂–±—ã
  friendRequestSection: {
    backgroundColor: 'rgba(0, 0, 0, 0.8)',
    borderRadius: 15,
    padding: 20,
    marginBottom: 20,
    borderWidth: 1,
    borderColor: '#FF4444',
    shadowColor: '#000',
    shadowOffset: {
      width: 0,
      height: 2,
    },
    shadowOpacity: 0.25,
    shadowRadius: 3.84,
    elevation: 5,
  },
  friendRequestHeader: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: 10,
  },
  friendRequestTitle: {
    fontSize: 18,
    fontFamily: 'Gilroy-Bold',
    color: '#FFD700',
    marginLeft: 10,
  },
  friendRequestMessage: {
    fontSize: 14,
    fontFamily: 'Gilroy-Regular',
    color: '#fff',
    marginBottom: 15,
    textAlign: 'center',
  },
  friendRequestButtons: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    gap: 15,
  },
  friendRequestButton: {
    flex: 1,
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    paddingVertical: 12,
    paddingHorizontal: 20,
    borderRadius: 25,
    borderWidth: 2,
    shadowColor: '#000',
    shadowOffset: {
      width: 0,
      height: 2,
    },
    shadowOpacity: 0.25,
    shadowRadius: 3.84,
    elevation: 5,
  },
  friendRequestButtonText: {
    fontSize: 14,
    fontFamily: 'Gilroy-Bold',
    color: '#fff',
    marginLeft: 8,
  },
  noDataText: {
    fontSize: 16,
    fontFamily: 'Gilroy-Regular',
    color: '#888',
    textAlign: 'center',
  },
  noDataSubtext: {
    fontSize: 14,
    fontFamily: 'Gilroy-Regular',
    color: '#666',
    textAlign: 'center',
    marginTop: 5,
  },
  starButton: {
    backgroundColor: '#DAA520', // –¢–µ–º–Ω–µ–µ –∑–æ–ª–æ—Ç–æ–π
    borderColor: '#B8860B', // –¢–µ–º–Ω–µ–µ –æ—Ä–∞–Ω–∂–µ–≤—ã–π
  },
  videoModalOverlay: {
    flex: 1,
    backgroundColor: 'rgba(0, 0, 0, 0.9)',
    justifyContent: 'center',
    alignItems: 'center',
  },
  videoModalContainer: {
    width: '90%',
    height: '80%',
    borderRadius: 12,
    overflow: 'hidden',
  },
  videoModalCloseButton: {
    position: 'absolute',
    top: 20,
    right: 20,
    zIndex: 1,
  },
  lockedSectionContainer: {
    alignItems: 'center',
    padding: 30,
    backgroundColor: 'rgba(0, 0, 0, 0.8)',
    borderRadius: 12,
    borderWidth: 1,
    borderColor: 'rgba(255, 68, 68, 0.3)',
  },
  lockedSectionTitle: {
    fontSize: 18,
    fontFamily: 'Gilroy-Bold',
    color: '#FF4444',
    marginTop: 15,
    marginBottom: 8,
  },
  lockedSectionText: {
    fontSize: 14,
    fontFamily: 'Gilroy-Regular',
    color: '#ccc',
    textAlign: 'center',
    lineHeight: 20,
  },
  editButton: {
    marginLeft: 10,
  },
  deleteButton: {
    backgroundColor: '#FF4444', // –ö—Ä–∞—Å–Ω—ã–π —Ü–≤–µ—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    borderColor: '#CC0000',
  },

}); 