import { Ionicons } from '@expo/vector-icons';
import AsyncStorage from '@react-native-async-storage/async-storage';
import DateTimePicker from '@react-native-community/datetimepicker';
import { useFocusEffect, useLocalSearchParams, useRouter } from 'expo-router';
import { useCallback, useEffect, useState } from 'react';
import {
    Alert,
    Image,
    ImageBackground,
    Linking,
    Modal,
    Platform,
    ScrollView,
    StyleSheet,
    Text,
    TextInput,
    TouchableOpacity,
    View
} from 'react-native';
import Animated from 'react-native-reanimated';
import AchievementsSection from '../../components/AchievementsSection';
import CurrentTeamsSection from '../../components/CurrentTeamsSection';
import CustomAlert from '../../components/CustomAlert';
import EditablePhotosSection from '../../components/EditablePhotosSection';



import ItemRequestButtons from '../../components/ItemRequestButtons';
import NormativesSection from '../../components/NormativesSection';
import PastTeamsSection from '../../components/PastTeamsSection';
import PlayerMuseum from '../../components/PlayerMuseum';
import StarItemManager from '../../components/StarItemManager';
import VideoCarousel from '../../components/VideoCarousel';
import YouTubeVideo from '../../components/YouTubeVideo';
import { acceptFriendRequest, Achievement, calculateHockeyExperience, cancelFriendRequest, clearAllFriendRequests, createFriendRequestNotification, debugFriendRequests, declineFriendRequest, getFriends, getFriendshipStatus, getPlayerById, loadCurrentUser, PastTeam, Player, removeFriend, sendFriendRequest, updatePlayer } from '../../utils/playerStorage';
import { supabase } from '../../utils/supabase';

const iceBg = require('../../assets/images/led.jpg');

export default function PlayerProfile() {
  const { id } = useLocalSearchParams();
  const router = useRouter();
  const [player, setPlayer] = useState<Player | null>(null);
  const [currentUser, setCurrentUser] = useState<Player | null>(null);
  const [loading, setLoading] = useState(true);
  const [friendshipStatus, setFriendshipStatus] = useState<'friends' | 'sent_request' | 'received_request' | 'none' | 'pending'>('none');
  const [friendLoading, setFriendLoading] = useState(false);
  const [friends, setFriends] = useState<Player[]>([]);
  const [selectedVideo, setSelectedVideo] = useState<{ url: string; timeCode?: string } | null>(null);
  const [alert, setAlert] = useState({
    visible: false,
    title: '',
    message: '',
    type: 'info' as 'success' | 'error' | 'warning' | 'info',
    onConfirm: () => {},
    onCancel: () => {},
    onSecondary: () => {},
    showCancel: false,
    showSecondary: false,
    confirmText: 'OK',
    cancelText: '–û—Ç–º–µ–Ω–∞',
    secondaryText: '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ'
  });
  const [showAlert, setShowAlert] = useState(false);
  const [alertMessage, setAlertMessage] = useState('');
  const [alertType, setAlertType] = useState<'success' | 'error' | 'info'>('info');
  const [isEditing, setIsEditing] = useState(false);
  const [editData, setEditData] = useState<Partial<Player>>({});
  const [showCountryPicker, setShowCountryPicker] = useState(false);
  const [showPositionPicker, setShowPositionPicker] = useState(false);
  const [showGripPicker, setShowGripPicker] = useState(false);
  const [showBirthDatePicker, setShowBirthDatePicker] = useState(false);
  const [selectedBirthDate, setSelectedBirthDate] = useState(new Date());
  const [videoFields, setVideoFields] = useState<Array<{url: string, timeCode: string}>>([{ url: '', timeCode: '' }]);
  const [galleryPhotos, setGalleryPhotos] = useState<string[]>([]);
  const [playerTeams, setPlayerTeams] = useState<PastTeam[]>([]);
  const [achievements, setAchievements] = useState<Achievement[]>([]);
  const [pastTeams, setPastTeams] = useState<PastTeam[]>([]);
  
  // –ú–∞—Å—Å–∏–≤—ã –¥–ª—è —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤
  const countries = ['–ë–µ–ª–∞—Ä—É—Å—å', '–†–æ—Å—Å–∏—è', '–ö–∞–Ω–∞–¥–∞', '–°–®–ê', '–§–∏–Ω–ª—è–Ω–¥–∏—è', '–®–≤–µ—Ü–∏—è', '–õ–∏—Ç–≤–∞', '–õ–∞—Ç–≤–∏—è', '–ü–æ–ª—å—à–∞'];
  const positions = ['–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –Ω–∞–ø–∞–¥–∞—é—â–∏–π', '–ö—Ä–∞–π–Ω–∏–π –Ω–∞–ø–∞–¥–∞—é—â–∏–π', '–ó–∞—â–∏—Ç–Ω–∏–∫', '–í—Ä–∞—Ç–∞—Ä—å'];
  const grips = ['–õ–µ–≤—ã–π', '–ü—Ä–∞–≤—ã–π'];



  useEffect(() => {
    loadPlayerData();
  }, [id]);

  // –î–æ–±–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏ —Ñ–æ–∫—É—Å–µ —ç–∫—Ä–∞–Ω–∞
  useFocusEffect(
    useCallback(() => {
      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑—ã
      setTimeout(() => {
      loadPlayerData();
      }, 100);
    }, [id])
  );

  const loadPlayerData = async () => {
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è
    setIsEditing(false);
    setEditData({});
    
    try {
      if (id) {
        const playerData = await getPlayerById(id as string);
        const userData = await loadCurrentUser();
        
        // –ï—Å–ª–∏ –∏–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é
        if (!playerData) {
          router.replace('/');
          return;
        }
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –∏–≥—Ä–æ–∫–∞
        if (playerData) {
          try {
            const { getPlayerTeamsAsPastTeams } = await import('../../utils/playerStorage');
            const teams = await getPlayerTeamsAsPastTeams(playerData.id);
            
            // –†–∞–∑–¥–µ–ª—è–µ–º –∫–æ–º–∞–Ω–¥—ã –Ω–∞ —Ç–µ–∫—É—â–∏–µ –∏ –ø—Ä–æ—à–ª—ã–µ
            const currentTeams = teams.filter(team => team.isCurrent);
            const pastTeams = teams.filter(team => !team.isCurrent);
            
            setPlayerTeams(currentTeams);
            setPastTeams(pastTeams);
          } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–º–∞–Ω–¥ –∏–≥—Ä–æ–∫–∞:', error);
            setPlayerTeams([]);
            setPastTeams([]);
          }
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥—Ä–æ–±–Ω—É—é –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é (–∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è production)
        if (playerData) {
          // console.log('üîç –ü–æ–¥—Ä–æ–±–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞:');
          // console.log('   –ò–º—è:', playerData.name);
          // console.log('   –ö–æ–º–∞–Ω–¥–∞:', playerData.team);
          // console.log('   –ü–æ–∑–∏—Ü–∏—è:', playerData.position);
          // console.log('   –ì–æ–ª—ã:', playerData.goals);
          // console.log('   –ü–µ—Ä–µ–¥–∞—á–∏:', playerData.assists);
          // console.log('   –†–æ—Å—Ç:', playerData.height);
          // console.log('   –í–µ—Å:', playerData.weight);
          // console.log('   –°—Ç—Ä–∞–Ω–∞:', playerData.country);
          // console.log('   –ì–æ—Ä–æ–¥:', playerData.city);
          // console.log('   –¢–µ–ª–µ—Ñ–æ–Ω:', playerData.phone);
          // console.log('   –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è:', playerData.achievements);
          
          // // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–ª–∞–¥–∫—É –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –ø–æ–ª–µ–π
          // console.log('üèí –•–æ–∫–∫–µ–π–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:');
          // console.log('   –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ —Ö–æ–∫–∫–µ—è (hockeyStartDate):', playerData.hockeyStartDate);
          // console.log('   hockeyStartDate —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:', !!playerData.hockeyStartDate);
          // console.log('   hockeyStartDate !== "":', playerData.hockeyStartDate !== '');
          // console.log('   –†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–π –æ–ø—ã—Ç:', calculateHockeyExperience(playerData.hockeyStartDate));
          
          // console.log('üìä –ù–æ—Ä–º–∞—Ç–∏–≤—ã:');
          // console.log('   –ü–æ–¥—Ç—è–≥–∏–≤–∞–Ω–∏—è (pullUps):', playerData.pullUps);
          // console.log('   –û—Ç–∂–∏–º–∞–Ω–∏—è (pushUps):', playerData.pushUps);
          // console.log('   –ü–ª–∞–Ω–∫–∞ (plankTime):', playerData.plankTime);
          // console.log('   –°–ø—Ä–∏–Ω—Ç 100–º (sprint100m):', playerData.sprint100m);
          // console.log('   –ü—Ä—ã–∂–æ–∫ –≤ –¥–ª–∏–Ω—É (longJump):', playerData.longJump);
          
          // console.log('üé• –í–∏–¥–µ–æ –º–æ–º–µ–Ω—Ç–æ–≤:');
          // console.log('   favoriteGoals:', playerData.favoriteGoals);
          // console.log('   favoriteGoals.trim():', playerData.favoriteGoals ? playerData.favoriteGoals.trim() : 'null');
          // console.log('   favoriteGoals !== "":', playerData.favoriteGoals ? playerData.favoriteGoals.trim() !== '' : false);
          // if (playerData.favoriteGoals) {
          //   const videos = playerData.favoriteGoals.split('\n').filter(goal => goal.trim());
          //   console.log('   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ:', videos.length);
          //   videos.forEach((video, i) => {
          //     console.log(`   –í–∏–¥–µ–æ ${i + 1}:`, video);
          //   });
          // }
          
          // // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
          // console.log('üîç –£—Å–ª–æ–≤–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è:');
          // console.log('   –°—Ç–∞—Ç—É—Å –∏–≥—Ä–æ–∫–∞:', playerData.status);
          // console.log('   –°—Ç–∞—Ç—É—Å –∏–≥—Ä–æ–∫–∞ === "player":', playerData.status === 'player');
          // console.log('   –ï—Å—Ç—å –≤–∏–¥–µ–æ:', playerData.favoriteGoals && playerData.favoriteGoals.trim() !== '');
          // console.log('   –ï—Å—Ç—å –Ω–æ—Ä–º–∞—Ç–∏–≤—ã:', 
          //   (playerData.pullUps && playerData.pullUps !== '0' && playerData.pullUps !== '' && playerData.pullUps !== 'null') ||
          //   (playerData.pushUps && playerData.pushUps !== '0' && playerData.pushUps !== '' && playerData.pushUps !== 'null') ||
          //   (playerData.plankTime && playerData.plankTime !== '0' && playerData.plankTime !== '' && playerData.plankTime !== 'null') ||
          //   (playerData.sprint100m && playerData.sprint100m !== '0' && playerData.sprint100m !== '' && playerData.sprint100m !== 'null') ||
          //   (playerData.longJump && playerData.longJump !== '0' && playerData.longJump !== '' && playerData.longJump !== 'null')
          // );
          // console.log('   –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –Ω–æ—Ä–º–∞—Ç–∏–≤—ã –¥–ª—è —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è:', true); // –í—Å–µ–≥–¥–∞ true –¥–ª—è —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è
          // console.log('   –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –≤–∏–¥–µ–æ –¥–ª—è —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è:', true); // –í—Å–µ–≥–¥–∞ true –¥–ª—è —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è
        }
        
        // –ú–∏–≥—Ä–∏—Ä—É–µ–º –∞–≤–∞—Ç–∞—Ä –≤ Storage, –µ—Å–ª–∏ –æ–Ω –ª–æ–∫–∞–ª—å–Ω—ã–π
        let updatedPlayerData = playerData;
        if (playerData?.avatar && (playerData.avatar.startsWith('file://') || playerData.avatar.startsWith('content://') || playerData.avatar.startsWith('data:'))) {
      
          const { uploadImageToStorage } = await import('../../utils/uploadImage');
          const migratedAvatarUrl = await uploadImageToStorage(playerData.avatar);
          if (migratedAvatarUrl) {
            updatedPlayerData = { ...playerData, avatar: migratedAvatarUrl };
            await updatePlayer(playerData.id, updatedPlayerData, userData?.id);

          }
        }
        
        setPlayer(updatedPlayerData);
        setCurrentUser(userData);
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–∏–¥–µ–æ –ø–æ–ª—è
        if (playerData?.favoriteGoals) {
          const goals = playerData.favoriteGoals.split('\n').filter(goal => goal.trim());
          const videoData = goals.map(goal => {
            const { url, timeCode } = parseVideoUrl(goal);
            return { url, timeCode: timeCode || '' };
          });
          setVideoFields(videoData.length > 0 ? videoData : [{ url: '', timeCode: '' }]);
        }
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏ –º–∏–≥—Ä–∏—Ä—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –≤ Storage
        if (updatedPlayerData?.photos && updatedPlayerData.photos.length > 0) {
          const migratedPhotos = [];
          for (const photo of updatedPlayerData.photos) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–æ—Ç–æ –ª–æ–∫–∞–ª—å–Ω—ã–º
            if (photo.startsWith('file://') || photo.startsWith('content://') || photo.startsWith('data:')) {
  
              const { uploadGalleryPhoto } = await import('../../utils/uploadImage');
              const migratedUrl = await uploadGalleryPhoto(photo);
              if (migratedUrl) {
                migratedPhotos.push(migratedUrl);
              }
            } else {
              migratedPhotos.push(photo);
            }
          }
          setGalleryPhotos(migratedPhotos);
          
          // –ï—Å–ª–∏ –±—ã–ª–∏ –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω—ã —Ñ–æ—Ç–æ, –æ–±–Ω–æ–≤–ª—è–µ–º –∏–≥—Ä–æ–∫–∞
          if (migratedPhotos.length !== updatedPlayerData.photos.length) {
            const finalUpdatedPlayer = { ...updatedPlayerData, photos: migratedPhotos };
            await updatePlayer(updatedPlayerData.id, finalUpdatedPlayer, userData?.id);
            setPlayer(finalUpdatedPlayer);
          }
        } else {
          setGalleryPhotos([]);
        }

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
        if (playerData?.achievements && Array.isArray(playerData.achievements)) {
          setAchievements(playerData.achievements);
        }


        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –¥—Ä—É–∂–±—ã, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
        if (userData && playerData) {
          // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–º–æ—Ç—Ä–∏—Ç —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å 'friends'
          if (userData.id === playerData.id) {
    
            setFriendshipStatus('friends');
          } else {
    
            const friendsStatus = await getFriendshipStatus(userData.id, playerData.id);
            
            setFriendshipStatus(friendsStatus);
          }
        }
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥—Ä—É–∑–µ–π –∏–≥—Ä–æ–∫–∞
        if (playerData) {
          const friendsList = await getFriends(playerData.id);
          setFriends(friendsList);
        }
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–∞:', error);
      // –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏—Ä—É—é—â–µ–µ—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏ —Ç–∞–∫ –ø–æ–ø–∞–¥–∞–µ—Ç –Ω–∞ –≥–ª–∞–≤–Ω—É—é
      router.replace('/');
    } finally {
      setLoading(false);
    }
  };

  const showCustomAlert = (title: string, message: string, type: 'success' | 'error' | 'warning' | 'info' = 'info', onConfirm?: () => void) => {
    setAlert({
      visible: true,
      title,
      message,
      type,
      onConfirm: onConfirm || (() => setAlert({ ...alert, visible: false })),
      onCancel: () => {},
      onSecondary: () => {},
      showCancel: false,
      showSecondary: false,
      confirmText: 'OK',
      cancelText: '–û—Ç–º–µ–Ω–∞',
      secondaryText: '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ'
    });
  };

  const showBirthDatePickerModal = () => {
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –∏–ª–∏ —Å–µ–≥–æ–¥–Ω—è—à–Ω—é—é –¥–∞—Ç—É
    if (editData.birthDate || player?.birthDate) {
      const dateStr = editData.birthDate || player?.birthDate || '';
      const parts = dateStr.split('.');
      if (parts.length === 3) {
        const day = parseInt(parts[0]);
        const month = parseInt(parts[1]) - 1; // –ú–µ—Å—è—Ü—ã –≤ JS –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å 0
        const year = parseInt(parts[2]);
        setSelectedBirthDate(new Date(year, month, day));
      } else {
        setSelectedBirthDate(new Date());
      }
    } else {
      setSelectedBirthDate(new Date());
    }
    setShowBirthDatePicker(true);
  };

  const onBirthDateChange = (event: any, date?: Date) => {
    if (Platform.OS === 'ios') {
      // –ù–∞ iOS –∫–∞–ª–µ–Ω–¥–∞—Ä—å –Ω–µ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
      if (date) {
        setSelectedBirthDate(date);
      }
    } else {
      // –ù–∞ Android –∫–∞–ª–µ–Ω–¥–∞—Ä—å –∑–∞–∫—Ä—ã–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–æ–ª–Ω–æ–º –≤—ã–±–æ—Ä–µ
      if (event.type === 'set' && date) {
        setShowBirthDatePicker(false);
        setSelectedBirthDate(date);
        const day = date.getDate().toString().padStart(2, '0');
        const month = (date.getMonth() + 1).toString().padStart(2, '0');
        const year = date.getFullYear().toString();
        const formattedDate = `${day}.${month}.${year}`;
        setEditData({...editData, birthDate: formattedDate});
      } else if (event.type === 'dismissed') {
        setShowBirthDatePicker(false);
      }
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥
  const formatBirthDate = (dateString: string): string => {
    if (!dateString) return '–ù–µ —É–∫–∞–∑–∞–Ω–∞';
    
    let day: number, month: number, year: number;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì
    if (dateString.includes('.')) {
      const parts = dateString.split('.');
      
      if (parts.length !== 3) {
        return dateString;
      }
      
      day = parseInt(parts[0]);
      month = parseInt(parts[1]);
      year = parseInt(parts[2]);
    }
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –ì–ì–ì–ì-–ú–ú-–î–î (ISO)
    else if (dateString.includes('-')) {
      const parts = dateString.split('-');
      
      if (parts.length !== 3) {
        return dateString;
      }
      
      year = parseInt(parts[0]);
      month = parseInt(parts[1]);
      day = parseInt(parts[2]);
    }
    // –ï—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω
    else {
      return dateString;
    }
    
    if (isNaN(day) || isNaN(month) || isNaN(year)) {
      return dateString;
    }
    
    const months = [
      '—è–Ω–≤–∞—Ä—è', '—Ñ–µ–≤—Ä–∞–ª—è', '–º–∞—Ä—Ç–∞', '–∞–ø—Ä–µ–ª—è', '–º–∞—è', '–∏—é–Ω—è',
      '–∏—é–ª—è', '–∞–≤–≥—É—Å—Ç–∞', '—Å–µ–Ω—Ç—è–±—Ä—è', '–æ–∫—Ç—è–±—Ä—è', '–Ω–æ—è–±—Ä—è', '–¥–µ–∫–∞–±—Ä—è'
    ];
    
    return `${day} ${months[month - 1]} ${year}`;
  };

  const handleSendMessage = () => {
    if (!currentUser) {
      showCustomAlert('–û—à–∏–±–∫–∞', '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π', 'error', () => router.push('/login'));
      return;
    }
    
    // –û—Ç–∫—Ä—ã–≤–∞–µ–º —á–∞—Ç —Å –∏–≥—Ä–æ–∫–æ–º
    router.push({ pathname: '/chat/[id]', params: { id: player!.id } });
  };

  const handleAddFriend = async () => {
    
    if (!currentUser || !player) {
      showCustomAlert('–û—à–∏–±–∫–∞', '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –¥—Ä—É–∑—å—è', 'error', () => router.push('/login'));
      return;
    }
    
    setFriendLoading(true);
    try {
      if (friendshipStatus === 'friends') {
        // –£–¥–∞–ª—è–µ–º –∏–∑ –¥—Ä—É–∑–µ–π
        const success = await removeFriend(currentUser.id, player.id);
        if (success) {
          setFriendshipStatus('none');
          showCustomAlert('–£—Å–ø–µ—à–Ω–æ', `${player.name} —É–¥–∞–ª–µ–Ω –∏–∑ –¥—Ä—É–∑–µ–π`, 'success');
        } else {
          showCustomAlert('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∏–∑ –¥—Ä—É–∑–µ–π', 'error');
        }
      } else if (friendshipStatus === 'none') {
    
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –¥—Ä—É–∂–±—ã
        const success = await sendFriendRequest(currentUser.id, player.id);

        if (success) {
          setFriendshipStatus('pending');
          showCustomAlert('–ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω', `–ó–∞–ø—Ä–æ—Å –¥—Ä—É–∂–±—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω ${player.name}`, 'success');
        } else {
          showCustomAlert('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –¥—Ä—É–∂–±—ã', 'error');
        }
      } else if (friendshipStatus === 'sent_request' || friendshipStatus === 'pending') {
        // –û—Ç–º–µ–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
        const success = await cancelFriendRequest(currentUser.id, player.id);
        if (success) {
          setFriendshipStatus('none');
          showCustomAlert('–ó–∞–ø—Ä–æ—Å –æ—Ç–º–µ–Ω–µ–Ω', '–ó–∞–ø—Ä–æ—Å –¥—Ä—É–∂–±—ã –æ—Ç–º–µ–Ω–µ–Ω', 'info');
        } else {
          showCustomAlert('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å', 'error');
        }
      } else if (friendshipStatus === 'received_request') {
        // –ü—Ä–∏–Ω–∏–º–∞–µ–º –∑–∞–ø—Ä–æ—Å
        const success = await acceptFriendRequest(currentUser.id, player.id);
        if (success) {
          setFriendshipStatus('friends');
          showCustomAlert('–î—Ä—É–∂–±–∞ –ø—Ä–∏–Ω—è—Ç–∞', `${player.name} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –¥—Ä—É–∑—å—è`, 'success');
        } else {
          showCustomAlert('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–Ω—è—Ç—å –∑–∞–ø—Ä–æ—Å', 'error');
        }
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞ –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥—Ä—É–∑–µ–π
      await loadPlayerData();
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥—Ä—É–∑—å—è–º–∏:', error);
      showCustomAlert('–û—à–∏–±–∫–∞', '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –¥—Ä—É–∑—å—è–º–∏', 'error');
    } finally {
      setFriendLoading(false);
    }
  };

  const handleDeclineFriend = async () => {
    if (!currentUser || !player) {
      showCustomAlert('–û—à–∏–±–∫–∞', '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ –ø—Ä–æ—Ñ–∏–ª—å', 'error', () => router.push('/login'));
      return;
    }
    
    setFriendLoading(true);
    try {
      const success = await declineFriendRequest(currentUser.id, player.id);
      if (success) {
        setFriendshipStatus('none');
        showCustomAlert('–ó–∞–ø—Ä–æ—Å –æ—Ç–∫–ª–æ–Ω–µ–Ω', '–ó–∞–ø—Ä–æ—Å –¥—Ä—É–∂–±—ã –æ—Ç–∫–ª–æ–Ω–µ–Ω', 'info');
      } else {
        showCustomAlert('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å', 'error');
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞ –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥—Ä—É–∑–µ–π
      await loadPlayerData();
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –¥—Ä—É–∂–±—ã:', error);
      showCustomAlert('–û—à–∏–±–∫–∞', '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞', 'error');
    } finally {
      setFriendLoading(false);
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ URL –∏ —Ç–∞–π–º–∫–æ–¥–∞
  const parseVideoUrl = (input: string): { url: string; timeCode?: string } => {
    const timeMatch = input.match(/\(–≤—Ä–µ–º—è:\s*(\d{1,2}:\d{2})\)/);
    const timeCode = timeMatch ? timeMatch[1] : undefined;
    const url = input.replace(/\s*\(–≤—Ä–µ–º—è:\s*\d{1,2}:\d{2}\)/, '').trim();
    return { url, timeCode };
  };

  const openYouTubeLink = (url: string) => {
    if (url) {
      Linking.openURL(url).catch(() => {
        Alert.alert('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Å—Å—ã–ª–∫—É');
      });
    }
  };



  const handleDebugFriendRequests = async () => {
    console.log('üîß –û—Ç–ª–∞–¥–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –¥—Ä—É–∂–±—ã...');
    await debugFriendRequests();
    showCustomAlert('–û—Ç–ª–∞–¥–∫–∞', '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–ø—Ä–æ—Å–∞—Ö –¥—Ä—É–∂–±—ã', 'info');
  };

  const handleClearAllFriendRequests = async () => {
    await clearAllFriendRequests();
    showCustomAlert('–û—á–∏—Å—Ç–∫–∞', '–í—Å–µ –∑–∞–ø—Ä–æ—Å—ã –¥—Ä—É–∂–±—ã –æ—á–∏—â–µ–Ω—ã', 'info');
    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏
    await loadPlayerData();
  };

  const handleTestNotification = async () => {
    if (!currentUser || !player) return;
    

    await createFriendRequestNotification(player.id, currentUser.id);
    showCustomAlert('–¢–µ—Å—Ç', '–¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ', 'info');
  };

  const handleViewAllNotifications = async () => {
    try {
      const notificationsData = await AsyncStorage.getItem('hockeystars_notifications');
      const allNotifications = notificationsData ? JSON.parse(notificationsData) : [];

      showCustomAlert('–û—Ç–ª–∞–¥–∫–∞', `–í—Å–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: ${allNotifications.length}`, 'info');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', error);
    }
  };

  const handleSendFriendRequestFromPlayer = async () => {
    if (!currentUser || !player) return;
    

    try {
      await sendFriendRequest(player.id, currentUser.id);
      showCustomAlert('–£—Å–ø–µ—Ö', '–ó–∞–ø—Ä–æ—Å –¥—Ä—É–∂–±—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç –∏–º–µ–Ω–∏ –∏–≥—Ä–æ–∫–∞', 'success');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –¥—Ä—É–∂–±—ã:', error);
      showCustomAlert('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –¥—Ä—É–∂–±—ã', 'error');
    }
  };

  const handleTestMessage = async () => {
    if (!currentUser || !player) return;
    
            // –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è
    try {
      const { sendMessageSimple } = await import('../../utils/playerStorage');
      const success = await sendMessageSimple(player.id, currentUser.id, '–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∏–≥—Ä–æ–∫–∞!');
      if (success) {
        showCustomAlert('–£—Å–ø–µ—Ö', '–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ', 'success');
      } else {
        showCustomAlert('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ', 'error');
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
      showCustomAlert('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ', 'error');
    }
  };

  const handleViewAllMessages = async () => {
    try {
      const messagesData = await AsyncStorage.getItem('hockeystars_messages');
      const allMessages = messagesData ? JSON.parse(messagesData) : [];
              // –í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å–∏—Å—Ç–µ–º–µ
      showCustomAlert('–û—Ç–ª–∞–¥–∫–∞', `–í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: ${allMessages.length}`, 'info');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏–π:', error);
    }
  };

  const handleRefreshCounters = async () => {
    if (!currentUser) return;
    

    try {
      const { getUnreadMessageCount } = await import('../../utils/playerStorage');
      const unreadMessagesCount = await getUnreadMessageCount(currentUser.id);
              // –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å—á–µ—Ç—á–∏–∫ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
      showCustomAlert('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ', `–ù–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: ${unreadMessagesCount}`, 'info');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–æ–≤:', error);
    }
  };

  const handleCurrentTeamChange = async (teams: PastTeam[]) => {
    try {

      setPlayerTeams(teams);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ç–µ–∫—É—â–∏—Ö –∫–æ–º–∞–Ω–¥:', error);
    }
  };

  const handleSave = async () => {
    if (!player || !currentUser) {
      console.error('‚ùå handleSave: player –∏–ª–∏ currentUser –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
      showCustomAlert('–û—à–∏–±–∫–∞', '–î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã', 'error');
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    if (currentUser.status !== 'admin' && currentUser.id !== player.id) {
      console.error('‚ùå handleSave: –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞', { currentUserStatus: currentUser.status, currentUserId: currentUser.id, playerId: player.id });
      showCustomAlert('–û—à–∏–±–∫–∞', '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —ç—Ç–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è', 'error');
      return;
    }

    try {
      // –û–±—ä–µ–¥–∏–Ω—è–µ–º –ø–æ–ª—è –≤–∏–¥–µ–æ –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É
      const goalsText = videoFields
        .filter(video => video.url.trim())
        .map(video => {
          const timeCodePart = video.timeCode.trim() ? ` (–≤—Ä–µ–º—è: ${video.timeCode})` : '';
          return video.url + timeCodePart;
        })
        .join('\n');
      
      // –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞ —Å –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏
      const updatedPlayer = { 
        ...player, 
        ...editData, 
        favoriteGoals: goalsText,
        photos: galleryPhotos,
        achievements: achievements
        // –£–±–∏—Ä–∞–µ–º pastTeams, —Ç–∞–∫ –∫–∞–∫ –∫–æ–º–∞–Ω–¥—ã —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ
      };
      
      // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
      try {
        const { syncPlayerTeams, clearOldPastTeamsData } = await import('../../utils/playerStorage');
        
        // –°–Ω–∞—á–∞–ª–∞ –æ—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥
        const clearSuccess = await clearOldPastTeamsData(player.id);
        if (!clearSuccess) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥');
          showCustomAlert('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥', 'error');
          return;
        }
        
        const teamsSyncSuccess = await syncPlayerTeams(player.id, playerTeams, pastTeams);
        
        if (!teamsSyncSuccess) {
          console.error('‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥');
          showCustomAlert('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—ã', 'error');
          return;
        }
      } catch (syncError) {
        console.error('‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥:', syncError);
        showCustomAlert('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—ã', 'error');
        return;
      }
      // –í—ã–ø–æ–ª–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–∞ –∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫—É –∫–æ–º–∞–Ω–¥ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
      const [refreshedPlayer, teams] = await Promise.all([
        updatePlayer(player.id, updatedPlayer, currentUser.id).then(() => getPlayerById(player.id)),
        import('../../utils/playerStorage').then(({ getPlayerTeamsAsPastTeams }) => getPlayerTeamsAsPastTeams(player.id))
      ]);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä–æ–∫–∞
      if (refreshedPlayer) {
      setPlayer(refreshedPlayer);
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–º–∞–Ω–¥
      if (teams) {
        const currentTeams = teams.filter(team => team.isCurrent);
        const pastTeams = teams.filter(team => !team.isCurrent);
        
        setPlayerTeams(currentTeams);
        setPastTeams(pastTeams);
      }
      
      setIsEditing(false);
      showCustomAlert('–£—Å–ø–µ—à–Ω–æ', '–î–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã', 'success');
      
    } catch (error) {
      console.error('‚ùå handleSave: –æ–±—â–∞—è –æ—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', error);
      console.error('‚ùå handleSave: –¥–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', {
        name: error.name,
        message: error.message,
        stack: error.stack
      });
      showCustomAlert('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è', 'error');
    }
  };

  const handleDeletePlayer = async () => {
    if (!currentUser || currentUser.status !== 'admin') {
      showCustomAlert('–û—à–∏–±–∫–∞', '–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç —É–¥–∞–ª—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', 'error');
      return;
    }

    if (!player) {
      showCustomAlert('–û—à–∏–±–∫–∞', '–î–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã', 'error');
      return;
    }

    // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    showCustomAlert(
      '–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
      `–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è "${player.name}"? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.`,
      'warning',
      async () => {
        try {
      
          
          // –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
          const { error } = await supabase
            .from('players')
            .delete()
            .eq('id', player.id);
          
          if (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
            showCustomAlert('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', 'error');
          } else {

            showCustomAlert(
              '–£—Å–ø–µ—à–Ω–æ', 
              `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å "${player.name}" —É–¥–∞–ª–µ–Ω`,
              'success',
              () => router.push('/')
            );
          }
        } catch (error) {
          console.error('‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è:', error);
          showCustomAlert('–û—à–∏–±–∫–∞', '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', 'error');
        }
      }
    );
  };

  const handleLogout = async () => {
    showCustomAlert(
      '–í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è',
      '–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏ –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è?',
      'warning',
      async () => {
        try {
          // –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          const { logoutUser } = await import('../../utils/playerStorage');
          await logoutUser();
          
          // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
          router.replace('/');
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ:', error);
          // –î–∞–∂–µ –µ—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –≤—Å–µ —Ä–∞–≤–Ω–æ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é
          router.replace('/');
        }
      }
    );
  };

  if (loading) {
    return (
      <View style={styles.container}>
        <ImageBackground source={iceBg} style={styles.background} resizeMode="cover">
          <View style={styles.overlay}>
            <View style={styles.loadingContainer}>
              <Text style={styles.loadingText}>–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è...</Text>
            </View>
          </View>
        </ImageBackground>
      </View>
    );
  }

  if (!player) {
    return (
      <View style={styles.container}>
        <ImageBackground source={iceBg} style={styles.background} resizeMode="cover">
          <View style={styles.overlay}>
            <View style={styles.errorContainer}>
              <Text style={styles.errorText}>–ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω</Text>
            </View>
          </View>
        </ImageBackground>
      </View>
    );
  }



  return (
    <View style={styles.container}>
      <ImageBackground source={iceBg} style={styles.background} resizeMode="cover">
        <View style={styles.overlay}>
          <ScrollView contentContainerStyle={styles.scrollContainer}>
            


            {/* –§–æ—Ç–æ –∏ –æ—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
            <View style={styles.profileSection}>
              {isEditing && (currentUser?.status === 'admin' || currentUser?.id === player.id) ? (
                <TouchableOpacity 
                  style={styles.profileImage}
                  onPress={() => {
                    showCustomAlert('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ç–æ', '–§—É–Ω–∫—Ü–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–æ—Ç–æ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–∑–∂–µ', 'info');
                  }}
                >
              {(() => {
                const imageSource = player.avatar;
                const hasValidImage = imageSource && typeof imageSource === 'string' && (
                  imageSource.startsWith('data:image/') || 
                  imageSource.startsWith('http') || 
                  imageSource.startsWith('file://') || 
                  imageSource.startsWith('content://')
                );

                if (hasValidImage) {
                  return (
                    <Image 
                      source={{ 
                        uri: imageSource,
                            cache: 'reload',
                            headers: {
                              'Cache-Control': 'no-cache'
                            }
                          }}
                          style={styles.profileImage}
                        />
                      );
                    } else {
                      return (
                        <View style={[styles.profileImage, styles.avatarPlaceholder]}>
                          <Ionicons name="person" size={48} color="#FFFFFF" />
                        </View>
                      );
                    }
                  })()}
                  <View style={[styles.editOverlay, { position: 'absolute', top: 0, left: 0, right: 0, bottom: 0, backgroundColor: 'rgba(0,0,0,0.5)', justifyContent: 'center', alignItems: 'center', borderRadius: 60 }]}>
                    <Ionicons name="camera" size={24} color="#fff" />
                  </View>
                </TouchableOpacity>
              ) : (
                (() => {
                  const imageSource = player.avatar;
                  const hasValidImage = imageSource && typeof imageSource === 'string' && (
                    imageSource.startsWith('data:image/') || 
                    imageSource.startsWith('http') || 
                    imageSource.startsWith('file://') || 
                    imageSource.startsWith('content://')
                  );

                  if (hasValidImage) {
                    return (
                      <Image 
                        source={{ 
                          uri: imageSource,
                          cache: 'reload',
                        headers: {
                          'Cache-Control': 'no-cache'
                        }
                      }}
                      style={styles.profileImage}
                      onError={(error) => {
                                console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≤–∞—Ç–∞—Ä–∞ –≤ –ø—Ä–æ—Ñ–∏–ª–µ –∏–≥—Ä–æ–∫–∞:', error);
                      }}
                      onLoad={() => {
                
                      }}
                    />
                  );
                } else {
                  return (
                    <View style={[styles.profileImage, styles.avatarPlaceholder]}>
                      <Ionicons name="person" size={48} color="#FFFFFF" />
                    </View>
                  );
                }
                })()
              )}
              <View style={styles.nameRow}>
                {isEditing ? (
                  <TextInput
                    style={[styles.editInput, { fontSize: 28, fontFamily: 'Gilroy-Bold', color: '#fff', textAlign: 'center', marginBottom: 5 }]}
                    value={editData.name || player.name || ''}
                    onChangeText={(text) => setEditData({...editData, name: text})}
                    placeholder="–ò–º—è –§–∞–º–∏–ª–∏—è"
                    placeholderTextColor="#888"
                  />
                ) : (
                <Text style={styles.playerName}>{player.name?.toUpperCase()}</Text>
                )}
                {isEditing ? (
                  <TextInput
                    style={[styles.editInput, { width: 60, marginLeft: 10 }]}
                    value={editData.number !== undefined ? editData.number : (player.number || '')}
                    onChangeText={(text) => setEditData({...editData, number: text})}
                    placeholder="#"
                    keyboardType="numeric"
                    maxLength={2}
                  />
                ) : player.number ? (
                  <View style={styles.numberBadge}>
                    <Text style={styles.numberText}>#{player.number}</Text>
                  </View>
                ) : null}
              </View>
              <View style={styles.statusContainer}>
                <Text style={styles.playerStatus}>
                  {player.status === 'player' ? '–ò–≥—Ä–æ–∫' : 
                   player.status === 'coach' ? '–¢—Ä–µ–Ω–µ—Ä' : 
                   player.status === 'scout' ? '–°–∫–∞—É—Ç' : 
                   player.status === 'admin' ? '–¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞' : '–ó–≤–µ–∑–¥–∞'}
                </Text>
              </View>
              {playerTeams.length > 0 && (
                <View style={styles.playerTeamsContainer}>
                  {playerTeams.map((team, index) => (
                    <Text key={index} style={styles.playerTeam}>
                      {team.teamName}{index < playerTeams.length - 1 ? ', ' : ''}
                    </Text>
                  ))}
                </View>
              )}
              
              {/* –û–ø—ã—Ç –≤ —Ö–æ–∫–∫–µ–µ */}
              {player.status === 'player' && player.hockeyStartDate && (
                <View style={styles.hockeyExperienceContainer}>
                  <Text style={styles.hockeyExperienceText}>
                  –í —Ö–æ–∫–∫–µ–µ {calculateHockeyExperience(player.hockeyStartDate)}
                </Text>
                </View>
              )}

              

              

            </View>

            {/* –°–µ–∫—Ü–∏—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥—Ä—É–∂–±–æ–π - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–ª—è –≤—Å–µ—Ö —Å—Ç–∞—Ç—É—Å–æ–≤ –¥—Ä—É–∂–±—ã */}
            {currentUser && currentUser.id !== player.id && (
              <View style={styles.friendRequestSection}>
                {friendshipStatus === 'received_request' ? (
                  // –ó–∞–ø—Ä–æ—Å –¥—Ä—É–∂–±—ã –ø–æ–ª—É—á–µ–Ω
                  <>
                    <View style={styles.friendRequestHeader}>
                      <Ionicons name="person-add-outline" size={24} color="#FF4444" />
                      <Text style={[styles.friendRequestTitle, { color: '#FF4444' }]}>–ó–∞–ø—Ä–æ—Å –¥—Ä—É–∂–±—ã</Text>
                    </View>
                    <Text style={styles.friendRequestMessage}>
                      {player.name} —Ö–æ—á–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å –≤–∞—Å –≤ –¥—Ä—É–∑—å—è
                    </Text>
                    <View style={styles.friendRequestButtons}>
                      <TouchableOpacity 
                        style={[styles.friendRequestButton, styles.acceptRequestButton]} 
                        onPress={handleAddFriend}
                        disabled={friendLoading}
                      >
                        <Ionicons name="checkmark-outline" size={20} color="#fff" />
                        <Text style={styles.friendRequestButtonText}>
                          {friendLoading ? '–ó–∞–≥—Ä—É–∑–∫–∞...' : '–ü—Ä–∏–Ω—è—Ç—å'}
                        </Text>
                      </TouchableOpacity>
                      
                      <TouchableOpacity 
                        style={[styles.friendRequestButton, styles.declineRequestButton]} 
                        onPress={handleDeclineFriend}
                        disabled={friendLoading}
                      >
                        <Ionicons name="close-outline" size={20} color="#000" />
                        <Text style={[styles.friendRequestButtonText, { color: '#000', fontFamily: 'Gilroy-Bold' }]}>
                          {friendLoading ? '–ó–∞–≥—Ä—É–∑–∫–∞...' : '–û—Ç–∫–ª–æ–Ω–∏—Ç—å'}
                        </Text>
                      </TouchableOpacity>
                    </View>
                  </>
                ) : friendshipStatus === 'friends' ? (
                  // –£–∂–µ –¥—Ä—É–∑—å—è
                  <>
                    <View style={styles.friendRequestHeader}>
                      <Ionicons name="people-outline" size={24} color="#FF4444" />
                      <Text style={[styles.friendRequestTitle, { color: '#FF4444' }]}>–î—Ä—É–∑—å—è</Text>
                    </View>
                    <Text style={styles.friendRequestMessage}>
                      –í—ã –¥—Ä—É–∑—å—è —Å {player.name}
                    </Text>
                    <View style={styles.friendRequestButtons}>
                      <TouchableOpacity 
                        style={[styles.friendRequestButton, { backgroundColor: 'rgba(255, 0, 0, 0.3)', borderColor: '#FF0000' }]} 
                        onPress={handleAddFriend}
                        disabled={friendLoading}
                      >
                        <Ionicons name="person-remove-outline" size={20} color="#fff" />
                        <Text style={styles.friendRequestButtonText}>
                          {friendLoading ? '–ó–∞–≥—Ä—É–∑–∫–∞...' : '–£–¥–∞–ª–∏—Ç—å –∏–∑ –¥—Ä—É–∑–µ–π'}
                        </Text>
                      </TouchableOpacity>
                    </View>
                  </>
                ) : (friendshipStatus === 'sent_request' || friendshipStatus === 'pending') ? (
                  // –ó–∞–ø—Ä–æ—Å –¥—Ä—É–∂–±—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω
                  <>
                    <View style={styles.friendRequestHeader}>
                      <Ionicons name="time-outline" size={24} color="#FF4444" />
                      <Text style={[styles.friendRequestTitle, { color: '#FF4444' }]}>–ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω</Text>
                    </View>
                    <Text style={styles.friendRequestMessage}>
                      –ó–∞–ø—Ä–æ—Å –¥—Ä—É–∂–±—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω {player.name}
                    </Text>
                    <View style={styles.friendRequestButtons}>
                      <TouchableOpacity 
                        style={[styles.friendRequestButton, { backgroundColor: 'rgba(255, 255, 255, 0.3)', borderColor: '#FFFFFF' }]} 
                        onPress={handleAddFriend}
                        disabled={friendLoading}
                      >
                        <Ionicons name="close-outline" size={20} color="#fff" />
                        <Text style={[styles.friendRequestButtonText, { color: '#fff' }]}>
                          {friendLoading ? '–ó–∞–≥—Ä—É–∑–∫–∞...' : '–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å'}
                        </Text>
                      </TouchableOpacity>
                    </View>
                  </>
                ) : (
                  // –ù–µ—Ç –¥—Ä—É–∂–±—ã - –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å
                  <>
                    <View style={styles.friendRequestHeader}>
                      <Ionicons name="person-add-outline" size={24} color="#FF4444" />
                      <Text style={[styles.friendRequestTitle, { color: '#FF4444' }]}>–î–æ–±–∞–≤–∏—Ç—å –≤ –¥—Ä—É–∑—å—è</Text>
                    </View>
                    <Text style={styles.friendRequestMessage}>
                      –•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å {player.name} –≤ –¥—Ä—É–∑—å—è?
                    </Text>
                    <View style={styles.friendRequestButtons}>
                      <TouchableOpacity 
                        style={[styles.friendRequestButton, { backgroundColor: 'rgba(255, 68, 68, 0.3)', borderColor: '#FF4444' }]} 
                        onPress={handleAddFriend}
                        disabled={friendLoading}
                      >
                        <Ionicons name="person-add-outline" size={20} color="#fff" />
                        <Text style={styles.friendRequestButtonText}>
                          {friendLoading ? '–ó–∞–≥—Ä—É–∑–∫–∞...' : '–î–æ–±–∞–≤–∏—Ç—å –≤ –¥—Ä—É–∑—å—è'}
                        </Text>
                      </TouchableOpacity>
                    </View>
                  </>
                )}
              </View>
            )}

            {/* –ö–Ω–æ–ø–∫–∞ –æ—Ç–ª–∞–¥–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ */}
            {currentUser && currentUser.status === 'admin' && (
              <View style={styles.section}>
                <TouchableOpacity 
                  style={[styles.friendRequestButton, { backgroundColor: 'rgba(0, 0, 255, 0.3)', borderColor: '#0000FF' }]} 
                  onPress={handleDebugFriendRequests}
                >
                  <Ionicons name="bug-outline" size={20} color="#fff" />
                  <Text style={styles.friendRequestButtonText}>
                    –û—Ç–ª–∞–¥–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –¥—Ä—É–∂–±—ã
                  </Text>
                </TouchableOpacity>
                
                <TouchableOpacity 
                  style={[styles.friendRequestButton, { backgroundColor: 'rgba(255, 0, 0, 0.3)', borderColor: '#FF0000', marginTop: 10 }]} 
                  onPress={handleClearAllFriendRequests}
                >
                  <Ionicons name="trash-outline" size={20} color="#fff" />
                  <Text style={styles.friendRequestButtonText}>
                    –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã –¥—Ä—É–∂–±—ã
                  </Text>
                </TouchableOpacity>

                <TouchableOpacity 
                  style={[styles.friendRequestButton, { backgroundColor: 'rgba(0, 255, 0, 0.3)', borderColor: '#00FF00', marginTop: 10 }]} 
                  onPress={handleTestNotification}
                >
                  <Ionicons name="notifications-outline" size={20} color="#fff" />
                  <Text style={styles.friendRequestButtonText}>
                    –¢–µ—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                  </Text>
                </TouchableOpacity>

                <TouchableOpacity 
                  style={[styles.friendRequestButton, { backgroundColor: 'rgba(255, 165, 0, 0.3)', borderColor: '#FFA500', marginTop: 10 }]} 
                  onPress={handleViewAllNotifications}
                >
                  <Ionicons name="eye-outline" size={20} color="#fff" />
                  <Text style={styles.friendRequestButtonText}>
                    –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
                  </Text>
                </TouchableOpacity>

                <TouchableOpacity 
                  style={[styles.friendRequestButton, { backgroundColor: 'rgba(128, 0, 128, 0.3)', borderColor: '#800080', marginTop: 10 }]} 
                  onPress={handleSendFriendRequestFromPlayer}
                >
                  <Ionicons name="person-add-outline" size={20} color="#fff" />
                  <Text style={styles.friendRequestButtonText}>
                    –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –æ—Ç –∏–≥—Ä–æ–∫–∞
                  </Text>
                </TouchableOpacity>

                <TouchableOpacity 
                  style={[styles.friendRequestButton, { backgroundColor: 'rgba(0, 128, 128, 0.3)', borderColor: '#008080', marginTop: 10 }]} 
                  onPress={handleTestMessage}
                >
                  <Ionicons name="chatbubble-outline" size={20} color="#fff" />
                  <Text style={styles.friendRequestButtonText}>
                    –¢–µ—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
                  </Text>
                </TouchableOpacity>

                <TouchableOpacity 
                  style={[styles.friendRequestButton, { backgroundColor: 'rgba(128, 128, 0, 0.3)', borderColor: '#808000', marginTop: 10 }]} 
                  onPress={handleViewAllMessages}
                >
                  <Ionicons name="eye-outline" size={20} color="#fff" />
                  <Text style={styles.friendRequestButtonText}>
                    –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
                  </Text>
                </TouchableOpacity>

                <TouchableOpacity 
                  style={[styles.friendRequestButton, { backgroundColor: 'rgba(75, 0, 130, 0.3)', borderColor: '#4B0082', marginTop: 10 }]} 
                  onPress={handleRefreshCounters}
                >
                  <Ionicons name="refresh-outline" size={20} color="#fff" />
                  <Text style={styles.friendRequestButtonText}>
                    –û–±–Ω–æ–≤–∏—Ç—å —Å—á–µ—Ç—á–∏–∫–∏
                  </Text>
                </TouchableOpacity>
              </View>
            )}

            {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ —Å–µ–∑–æ–Ω–∞ - —Ç–æ–ª—å–∫–æ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ —Å –¥–∞–Ω–Ω—ã–º–∏ */}
            {player && player.status !== 'star' && (() => {
              const goalsNum = parseInt(player.goals || '0') || 0;
              const assistsNum = parseInt(player.assists || '0') || 0;
              const gamesNum = parseInt(player.games || '0') || 0;
              const pointsNum = goalsNum + assistsNum;
              

              
              // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –Ω–µ–Ω—É–ª–µ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
              const hasStats = pointsNum > 0 || goalsNum > 0 || assistsNum > 0 || gamesNum > 0;
              
              return (hasStats || (isEditing && (currentUser?.status === 'admin' || currentUser?.id === player.id))) ? (
                <View style={styles.section}>
                  <Text style={styles.sectionTitle}>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ —Å–µ–∑–æ–Ω–∞</Text>
                  {isEditing ? (
                    <View style={styles.statsGrid}>
                      <View style={styles.statItem}>
                        <Text style={styles.statLabel}>–ò–≥—Ä</Text>
                        <TextInput
                          style={styles.editInput}
                          value={editData.games !== undefined ? editData.games : (player.games || '')}
                          onChangeText={(text) => setEditData({...editData, games: text})}
                          placeholder="0"
                          placeholderTextColor="#888"
                          keyboardType="numeric"
                        />
                      </View>
                      <View style={styles.statItem}>
                        <Text style={styles.statLabel}>–ì–æ–ª–æ–≤</Text>
                        <TextInput
                          style={styles.editInput}
                          value={editData.goals !== undefined ? editData.goals : (player.goals || '')}
                          onChangeText={(text) => setEditData({...editData, goals: text})}
                          placeholder="0"
                          placeholderTextColor="#888"
                          keyboardType="numeric"
                        />
                      </View>
                      <View style={styles.statItem}>
                        <Text style={styles.statLabel}>–ü–µ—Ä–µ–¥–∞—á</Text>
                        <TextInput
                          style={styles.editInput}
                          value={editData.assists !== undefined ? editData.assists : (player.assists || '')}
                          onChangeText={(text) => setEditData({...editData, assists: text})}
                          placeholder="0"
                          placeholderTextColor="#888"
                          keyboardType="numeric"
                        />
                      </View>
                    </View>
                  ) : (
                  <View style={styles.statsGrid}>
                    {pointsNum > 0 && (
                      <View style={styles.statItem}>
                        <Text style={styles.statValue}>{pointsNum.toString()}</Text>
                        <Text style={styles.statLabel}>–û—á–∫–æ–≤</Text>
                      </View>
                    )}
                    <View style={styles.statItem}>
                      <Text style={styles.statValue}>{friends.length}</Text>
                      <Text style={styles.statLabel}>–î—Ä—É–∑–µ–π</Text>
                    </View>
                    {goalsNum > 0 && (
                      <View style={styles.statItem}>
                        <Text style={styles.statValue}>{goalsNum.toString()}</Text>
                        <Text style={styles.statLabel}>–ì–æ–ª–æ–≤</Text>
                      </View>
                    )}
                    {assistsNum > 0 && (
                      <View style={styles.statItem}>
                        <Text style={styles.statValue}>{assistsNum.toString()}</Text>
                        <Text style={styles.statLabel}>–ü–µ—Ä–µ–¥–∞—á</Text>
                      </View>
                    )}
                    {gamesNum > 0 && (
                      <View style={styles.statItem}>
                        <Text style={styles.statValue}>{gamesNum.toString()}</Text>
                        <Text style={styles.statLabel}>–ò–≥—Ä</Text>
                      </View>
                    )}
                  </View>
                  )}
                </View>
              ) : null;
            })()}

            {/* –°–µ–∫—Ü–∏—è –∫–æ–º–∞–Ω–¥ */}
            {(playerTeams.length > 0 || pastTeams.length > 0 || (isEditing && (currentUser?.status === 'admin' || currentUser?.id === player.id))) && (
              <View style={styles.teamsSection}>
                <Text style={styles.teamsSectionTitle}>–ö–æ–º–∞–Ω–¥—ã</Text>
                
                {isEditing && (currentUser?.status === 'admin' || currentUser?.id === player.id) ? (
                  <>
                    {/* –¢–µ–∫—É—â–∏–µ –∫–æ–º–∞–Ω–¥—ã */}
                    <View style={styles.teamsSubsection}>
                      <Text style={styles.subsectionTitle}>–¢–µ–∫—É—â–∏–µ –∫–æ–º–∞–Ω–¥—ã</Text>
                      <CurrentTeamsSection
                        currentTeams={playerTeams}
                        onCurrentTeamsChange={setPlayerTeams}
                        onMoveToPastTeams={(team) => {
                  
                          setPastTeams(prev => [...prev, team]);
                        }}
                        readOnly={false}
                        isEditing={true}
                      />
                    </View>
                    
                    {/* –ü—Ä–æ—à–ª—ã–µ –∫–æ–º–∞–Ω–¥—ã */}
                    <View style={styles.teamsSubsection}>
                      <Text style={styles.subsectionTitle}>–ü—Ä–æ—à–ª—ã–µ –∫–æ–º–∞–Ω–¥—ã</Text>
                      <PastTeamsSection
                        pastTeams={pastTeams}
                        isEditing={isEditing}
                        onPastTeamsChange={setPastTeams}
                        onMoveToCurrentTeams={(team) => {
                  
                          setPastTeams(prev => [...prev, team]);
                        }}
                        readOnly={false}
                      />
                    </View>
                  </>
                ) : (
                  <>
                    {/* –¢–µ–∫—É—â–∏–µ –∫–æ–º–∞–Ω–¥—ã */}
                    {playerTeams.length > 0 && (
                      <>
                        <Text style={styles.subsectionTitle}>–¢–µ–∫—É—â–∏–µ –∫–æ–º–∞–Ω–¥—ã</Text>
                        <View style={styles.teamsListContainer}>
                          {playerTeams.map((team, index) => (
                            <View key={`current-${team.id}-${index}`} style={styles.teamItem}>
                              <Animated.View style={styles.rotatedStar}>
                                <Ionicons name="star" size={16} color="#FF4444" />
                              </Animated.View>
                              <Text style={styles.teamsListText}>
                                {team.teamName} ({team.startYear} - –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è)
                              </Text>
                            </View>
                          ))}
                        </View>
                      </>
                    )}
                    
                    {/* –ü—Ä–æ—à–ª—ã–µ –∫–æ–º–∞–Ω–¥—ã */}
                    {pastTeams.length > 0 && (
                      <>
                        <Text style={styles.subsectionTitle}>–ü—Ä–æ—à–ª—ã–µ –∫–æ–º–∞–Ω–¥—ã</Text>
                        <View style={styles.teamsListContainer}>
                          {pastTeams.map((team, index) => (
                            <View key={`past-${team.id}-${index}`} style={styles.teamItem}>
                              <Animated.View style={styles.rotatedStar}>
                                <Ionicons name="star" size={16} color="#888" />
                              </Animated.View>
                              <Text style={styles.teamsListText}>
                                {team.teamName} ({team.startYear}{team.endYear && team.endYear !== team.startYear ? ` - ${team.endYear}` : ''})
                              </Text>
                            </View>
                          ))}
                        </View>
                      </>
                    )}
                  </>
                )}
              </View>
            )}

            {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–∞–Ω–¥–µ –¥–ª—è –∑–≤–µ–∑–¥ */}
            {player.status === 'star' && (
              <View style={styles.section}>
                <Text style={styles.sectionTitle}>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–∞–Ω–¥–µ</Text>
                <View style={styles.infoGrid}>
                  <View style={styles.infoItem}>
                    <Text style={styles.infoLabel}>–ö–æ–º–∞–Ω–¥–∞</Text>
                    <Text style={styles.infoValue}>{player.team || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}</Text>
                  </View>
                  <View style={styles.infoItem}>
                    <Text style={styles.infoLabel}>–î—Ä—É–∑–µ–π</Text>
                    <Text style={styles.infoValue}>{friends.length}</Text>
                  </View>
                  <View style={styles.infoItem}>
                    <Text style={styles.infoLabel}>–°—Ç—Ä–∞–Ω–∞</Text>
                    <Text style={styles.infoValue}>{player.country}</Text>
                  </View>
                  <View style={styles.infoItem}>
                    <Text style={styles.infoLabel}>–ü–æ–∑–∏—Ü–∏—è</Text>
                    <Text style={styles.infoValue}>{player.position || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}</Text>
                  </View>
                  {player.grip && (
                    <View style={styles.infoItem}>
                      <Text style={styles.infoLabel}>–•–≤–∞—Ç</Text>
                      <Text style={styles.infoValue}>{player.grip}</Text>
                    </View>
                  )}
                </View>
              </View>
            )}


            {/* –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
            <View style={styles.section}>
              <Text style={styles.sectionTitle}>–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</Text>
              <View style={styles.infoGrid}>
                <View style={styles.infoItem}>
                  <Text style={styles.infoLabel}>–°—Ç—Ä–∞–Ω–∞</Text>
                  {isEditing && (currentUser?.status === 'admin' || currentUser?.id === player.id) ? (
                    <TouchableOpacity
                      style={styles.pickerButton}
                      onPress={() => setShowCountryPicker(true)}
                    >
                      <Text style={styles.pickerButtonText}>
                        {editData.country || player.country || '–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É'}
                      </Text>
                      <Ionicons name="chevron-down" size={16} color="#fff" />
                    </TouchableOpacity>
                  ) : (
                    <Text style={styles.infoValue}>{player.country || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}</Text>
                  )}
                </View>

                {player.status === 'player' && (
                  <View style={styles.infoItem}>
                    <Text style={styles.infoLabel}>–ü–æ–∑–∏—Ü–∏—è</Text>
                    {isEditing && (currentUser?.status === 'admin' || currentUser?.id === player.id) ? (
                      <TouchableOpacity
                        style={styles.pickerButton}
                        onPress={() => setShowPositionPicker(true)}
                      >
                        <Text style={styles.pickerButtonText}>
                          {editData.position || player.position || '–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–∑–∏—Ü–∏—é'}
                        </Text>
                        <Ionicons name="chevron-down" size={16} color="#fff" />
                      </TouchableOpacity>
                    ) : (
                      <Text style={styles.infoValue}>{player.position || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}</Text>
                    )}
                  </View>
                )}
                <View style={styles.infoItem}>
                  <Text style={styles.infoLabel}>–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è</Text>
                  {isEditing && (currentUser?.status === 'admin' || currentUser?.id === player.id) ? (
                    <TouchableOpacity
                      style={styles.pickerButton}
                      onPress={showBirthDatePickerModal}
                    >
                      <Text style={styles.pickerButtonText}>
                        {editData.birthDate || player.birthDate || '–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É'}
                      </Text>
                      <Ionicons name="calendar-outline" size={16} color="#fff" />
                    </TouchableOpacity>
                  ) : (
                    <Text style={styles.infoValue}>{formatBirthDate(player.birthDate || '')}</Text>
                  )}
                </View>
                {player.status === 'player' && (
                  <View style={styles.infoItem}>
                    <Text style={styles.infoLabel}>–ù–∞—á–∞–ª –∏–≥—Ä–∞—Ç—å –≤ —Ö–æ–∫–∫–µ–π</Text>
                    {isEditing && (currentUser?.status === 'admin' || currentUser?.id === player.id) ? (
                    <TextInput
                      style={styles.editInput}
                        value={editData.hockeyStartDate !== undefined ? editData.hockeyStartDate : (player.hockeyStartDate || '')}
                        onChangeText={(text) => setEditData({...editData, hockeyStartDate: text})}
                        placeholder="–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä: 12.2014)"
                    />
                  ) : (
                      <Text style={styles.infoValue}>
                        {player.hockeyStartDate ? 
                          `–í —Ö–æ–∫–∫–µ–µ ${calculateHockeyExperience(player.hockeyStartDate)}` : 
                          '–ù–µ —É–∫–∞–∑–∞–Ω–æ'
                        }
                      </Text>
                  )}
                </View>
                )}
                {player.status === 'player' && (
                  <View style={styles.infoItem}>
                    <Text style={styles.infoLabel}>–•–≤–∞—Ç</Text>
                    {isEditing && (currentUser?.status === 'admin' || currentUser?.id === player.id) ? (
                      <TouchableOpacity
                        style={styles.pickerButton}
                        onPress={() => setShowGripPicker(true)}
                      >
                        <Text style={styles.pickerButtonText}>
                          {editData.grip || player.grip || '–í—ã–±–µ—Ä–∏—Ç–µ —Ö–≤–∞—Ç'}
                        </Text>
                        <Ionicons name="chevron-down" size={16} color="#fff" />
                      </TouchableOpacity>
                    ) : (
                      <Text style={styles.infoValue}>{player.grip || '–ù–µ —É–∫–∞–∑–∞–Ω'}</Text>
                    )}
                  </View>
                )}
              </View>
            </View>

            {/* –§–∏–∑–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ - —Ç–æ–ª—å–∫–æ –¥–ª—è –∏–≥—Ä–æ–∫–æ–≤ (–Ω–µ —Ç—Ä–µ–Ω–µ—Ä—ã) */}
            {player.status === 'player' && (
              <View style={styles.section}>
                <Text style={styles.sectionTitle}>–§–∏–∑–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ</Text>
                <View style={styles.infoGrid}>
                  <View style={styles.infoItem}>
                    <Text style={styles.infoLabel}>–†–æ—Å—Ç</Text>
                    {isEditing && (currentUser?.status === 'admin' || currentUser?.id === player.id) ? (
                      <TextInput
                        style={styles.editInput}
                        value={editData.height !== undefined ? editData.height : (player.height || '')}
                        onChangeText={(text) => setEditData({...editData, height: text})}
                        placeholder="–†–æ—Å—Ç (—Å–º)"
                        placeholderTextColor="#888"
                        keyboardType="numeric"
                      />
                    ) : (
                      <Text style={styles.infoValue}>{player.height ? `${player.height} —Å–º` : '–ù–µ —É–∫–∞–∑–∞–Ω'}</Text>
                    )}
                  </View>
                  <View style={styles.infoItem}>
                    <Text style={styles.infoLabel}>–í–µ—Å</Text>
                    {isEditing && (currentUser?.status === 'admin' || currentUser?.id === player.id) ? (
                      <TextInput
                        style={styles.editInput}
                        value={editData.weight !== undefined ? editData.weight : (player.weight || '')}
                        onChangeText={(text) => setEditData({...editData, weight: text})}
                        placeholder="–í–µ—Å (–∫–≥)"
                        placeholderTextColor="#888"
                        keyboardType="numeric"
                      />
                    ) : (
                      <Text style={styles.infoValue}>{player.weight ? `${player.weight} –∫–≥` : '–ù–µ —É–∫–∞–∑–∞–Ω'}</Text>
                    )}
                  </View>
                </View>
              </View>
            )}

            {/* –í–∏–¥–µ–æ –º–æ–º–µ–Ω—Ç–æ–≤ - —Ç–æ–ª—å–∫–æ –¥–ª—è –∏–≥—Ä–æ–∫–æ–≤ (–Ω–µ —Ç—Ä–µ–Ω–µ—Ä—ã) */}
            {player.status === 'player' && ((currentUser && currentUser.id === player.id && isEditing) || (player.favoriteGoals && player.favoriteGoals.trim() !== '' && player.favoriteGoals.trim() !== 'null') || (isEditing && currentUser?.status === 'admin')) && (
              <View style={styles.section}>
                <Text style={styles.sectionTitle}>–í–∏–¥–µ–æ –º–æ–º–µ–Ω—Ç–æ–≤</Text>
                {isEditing && (currentUser?.status === 'admin' || currentUser?.id === player.id) ? (
                  <View>
                    <Text style={styles.sectionSubtitle}>
                      –î–æ–±–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ YouTube –≤–∏–¥–µ–æ –∏ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –º–æ–º–µ–Ω—Ç–∞ (—Ñ–æ—Ä–º–∞—Ç: –º–∏–Ω—É—Ç—ã:—Å–µ–∫—É–Ω–¥—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä: 1:25){'\n'}
                      –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è: youtube.com/watch?v=, youtu.be/, youtube.com/shorts/, youtube.com/live/, m.youtube.com/
                    </Text>
                    <View>
                      {videoFields.map((video, index) => (
                        <View key={index} style={styles.videoFieldContainer}>
                          <TextInput
                            style={styles.videoUrlInput}
                            value={video.url}
                            onChangeText={(text) => {
                              const newVideoFields = [...videoFields];
                              newVideoFields[index] = { ...newVideoFields[index], url: text };
                              setVideoFields(newVideoFields);
                            }}
                            placeholder="https://youtube.com/watch?v=... –∏–ª–∏ youtube.com/live/..."
                            placeholderTextColor="#888"
                          />
                          <TextInput
                            style={styles.timeCodeInput}
                            value={video.timeCode}
                            onChangeText={(text) => {
                              // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏ (–º–∏–Ω—É—Ç—ã:—Å–µ–∫—É–Ω–¥—ã)
                              const timeRegex = /^(\d{0,2}):?(\d{0,2})$/;
                              const match = text.match(timeRegex);
                              
                              if (match) {
                                let formattedText = text;
                                // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è–µ–º –¥–≤–æ–µ—Ç–æ—á–∏–µ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç –∏ –µ—Å—Ç—å —Ü–∏—Ñ—Ä—ã
                                if (!text.includes(':') && text.length > 0) {
                                  if (text.length <= 2) {
                                    formattedText = text;
                                  } else {
                                    formattedText = text.slice(0, 2) + ':' + text.slice(2);
                                  }
                                }
                                
                                // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∏–Ω—É—Ç—ã –¥–æ 59, —Å–µ–∫—É–Ω–¥—ã –¥–æ 59
                                const parts = formattedText.split(':');
                                if (parts.length === 2) {
                                  const minutes = parseInt(parts[0]) || 0;
                                  const seconds = parseInt(parts[1]) || 0;
                                  if (minutes > 59) formattedText = '59:' + parts[1];
                                  if (seconds > 59) formattedText = parts[0] + ':59';
                                }
                                
                                const newVideoFields = [...videoFields];
                                newVideoFields[index] = { ...newVideoFields[index], timeCode: formattedText };
                                setVideoFields(newVideoFields);
                              } else if (text === '' || text === ':') {
                                // –†–∞–∑—Ä–µ—à–∞–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –∏ –¥–≤–æ–µ—Ç–æ—á–∏–µ
                                const newVideoFields = [...videoFields];
                                newVideoFields[index] = { ...newVideoFields[index], timeCode: text };
                                setVideoFields(newVideoFields);
                              }
                            }}
                            placeholder="–º–∏–Ω:—Å–µ–∫"
                            placeholderTextColor="#888"
                            keyboardType="default"
                            maxLength={5}
                          />
                          {videoFields.length > 1 && (
                            <TouchableOpacity
                              style={styles.removeVideoButton}
                              onPress={() => {
                                const newVideoFields = videoFields.filter((_, i) => i !== index);
                                setVideoFields(newVideoFields.length > 0 ? newVideoFields : [{ url: '', timeCode: '' }]);
                              }}
                            >
                              <Ionicons name="close-circle" size={20} color="#FF4444" />
                            </TouchableOpacity>
                          )}
                        </View>
                      ))}
                      <TouchableOpacity
                        style={styles.addMoreButton}
                        onPress={() => {
                          setVideoFields([...videoFields, { url: '', timeCode: '' }]);
                        }}
                      >
                        <Ionicons name="add-circle" size={24} color="#FF4444" />
                        <Text style={styles.addMoreButtonText}>–î–æ–±–∞–≤–∏—Ç—å –µ—â–µ –≤–∏–¥–µ–æ</Text>
                      </TouchableOpacity>
                    </View>
                  </View>
                ) : player.favoriteGoals ? (
                  (() => {
                    const videoUrls = player.favoriteGoals.split('\n').filter(goal => goal.trim());
                    const parsedVideos = videoUrls.map(goal => parseVideoUrl(goal.trim()));
                    
                    return (
                  <VideoCarousel
                        videos={parsedVideos}
                    onVideoPress={(video) => setSelectedVideo(video)}
                  />
                    );
                  })()
                ) : null}
              </View>
            )}



            {/* –ù–æ—Ä–º–∞—Ç–∏–≤—ã - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∏–≥—Ä–æ–∫–∞–º (–Ω–µ —Ç—Ä–µ–Ω–µ—Ä–∞–º) */}
            {player && player.status === 'player' ? (
              (currentUser && currentUser.id === player.id) || 
              friendshipStatus === 'friends' || 
              currentUser?.status === 'coach' || 
              currentUser?.status === 'scout' ||
              currentUser?.status === 'admin' ? (
                // –î–ª—è —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ–≥–¥–∞, –¥–ª—è –¥—Ä—É–≥–∏—Ö - —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ
                (currentUser && currentUser.id === player.id) ||
                (player.pullUps && player.pullUps !== '0' && player.pullUps !== '' && player.pullUps !== 'null') ||
                (player.pushUps && player.pushUps !== '0' && player.pushUps !== '' && player.pushUps !== 'null') ||
                (player.plankTime && player.plankTime !== '0' && player.plankTime !== '' && player.plankTime !== 'null') ||
                (player.sprint100m && player.sprint100m !== '0' && player.sprint100m !== '' && player.sprint100m !== 'null') ||
                (player.longJump && player.longJump !== '0' && player.longJump !== '' && player.longJump !== 'null') ||
                (player.jumpRope && player.jumpRope !== '0' && player.jumpRope !== '' && player.jumpRope !== 'null') ||
                (isEditing && (currentUser?.status === 'admin' || currentUser?.id === player.id)) ? (
                  isEditing && (currentUser?.status === 'admin' || currentUser?.id === player.id) ? (
                    // –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º–∞—è –≤–µ—Ä—Å–∏—è –Ω–æ—Ä–º–∞—Ç–∏–≤–æ–≤
                    <View style={styles.section}>
                      <Text style={styles.sectionTitle}>–ù–æ—Ä–º–∞—Ç–∏–≤—ã</Text>
                      <View style={styles.infoGrid}>
                        <View style={styles.infoItem}>
                          <Text style={styles.infoLabel}>–ü–æ–¥—Ç—è–≥–∏–≤–∞–Ω–∏—è</Text>
                          <TextInput
                            style={styles.editInput}
                            value={editData.pullUps !== undefined ? editData.pullUps : (player.pullUps || '')}
                            onChangeText={(text) => setEditData({...editData, pullUps: text})}
                            placeholder="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑"
                            keyboardType="numeric"
                          />
                        </View>
                        <View style={styles.infoItem}>
                          <Text style={styles.infoLabel}>–û—Ç–∂–∏–º–∞–Ω–∏—è</Text>
                          <TextInput
                            style={styles.editInput}
                            value={editData.pushUps !== undefined ? editData.pushUps : (player.pushUps || '')}
                            onChangeText={(text) => setEditData({...editData, pushUps: text})}
                            placeholder="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑"
                            keyboardType="numeric"
                          />
                        </View>
                        <View style={styles.infoItem}>
                          <Text style={styles.infoLabel}>–ü–ª–∞–Ω–∫–∞</Text>
                          <TextInput
                            style={styles.editInput}
                            value={editData.plankTime !== undefined ? editData.plankTime : (player.plankTime || '')}
                            onChangeText={(text) => setEditData({...editData, plankTime: text})}
                            placeholder="–í—Ä–µ–º—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö"
                            keyboardType="numeric"
                          />
                        </View>
                        <View style={styles.infoItem}>
                          <Text style={styles.infoLabel}>100 –º–µ—Ç—Ä–æ–≤</Text>
                          <TextInput
                            style={styles.editInput}
                            value={editData.sprint100m !== undefined ? editData.sprint100m : (player.sprint100m || '')}
                            onChangeText={(text) => setEditData({...editData, sprint100m: text})}
                            placeholder="–í—Ä–µ–º—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö"
                            keyboardType="numeric"
                          />
                        </View>
                        <View style={styles.infoItem}>
                          <Text style={styles.infoLabel}>–ü—Ä—ã–∂–æ–∫ –≤ –¥–ª–∏–Ω—É</Text>
                          <TextInput
                            style={styles.editInput}
                            value={editData.longJump !== undefined ? editData.longJump : (player.longJump || '')}
                            onChangeText={(text) => setEditData({...editData, longJump: text})}
                            placeholder="–î–ª–∏–Ω–∞ –≤ —Å–º"
                            keyboardType="numeric"
                          />
                        </View>
                        <View style={styles.infoItem}>
                          <Text style={styles.infoLabel}>–°–∫–∞–∫–∞–ª–∫–∞</Text>
                          <TextInput
                            style={styles.editInput}
                            value={editData.jumpRope !== undefined ? editData.jumpRope : (player.jumpRope || '')}
                            onChangeText={(text) => setEditData({...editData, jumpRope: text})}
                            placeholder="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑"
                            keyboardType="numeric"
                          />
                        </View>
                      </View>
                    </View>
                  ) : (
                    <NormativesSection
                      pullUps={player.pullUps}
                      pushUps={player.pushUps}
                      plankTime={player.plankTime}
                      sprint100m={player.sprint100m}
                      longJump={player.longJump}
                      jumpRope={player.jumpRope}
                    />
                  )
                ) : null // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–µ–∫—Ü–∏—é, –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç
              ) : (
                <View style={styles.section}>
                  <Text style={styles.sectionTitle}>–ù–æ—Ä–º–∞—Ç–∏–≤—ã</Text>
                  <View style={styles.lockedSectionContainer}>
                    <Ionicons name="lock-closed" size={48} color="#FF4444" />
                    <Text style={styles.lockedSectionTitle}>–î–æ–±–∞–≤—å—Ç–µ –≤ –¥—Ä—É–∑—å—è</Text>
                    <Text style={styles.lockedSectionText}>
                      –î–æ–±–∞–≤—å—Ç–µ {player.name} –≤ –¥—Ä—É–∑—å—è, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –Ω–æ—Ä–º–∞—Ç–∏–≤—ã
                    </Text>
                  </View>
                </View>
              )
            ) : null}



            {/* –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è */}
            <AchievementsSection 
              achievements={achievements}
              isEditing={isEditing && (currentUser?.status === 'admin' || currentUser?.id === player.id)}
              onAchievementsChange={setAchievements}
            />

            {/* –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ */}
            <EditablePhotosSection
              photos={galleryPhotos}
              isEditing={isEditing && (currentUser?.status === 'admin' || currentUser?.id === player.id)}
              onPhotosChange={(newPhotos) => {
            
                setGalleryPhotos(newPhotos);
              }}
            />

            {/* –î—Ä—É–∑—å—è */}
            <View style={styles.section}>
              <Text style={styles.sectionTitle}>–î—Ä—É–∑—å—è</Text>
              {friends.length > 0 ? (
                <View style={styles.friendsGrid}>
                  {friends.map((friend) => (
                    <TouchableOpacity
                      key={friend.id}
                      style={styles.friendItem}
                      onPress={() => router.push(`/player/${friend.id}`)}
                    >
                      <Image 
                        source={{ uri: friend.avatar || 'https://via.placeholder.com/60/333/fff?text=Player' }} 
                        style={styles.friendAvatar}
                      />
                      <Text style={styles.friendName} numberOfLines={2}>
                        {friend.name?.toUpperCase()}
                      </Text>
                      {friend.team && (
                        <Text style={styles.friendTeam} numberOfLines={1}>
                          {friend.team}
                        </Text>
                      )}
                    </TouchableOpacity>
                  ))}
                </View>
              ) : (
                <View style={styles.friendsContainer}>
                  <Text style={styles.noDataText}>–£ {player.name} –ø–æ–∫–∞ –Ω–µ—Ç –¥—Ä—É–∑–µ–π</Text>
                  <Text style={styles.noDataSubtext}>
                    –ë—É–¥—å—Ç–µ –ø–µ—Ä–≤—ã–º, –∫—Ç–æ –¥–æ–±–∞–≤–∏—Ç {player.name} –≤ –¥—Ä—É–∑—å—è
                  </Text>
                </View>
              )}
            </View>

            {/* –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –ø—Ä–æ—Ñ–∏–ª–µ–º */}
            <View style={styles.actionsSection}>
              {currentUser && currentUser.id !== player.id ? (
                // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∏ —Å–º–æ—Ç—Ä–∏—Ç —á—É–∂–æ–π –ø—Ä–æ—Ñ–∏–ª—å - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
                <>
                  {/* –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ */}
                  {currentUser.status === 'admin' && (
                    <>
                      {isEditing ? (
                        <>
                          <TouchableOpacity 
                            style={[styles.actionButton, { backgroundColor: '#4CAF50' }]} 
                            onPress={handleSave}
                          >
                            <Ionicons name="checkmark-outline" size={20} color="#fff" />
                            <Text style={styles.actionButtonText}>–°–æ—Ö—Ä–∞–Ω–∏—Ç—å</Text>
                          </TouchableOpacity>
                          
                          <TouchableOpacity 
                            style={[styles.actionButton, { backgroundColor: '#FF9800' }]} 
                            onPress={() => {
                              setIsEditing(false);
                              setEditData({});
                            }}
                          >
                            <Ionicons name="close-outline" size={20} color="#fff" />
                            <Text style={styles.actionButtonText}>–û—Ç–º–µ–Ω–∏—Ç—å</Text>
                          </TouchableOpacity>
                        </>
                      ) : (
                        <>
                          <TouchableOpacity 
                            style={[styles.actionButton, styles.editButton]} 
                            onPress={() => {
                              setEditData(player);
                              setIsEditing(true);
                            }}
                          >
                            <Ionicons name="create-outline" size={20} color="#fff" />
                            <Text style={styles.actionButtonText}>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å</Text>
                          </TouchableOpacity>
                          
                          <TouchableOpacity 
                            style={[styles.actionButton, styles.deleteButton]} 
                            onPress={handleDeletePlayer}
                          >
                            <Ionicons name="trash-outline" size={20} color="#fff" />
                            <Text style={styles.actionButtonText}>–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</Text>
                          </TouchableOpacity>
                        </>
                      )}
                    </>
                  )}
                  

                </>
              ) : !currentUser ? (
                // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –≤—Ö–æ–¥–∞
                <TouchableOpacity 
                  style={styles.actionButton} 
                  onPress={() => router.push('/login')}
                >
                  <Ionicons name="log-in-outline" size={20} color="#fff" />
                  <Text style={styles.actionButtonText}>–í–æ–π—Ç–∏ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è</Text>
                </TouchableOpacity>
              ) : null}
            </View>

            {/* –ú—É–∑–µ–π –∏–≥—Ä–æ–∫–∞ - –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã */}
            {/* –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º—É–∑–µ–π —Ç–æ–ª—å–∫–æ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤, —É –∑–≤–µ–∑–¥, —Ç—Ä–µ–Ω–µ—Ä–æ–≤, —Å–∫–∞—É—Ç–æ–≤ –µ–≥–æ –±—ã—Ç—å –Ω–µ –¥–æ–ª–∂–Ω–æ */}
            {player && player.status === 'player' && (
              <PlayerMuseum 
                playerId={player.id} 
                currentUserId={currentUser?.id}
                isOwner={currentUser?.id === player.id}
                isAdmin={currentUser?.status === 'admin'}
                isEditing={isEditing}
              />
            )}

            {/* –°–µ–∫—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–¥–∞—Ä–∫–æ–≤ —É –∑–≤–µ–∑–¥—ã */}
            {player.status === 'star' && currentUser && currentUser.id !== player.id && (
              <View style={styles.section}>
                <ItemRequestButtons
                  starId={player.id}
                  playerId={currentUser.id}
                  onRequestSent={() => {
                    // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞
                    console.log('–ó–∞–ø—Ä–æ—Å –ø–æ–¥–∞—Ä–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω');
                  }}
                />
              </View>
            )}

            {/* –°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏ –¥–ª—è –∑–≤–µ–∑–¥ */}
            {player.status === 'star' && (
              <>
                {/* –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∑–≤–µ–∑–¥—ã */}
                {(currentUser?.id === player.id || currentUser?.status === 'admin') && (
                  <View style={styles.section}>
                    <StarItemManager
                      playerId={player.id}
                      isEditing={isEditing}
                      onItemsUpdated={() => {
                        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
                        loadPlayerData();
                      }}
                    />
                  </View>
                )}
              </>
            )}

            {/* –û—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª–µ–º */}
            {currentUser && currentUser.id === player.id && (
              <>
                {isEditing ? (
                  // –ö–Ω–æ–ø–∫–∏ –¥–ª—è —Ä–µ–∂–∏–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                  <View style={{ gap: 15, marginTop: 20, marginBottom: 20 }}>
                    <TouchableOpacity 
                      style={[styles.actionButton, { backgroundColor: '#4CAF50' }]} 
                      onPress={handleSave}
                    >
                      <Ionicons name="checkmark-outline" size={20} color="#fff" />
                      <Text style={styles.actionButtonText}>–°–æ—Ö—Ä–∞–Ω–∏—Ç—å</Text>
                    </TouchableOpacity>
                    
                    <TouchableOpacity 
                      style={[styles.actionButton, { backgroundColor: '#f44336' }]} 
                      onPress={() => {
                        setIsEditing(false);
                        setEditData({});
                      }}
                    >
                      <Ionicons name="close-outline" size={20} color="#fff" />
                      <Text style={styles.actionButtonText}>–û—Ç–º–µ–Ω–∞</Text>
                    </TouchableOpacity>
                  </View>
                ) : (
                  // –ö–Ω–æ–ø–∫–∏ –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
                  <View style={{ gap: 15, marginTop: 20, marginBottom: 20 }}>
                    <TouchableOpacity 
                      style={[styles.actionButton, { backgroundColor: '#FF4444' }]} 
                      onPress={() => {
                        setEditData(player);
                        setIsEditing(true);
                      }}
                    >
                      <Ionicons name="create-outline" size={20} color="#fff" />
                      <Text style={styles.actionButtonText}>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å</Text>
                    </TouchableOpacity>
                    
                    <TouchableOpacity 
                      style={[styles.actionButton, { backgroundColor: '#000000' }]} 
                      onPress={handleLogout}
                    >
                      <Ionicons name="log-out-outline" size={20} color="#fff" />
                      <Text style={styles.actionButtonText}>–í—ã–π—Ç–∏ –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è</Text>
                    </TouchableOpacity>
                  </View>
                )}
              </>
            )}

            {/* –ö–Ω–æ–ø–∫–∞ "–Ω–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ" –≤ —Å–∞–º–æ–º –∫–æ–Ω—Ü–µ */}
            {currentUser && currentUser.id !== player.id && player.status !== 'star' && (
              <View style={{ marginTop: 10, marginBottom: 20 }}>
                <TouchableOpacity 
                  style={styles.actionButton} 
                  onPress={handleSendMessage}
                >
                  <Ionicons name="chatbubble-outline" size={20} color="#fff" />
                  <Text style={styles.actionButtonText}>–ù–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ</Text>
                </TouchableOpacity>
              </View>
            )}

          </ScrollView>
        </View>
      </ImageBackground>
      
      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –≤–∏–¥–µ–æ */}
      <Modal
        visible={selectedVideo !== null}
        transparent={true}
        animationType="fade"
        onRequestClose={() => setSelectedVideo(null)}
      >
        <View style={styles.videoModalOverlay}>
          <View style={styles.videoModalContainer}>
            <TouchableOpacity
              style={styles.videoModalCloseButton}
              onPress={() => setSelectedVideo(null)}
            >
              <Ionicons name="close" size={24} color="#fff" />
            </TouchableOpacity>
            {selectedVideo && (
              <YouTubeVideo 
                url={selectedVideo.url}
                title="–ú–æ–π –º–æ–º–µ–Ω—Ç"
                timeCode={selectedVideo.timeCode}
                onClose={() => setSelectedVideo(null)}
              />
            )}
          </View>
        </View>
      </Modal>

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π */}
      <CustomAlert
        visible={alert.visible}
        title={alert.title}
        message={alert.message}
        type={alert.type}
        onConfirm={() => {
          setAlert({ ...alert, visible: false });
          if (alert.onConfirm) alert.onConfirm();
        }}
        onCancel={() => setAlert({ ...alert, visible: false })}
        confirmText={alert.confirmText}
        cancelText={alert.cancelText}
        showCancel={alert.showCancel}
      />

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –≤—ã–±–æ—Ä–∞ —Å—Ç—Ä–∞–Ω—ã */}
      {showCountryPicker && (
        <View style={styles.modalOverlay}>
          <View style={styles.modalContainer}>
            <Text style={styles.modalTitle}>–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É</Text>
            <ScrollView style={styles.modalScroll}>
              {countries.map((country) => (
                <TouchableOpacity
                  key={country}
                  style={styles.modalOption}
                  onPress={() => {
                    setEditData({...editData, country: country});
                    setShowCountryPicker(false);
                  }}
                >
                  <Text style={styles.modalOptionText}>{country}</Text>
                </TouchableOpacity>
              ))}
            </ScrollView>
            <TouchableOpacity
              style={styles.modalCancelButton}
              onPress={() => setShowCountryPicker(false)}
            >
              <Text style={styles.modalCancelButtonText}>–û—Ç–º–µ–Ω–∞</Text>
            </TouchableOpacity>
          </View>
        </View>
      )}

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –≤—ã–±–æ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏ */}
      {showPositionPicker && (
        <View style={styles.modalOverlay}>
          <View style={styles.modalContainer}>
            <Text style={styles.modalTitle}>–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–∑–∏—Ü–∏—é</Text>
            <ScrollView style={styles.modalScroll}>
              {positions.map((position) => (
                <TouchableOpacity
                  key={position}
                  style={styles.modalOption}
                  onPress={() => {
                    setEditData({...editData, position: position});
                    setShowPositionPicker(false);
                  }}
                >
                  <Text style={styles.modalOptionText}>{position}</Text>
                </TouchableOpacity>
              ))}
            </ScrollView>
            <TouchableOpacity
              style={styles.modalCancelButton}
              onPress={() => setShowPositionPicker(false)}
            >
              <Text style={styles.modalCancelButtonText}>–û—Ç–º–µ–Ω–∞</Text>
            </TouchableOpacity>
          </View>
        </View>
      )}

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –≤—ã–±–æ—Ä–∞ —Ö–≤–∞—Ç–∞ */}
      {showGripPicker && (
        <View style={styles.modalOverlay}>
          <View style={styles.modalContainer}>
            <Text style={styles.modalTitle}>–í—ã–±–µ—Ä–∏—Ç–µ —Ö–≤–∞—Ç</Text>
            <ScrollView style={styles.modalScroll}>
              {grips.map((grip) => (
                <TouchableOpacity
                  key={grip}
                  style={styles.modalOption}
                  onPress={() => {
                    setEditData({...editData, grip: grip});
                    setShowGripPicker(false);
                  }}
                >
                  <Text style={styles.modalOptionText}>{grip}</Text>
                </TouchableOpacity>
              ))}
            </ScrollView>
            <TouchableOpacity
              style={styles.modalCancelButton}
              onPress={() => setShowGripPicker(false)}
            >
              <Text style={styles.modalCancelButtonText}>–û—Ç–º–µ–Ω–∞</Text>
            </TouchableOpacity>
          </View>
        </View>
      )}

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è */}
      {showBirthDatePicker && (
        <View style={styles.modalOverlay}>
          <View style={styles.datePickerModal}>
            <DateTimePicker
              value={selectedBirthDate}
              mode="date"
              display={Platform.OS === 'ios' ? 'spinner' : 'default'}
              onChange={onBirthDateChange}
              maximumDate={new Date()}
              minimumDate={new Date(1900, 0, 1)}
              textColor="#fff"
              themeVariant="dark"
            />
            {Platform.OS === 'ios' && (
              <View style={styles.datePickerButtons}>
                <TouchableOpacity 
                  style={styles.datePickerButton} 
                  onPress={() => setShowBirthDatePicker(false)}
                >
                  <Text style={styles.datePickerButtonText}>–û—Ç–º–µ–Ω–∞</Text>
                </TouchableOpacity>
                <TouchableOpacity 
                  style={[styles.datePickerButton, styles.confirmButton]} 
                  onPress={() => {
                    const day = selectedBirthDate.getDate().toString().padStart(2, '0');
                    const month = (selectedBirthDate.getMonth() + 1).toString().padStart(2, '0');
                    const year = selectedBirthDate.getFullYear().toString();
                    const formattedDate = `${day}.${month}.${year}`;
                    setEditData({...editData, birthDate: formattedDate});
                    setShowBirthDatePicker(false);
                  }}
                >
                  <Text style={styles.datePickerButtonText}>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å</Text>
                </TouchableOpacity>
              </View>
            )}
          </View>
        </View>
      )}
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#000',
  },
  background: {
    flex: 1,
    backgroundColor: '#000',
  },
  overlay: {
    flex: 1,
    backgroundColor: 'rgba(0, 0, 0, 0.7)',
  },
  scrollContainer: {
    flexGrow: 1,
    paddingTop: 0,
    paddingHorizontal: 20,
    paddingBottom: 20,
  },
  editButtonContainer: {
    flexDirection: 'row',
    justifyContent: 'flex-end',
    paddingHorizontal: 40,
    paddingTop: 20,
    paddingBottom: 10,
  },
  editButton: {
    padding: 20,
    borderRadius: 50,
    width: 100,
    height: 100,
    justifyContent: 'center',
    alignItems: 'center',
  },
  loadingContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
  loadingText: {
    color: '#fff',
    fontSize: 18,
    fontFamily: 'Gilroy-Regular',
  },
  errorContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
  errorText: {
    color: '#fff',
    fontSize: 18,
    fontFamily: 'Gilroy-Regular',
  },
  profileSection: {
    alignItems: 'center',
    marginBottom: 30,
    marginTop: 20,
  },
  profileImage: {
    width: 120,
    height: 120,
    borderRadius: 60,
    borderWidth: 3,
    borderColor: '#FF4444',
    marginBottom: 15,
  },
  avatarPlaceholder: {
    backgroundColor: '#2C3E50',
    justifyContent: 'center',
    alignItems: 'center',
  },
  nameRow: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: 5,
  },
  playerName: {
    fontSize: 28,
    fontFamily: 'Gilroy-Bold',
    color: '#fff',
    marginRight: 10,
  },
  numberBadge: {
    backgroundColor: '#FF4444',
    borderRadius: 19.5, // –£–≤–µ–ª–∏—á–∏–ª–∏ –Ω–∞ 30% —Å 15
    paddingHorizontal: 10.4, // –£–≤–µ–ª–∏—á–∏–ª–∏ –Ω–∞ 30% —Å 8
    paddingVertical: 2.6, // –£–≤–µ–ª–∏—á–∏–ª–∏ –Ω–∞ 30% —Å 2
  },
  numberText: {
    fontSize: 18.2, // –£–≤–µ–ª–∏—á–∏–ª–∏ –Ω–∞ 30% —Å 14
    fontFamily: 'Gilroy-Bold',
    color: '#fff',
  },
  statusContainer: {
    paddingHorizontal: 8,
    paddingVertical: 4,
    marginBottom: 5,
    alignSelf: 'center',
  },
  playerStatus: {
    fontSize: 20,
    fontFamily: 'Gilroy-Bold',
    color: '#FF4444',
    fontWeight: 'bold',
  },
  playerTeam: {
    fontSize: 18,
    fontFamily: 'Gilroy-Regular',
    color: '#fff',
  },
  playerTeamsContainer: {
    flexDirection: 'row',
    flexWrap: 'wrap',
    justifyContent: 'center',
    alignItems: 'center',
  },
  hockeyExperienceContainer: {
    marginTop: 5,
    alignItems: 'center',
  },
  hockeyExperienceText: {
    fontSize: 16,
    fontFamily: 'Gilroy-Regular',
    color: '#FF4444',
  },
  hockeyExperience: {
    fontSize: 16,
    fontFamily: 'Gilroy-Regular',
    color: '#FF4444',
    marginTop: 4,
  },
  actionsSection: {
    gap: 15,
    marginTop: 20,
  },
  actionButton: {
    backgroundColor: '#FF4444',
    borderRadius: 12,
    padding: 15,
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
  },
  addFriendButton: {
    backgroundColor: 'rgba(255, 68, 68, 0.2)',
    borderWidth: 1,
    borderColor: '#FF4444',
  },
  removeFriendButton: {
    backgroundColor: 'rgba(255, 0, 0, 0.3)',
    borderWidth: 1,
    borderColor: '#FF0000',
  },
  cancelRequestButton: {
    backgroundColor: 'rgba(255, 0, 0, 0.3)',
    borderWidth: 1,
    borderColor: '#FF0000',
  },
  acceptRequestButton: {
    backgroundColor: '#FF4444',
    borderWidth: 1,
    borderColor: '#FF4444',
  },
  declineRequestButton: {
    backgroundColor: '#FFFFFF',
    borderWidth: 1,
    borderColor: '#FFFFFF',
  },

  actionButtonText: {
    fontSize: 14,
    fontFamily: 'Gilroy-Bold',
    color: '#fff',
    marginLeft: 8,
  },

  section: {
    backgroundColor: 'rgba(0, 0, 0, 0.9)',
    borderRadius: 15,
    padding: 20,
    marginBottom: 20,
    borderWidth: 1,
    borderColor: 'rgba(255, 255, 255, 0.1)',
    shadowColor: '#000',
    shadowOffset: {
      width: 0,
      height: 2,
    },
    shadowOpacity: 0.25,
    shadowRadius: 3.84,
    elevation: 5,
  },

  sectionTitle: {
    fontSize: 20,
    fontFamily: 'Gilroy-Bold',
    color: '#FF4444',
    marginBottom: 15,
  },
  sectionSubtitle: {
    fontSize: 14,
    fontFamily: 'Gilroy-Regular',
    color: '#ccc',
    marginBottom: 10,
    lineHeight: 20,
  },
  statsGrid: {
    flexDirection: 'row',
    justifyContent: 'space-around',
  },
  statItem: {
    alignItems: 'center',
  },
  statValue: {
    fontSize: 24,
    fontFamily: 'Gilroy-Bold',
    color: '#fff',
  },
  statLabel: {
    fontSize: 12,
    fontFamily: 'Gilroy-Regular',
    color: '#fff',
    marginTop: 5,
  },
  infoGrid: {
    flexDirection: 'row',
    flexWrap: 'wrap',
    gap: 15,
  },
  infoItem: {
    flex: 1,
    minWidth: '45%',
  },
  infoLabel: {
    fontSize: 14,
    fontFamily: 'Gilroy-Regular',
    color: '#fff',
    marginBottom: 5,
  },
  infoValue: {
    fontSize: 16,
    fontFamily: 'Gilroy-Bold',
    color: '#fff',
  },
  goalsContainer: {
    gap: 10,
  },
  goalLink: {
    flexDirection: 'row',
    alignItems: 'center',
    padding: 10,
    backgroundColor: 'rgba(255, 255, 255, 0.03)',
    borderRadius: 8,
    borderWidth: 1,
    borderColor: 'rgba(255, 255, 255, 0.05)',
  },
  goalLinkText: {
    fontSize: 14,
    fontFamily: 'Gilroy-Regular',
    color: '#fff',
    marginLeft: 10,
    flex: 1,
  },
  friendsGrid: {
    flexDirection: 'row',
    flexWrap: 'wrap',
    gap: 15,
  },
  friendItem: {
    width: '30%',
    alignItems: 'center',
    backgroundColor: 'rgba(255, 255, 255, 0.03)',
    borderRadius: 12,
    padding: 10,
    borderWidth: 1,
    borderColor: 'rgba(255, 255, 255, 0.05)',
  },
  friendAvatar: {
    width: 50,
    height: 50,
    borderRadius: 25,
    marginBottom: 8,
  },
  friendName: {
    fontSize: 12,
    fontFamily: 'Gilroy-Bold',
    color: '#fff',
    textAlign: 'center',
    marginBottom: 2,
  },
  friendTeam: {
    fontSize: 10,
    fontFamily: 'Gilroy-Regular',
    color: '#fff',
    textAlign: 'center',
  },
  friendsContainer: {
    alignItems: 'center',
    padding: 20,
  },
  // –°—Ç–∏–ª–∏ –¥–ª—è —Å–µ–∫—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ –¥—Ä—É–∂–±—ã
  friendRequestSection: {
    backgroundColor: 'rgba(0, 0, 0, 0.8)',
    borderRadius: 15,
    padding: 20,
    marginBottom: 20,
    borderWidth: 1,
    borderColor: '#FF4444',
    shadowColor: '#000',
    shadowOffset: {
      width: 0,
      height: 2,
    },
    shadowOpacity: 0.25,
    shadowRadius: 3.84,
    elevation: 5,
  },
  friendRequestHeader: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: 10,
  },
  friendRequestTitle: {
    fontSize: 18,
    fontFamily: 'Gilroy-Bold',
    color: '#FFD700',
    marginLeft: 10,
  },
  friendRequestMessage: {
    fontSize: 14,
    fontFamily: 'Gilroy-Regular',
    color: '#fff',
    marginBottom: 15,
    textAlign: 'center',
  },
  friendRequestButtons: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    gap: 15,
  },
  friendRequestButton: {
    flex: 1,
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    paddingVertical: 12,
    paddingHorizontal: 20,
    borderRadius: 25,
    borderWidth: 2,
    shadowColor: '#000',
    shadowOffset: {
      width: 0,
      height: 2,
    },
    shadowOpacity: 0.25,
    shadowRadius: 3.84,
    elevation: 5,
  },
  friendRequestButtonText: {
    fontSize: 14,
    fontFamily: 'Gilroy-Bold',
    color: '#fff',
    marginLeft: 8,
  },
  noDataText: {
    fontSize: 16,
    fontFamily: 'Gilroy-Regular',
    color: '#888',
    textAlign: 'center',
  },
  noDataSubtext: {
    fontSize: 14,
    fontFamily: 'Gilroy-Regular',
    color: '#666',
    textAlign: 'center',
    marginTop: 5,
  },

  videoModalOverlay: {
    flex: 1,
    backgroundColor: 'rgba(0, 0, 0, 0.9)',
    justifyContent: 'center',
    alignItems: 'center',
  },
  videoModalContainer: {
    width: '90%',
    height: '80%',
    borderRadius: 12,
    overflow: 'hidden',
  },
  videoModalCloseButton: {
    position: 'absolute',
    top: 20,
    right: 20,
    zIndex: 1,
  },
  lockedSectionContainer: {
    alignItems: 'center',
    padding: 30,
    backgroundColor: 'rgba(0, 0, 0, 0.8)',
    borderRadius: 12,
    borderWidth: 1,
    borderColor: 'rgba(255, 68, 68, 0.3)',
  },
  lockedSectionTitle: {
    fontSize: 18,
    fontFamily: 'Gilroy-Bold',
    color: '#FF4444',
    marginTop: 15,
    marginBottom: 8,
  },
  lockedSectionText: {
    fontSize: 14,
    fontFamily: 'Gilroy-Regular',
    color: '#ccc',
    textAlign: 'center',
    lineHeight: 20,
  },
  editButton: {
    marginLeft: 10,
  },
  editInput: {
    backgroundColor: 'rgba(255, 255, 255, 0.1)',
    borderRadius: 8,
    paddingHorizontal: 12,
    paddingVertical: 8,
    fontSize: 16,
    fontFamily: 'Gilroy-Regular',
    color: '#fff',
    borderWidth: 1,
    borderColor: 'rgba(255, 255, 255, 0.2)',
    minHeight: 40,
  },
  pickerButton: {
    backgroundColor: 'rgba(255, 255, 255, 0.1)',
    borderRadius: 8,
    paddingHorizontal: 12,
    paddingVertical: 8,
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    borderWidth: 1,
    borderColor: 'rgba(255, 255, 255, 0.2)',
    minHeight: 40,
  },
  pickerButtonText: {
    fontSize: 16,
    fontFamily: 'Gilroy-Regular',
    color: '#fff',
  },
  dateInputContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: 'rgba(255, 255, 255, 0.1)',
    borderRadius: 8,
    paddingHorizontal: 12,
    paddingVertical: 8,
    borderWidth: 1,
    borderColor: 'rgba(255, 255, 255, 0.2)',
    minHeight: 40,
  },
  dateInput: {
    flex: 1,
    fontSize: 16,
    fontFamily: 'Gilroy-Regular',
    color: '#fff',
  },
  dateInputIcon: {
    marginLeft: 8,
  },
  videoFieldContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: 10,
    gap: 10,
  },
  videoUrlInput: {
    flex: 1,
    backgroundColor: 'rgba(255, 255, 255, 0.1)',
    borderRadius: 8,
    paddingHorizontal: 12,
    paddingVertical: 8,
    fontSize: 16,
    fontFamily: 'Gilroy-Regular',
    color: '#fff',
    borderWidth: 1,
    borderColor: 'rgba(255, 255, 255, 0.2)',
    minHeight: 40,
  },
  timeCodeInput: {
    width: 80,
    backgroundColor: 'rgba(255, 255, 255, 0.1)',
    borderRadius: 8,
    paddingHorizontal: 12,
    paddingVertical: 8,
    fontSize: 16,
    fontFamily: 'Gilroy-Regular',
    color: '#fff',
    borderWidth: 1,
    borderColor: 'rgba(255, 255, 255, 0.2)',
    minHeight: 40,
    textAlign: 'center',
  },
  removeVideoButton: {
    padding: 4,
  },
  addMoreButton: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    paddingVertical: 12,
    marginTop: 10,
  },
  addMoreButtonText: {
    fontSize: 16,
    fontFamily: 'Gilroy-Regular',
    color: '#FF4444',
    marginLeft: 8,
  },
  addPhotoButton: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    paddingVertical: 12,
    marginBottom: 15,
  },
  addPhotoButtonText: {
    fontSize: 16,
    fontFamily: 'Gilroy-Regular',
    color: '#FF4444',
    marginLeft: 8,
  },
  galleryContainer: {
    marginTop: 15,
  },
  galleryTitle: {
    fontSize: 16,
    fontFamily: 'Gilroy-Bold',
    color: '#fff',
    marginBottom: 10,
  },
  galleryGrid: {
    flexDirection: 'row',
    flexWrap: 'wrap',
    gap: 10,
  },
  galleryItem: {
    position: 'relative',
    width: 80,
    height: 80,
    borderWidth: 2,
    borderColor: '#FF4444',
    borderRadius: 8,
  },
  galleryImage: {
    width: '100%',
    height: '100%',
    borderRadius: 8,
    backgroundColor: 'rgba(0, 0, 0, 0.3)',
  },
  removePhotoButton: {
    position: 'absolute',
    top: -8,
    right: -8,
    backgroundColor: '#fff',
    borderRadius: 12,
  },
  deleteButton: {
    backgroundColor: '#FF4444', // –ö—Ä–∞—Å–Ω—ã–π —Ü–≤–µ—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    borderColor: '#CC0000',
  },
  modalOverlay: {
    position: 'absolute',
    top: 0,
    left: 0,
    right: 0,
    bottom: 0,
    backgroundColor: 'rgba(0, 0, 0, 0.8)',
    justifyContent: 'center',
    alignItems: 'center',
    zIndex: 1000,
  },
  modalContainer: {
    backgroundColor: '#1a1a1a',
    borderRadius: 15,
    padding: 20,
    width: '80%',
    maxHeight: '70%',
    borderWidth: 1,
    borderColor: 'rgba(255, 255, 255, 0.1)',
  },
  modalTitle: {
    fontSize: 18,
    fontFamily: 'Gilroy-Bold',
    color: '#fff',
    textAlign: 'center',
    marginBottom: 20,
  },
  modalScroll: {
    maxHeight: 300,
  },
  modalOption: {
    paddingVertical: 15,
    paddingHorizontal: 20,
    borderBottomWidth: 1,
    borderBottomColor: 'rgba(255, 255, 255, 0.1)',
  },
  modalOptionText: {
    fontSize: 16,
    fontFamily: 'Gilroy-Regular',
    color: '#fff',
    textAlign: 'center',
  },
  teamsSection: {
    backgroundColor: 'rgba(0, 0, 0, 0.9)',
    borderRadius: 15,
    padding: 20,
    marginBottom: 20,
    borderWidth: 1,
    borderColor: 'rgba(255, 255, 255, 0.1)',
    shadowColor: '#000',
    shadowOffset: {
      width: 0,
      height: 2,
    },
    shadowOpacity: 0.25,
    shadowRadius: 3.84,
    elevation: 5,
  },
  modalCancelButton: {
    marginTop: 20,
    paddingVertical: 15,
    backgroundColor: '#FF4444',
    borderRadius: 8,
    alignItems: 'center',
  },
  modalCancelButtonText: {
    fontSize: 16,
    fontFamily: 'Gilroy-Bold',
    color: '#fff',
  },
  subsectionTitle: {
    fontSize: 14,
    fontFamily: 'Gilroy-Regular',
    color: '#fff',
    marginBottom: 8,
    marginTop: 8,
  },
  // –°—Ç–∏–ª–∏ –¥–ª—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –∫–æ–º–∞–Ω–¥ –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  teamsSubsection: {
    marginBottom: 15,
  },
  teamsListContainer: {
    marginBottom: 10,
  },
  teamItem: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: 4,
  },
  rotatedStar: {
    transform: [{ rotate: '20deg' }],
  },
  teamsListText: {
    fontSize: 14,
    fontFamily: 'Gilroy-Bold',
    color: '#fff',
    lineHeight: 18,
    marginLeft: 8,
  },
  teamsSectionTitle: {
    fontSize: 20,
    fontFamily: 'Gilroy-Bold',
    color: '#FF4444',
    marginBottom: 5,
  },
  editOverlay: {
    position: 'absolute',
    top: 0,
    left: 0,
    right: 0,
    bottom: 0,
    backgroundColor: 'rgba(0,0,0,0.5)',
    justifyContent: 'center',
    alignItems: 'center',
    borderRadius: 60,
  },
  addTeamButton: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    paddingVertical: 12,
    marginTop: 10,
    marginBottom: 15,
  },
  addTeamButtonText: {
    fontSize: 16,
    fontFamily: 'Gilroy-Regular',
    color: '#FF4444',
    marginLeft: 8,
  },
  datePickerModal: {
    backgroundColor: '#000',
    borderRadius: 15,
    padding: 20,
    borderWidth: 1,
    borderColor: 'rgba(255, 255, 255, 0.2)',
    minWidth: 300,
  },
  datePickerButtons: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    marginTop: 15,
    gap: 10,
  },
  datePickerButton: {
    flex: 1,
    backgroundColor: 'rgba(255, 255, 255, 0.1)',
    borderRadius: 8,
    padding: 12,
    alignItems: 'center',
    borderWidth: 1,
    borderColor: 'rgba(255, 255, 255, 0.2)',
  },
  confirmButton: {
    backgroundColor: '#FF4444',
    borderColor: '#FF4444',
  },
  datePickerButtonText: {
    fontSize: 14,
    fontFamily: 'Gilroy-Bold',
    color: '#fff',
  },


}); 