import { Ionicons } from '@expo/vector-icons';
import { useFocusEffect, useRouter } from 'expo-router';
import React, { useCallback, useEffect, useState } from 'react';
import {
  ImageBackground,
  Modal,
  ScrollView,
  StyleSheet,
  Text,
  TouchableOpacity,
  View
} from 'react-native';
import { loadCurrentUser, Player } from '../utils/playerStorage';

const iceBg = require('../assets/images/led.jpg');

interface Country {
  id: string;
  name: string;
  flag: string;
  iceType: string;
  description: string;
}

const countries: Country[] = [
  { id: 'russia', name: '–†–æ—Å—Å–∏—è', flag: 'üá∑üá∫', iceType: '–†—É—Å—Å–∫–∏–π –ª–µ–¥', description: '–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π —Ä–æ—Å—Å–∏–π—Å–∫–∏–π —Ö–æ–∫–∫–µ–π–Ω—ã–π –ª–µ–¥ —Å —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω–æ–π —Ä–∞–∑–º–µ—Ç–∫–æ–π' },
  { id: 'usa', name: '–°–®–ê', flag: 'üá∫üá∏', iceType: '–ê–º–µ—Ä–∏–∫–∞–Ω—Å–∫–∏–π –ª–µ–¥', description: '–õ–µ–¥ –≤ —Å—Ç–∏–ª–µ NHL —Å –∞–º–µ—Ä–∏–∫–∞–Ω—Å–∫–æ–π —Ä–∞–∑–º–µ—Ç–∫–æ–π –∏ —Ä–∞–∑–º–µ—Ä–∞–º–∏' },
  { id: 'canada', name: '–ö–∞–Ω–∞–¥–∞', flag: 'üá®üá¶', iceType: '–ö–∞–Ω–∞–¥—Å–∫–∏–π –ª–µ–¥', description: '–ê—É—Ç–µ–Ω—Ç–∏—á–Ω—ã–π –∫–∞–Ω–∞–¥—Å–∫–∏–π —Ö–æ–∫–∫–µ–π–Ω—ã–π –ª–µ–¥ - —Ä–æ–¥–∏–Ω–∞ —Ö–æ–∫–∫–µ—è' },
  { id: 'sweden', name: '–®–≤–µ—Ü–∏—è', flag: 'üá∏üá™', iceType: '–®–≤–µ–¥—Å–∫–∏–π –ª–µ–¥', description: '–ï–≤—Ä–æ–ø–µ–π—Å–∫–∏–π –ª–µ–¥ —Å–æ —à–≤–µ–¥—Å–∫–∏–º–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º–∏ –∫–∞—á–µ—Å—Ç–≤–∞' },
  { id: 'finland', name: '–§–∏–Ω–ª—è–Ω–¥–∏—è', flag: 'üá´üáÆ', iceType: '–§–∏–Ω—Å–∫–∏–π –ª–µ–¥', description: '–°–∫–∞–Ω–¥–∏–Ω–∞–≤—Å–∫–∏–π –ª–µ–¥ —Å —Ñ–∏–Ω—Å–∫–∏–º–∏ —Ç—Ä–∞–¥–∏—Ü–∏—è–º–∏' },
  { id: 'czech', name: '–ß–µ—Ö–∏—è', flag: 'üá®üáø', iceType: '–ß–µ—à—Å–∫–∏–π –ª–µ–¥', description: '–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–µ–≤—Ä–æ–ø–µ–π—Å–∫–∏–π –ª–µ–¥ —Å —á–µ—à—Å–∫–æ–π —à–∫–æ–ª–æ–π —Ö–æ–∫–∫–µ—è' },
  { id: 'belarus', name: '–ë–µ–ª–∞—Ä—É—Å—å', flag: 'üáßüáæ', iceType: '–ë–µ–ª–æ—Ä—É—Å—Å–∫–∏–π –ª–µ–¥', description: '–õ–µ–¥ –≤ —Å—Ç–∏–ª–µ –±–µ–ª–æ—Ä—É—Å—Å–∫–æ–≥–æ —Ö–æ–∫–∫–µ—è' },
  { id: 'ukraine', name: '–£–∫—Ä–∞–∏–Ω–∞', flag: 'üá∫üá¶', iceType: '–£–∫—Ä–∞–∏–Ω—Å–∫–∏–π –ª–µ–¥', description: '–õ–µ–¥ —É–∫—Ä–∞–∏–Ω—Å–∫–æ–π —Ö–æ–∫–∫–µ–π–Ω–æ–π —à–∫–æ–ª—ã' }
];

export default function CountryScreen() {
  const router = useRouter();
  const [currentUser, setCurrentUser] = useState<Player | null>(null);
  const [selectedCountry, setSelectedCountry] = useState<string | null>(null);
  const [showDropdown, setShowDropdown] = useState(false);

  useEffect(() => { loadUserData(); }, []);
  useFocusEffect(useCallback(() => { loadUserData(); }, []));

  const loadUserData = async () => {
    try {
      const user = await loadCurrentUser();
      if (user) {
        setCurrentUser(user);
        if (user.country) {
          const userCountry = countries.find(c => c.name.toLowerCase() === user.country?.toLowerCase());
          if (userCountry) { setSelectedCountry(userCountry.id); }
        }
      }
    } catch (error) { console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error); }
  };

  const handleCountrySelect = (country: Country) => {
    setSelectedCountry(country.id);
    setShowDropdown(false);
    // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∏–≥—Ä–æ–∫–æ–≤ –Ω–∞ –ª—å–¥—É
    console.log(`–í—ã–±—Ä–∞–Ω–∞ —Å—Ç—Ä–∞–Ω–∞: ${country.name}`);
  };

  const getCurrentCountry = () => { return countries.find(c => c.id === selectedCountry); };

  return (
    <View style={styles.container}>
      <ImageBackground source={iceBg} style={styles.background} resizeMode="cover">
        <View style={styles.overlay}>
          <View style={styles.header}>
            <Text style={styles.title}>–í—ã–±–æ—Ä —Å—Ç—Ä–∞–Ω—ã</Text>
            <Text style={styles.subtitle}>
              {selectedCountry ? `–¢–µ–∫—É—â–∏–π –ª–µ–¥: ${getCurrentCountry()?.iceType}` : '–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ª—å–¥–∞'}
            </Text>
          </View>

          {/* –í—ã–ø–∞–¥–∞—é—â–µ–µ –º–µ–Ω—é —Å —Ñ–ª–∞–∂–∫–∞–º–∏ */}
          <View style={styles.countrySelector}>
            <TouchableOpacity
              style={styles.selectorButton}
              onPress={() => setShowDropdown(!showDropdown)}
              activeOpacity={0.7}
            >
              <Text style={styles.selectorText}>
                {selectedCountry ? getCurrentCountry()?.flag : 'üèí'}
              </Text>
              <Ionicons 
                name={showDropdown ? "chevron-up" : "chevron-down"} 
                size={20} 
                color="#fff" 
              />
            </TouchableOpacity>

            <Modal
              visible={showDropdown}
              transparent={true}
              animationType="fade"
              onRequestClose={() => setShowDropdown(false)}
            >
              <TouchableOpacity
                style={styles.modalOverlay}
                activeOpacity={1}
                onPress={() => setShowDropdown(false)}
              >
                <View style={styles.dropdownContainer}>
                  <ScrollView style={styles.dropdownScroll} showsVerticalScrollIndicator={false}>
                    {countries.map((country) => (
                      <TouchableOpacity
                        key={country.id}
                        style={styles.flagItem}
                        onPress={() => handleCountrySelect(country)}
                        activeOpacity={0.7}
                      >
                        <Text style={styles.flagText}>{country.flag}</Text>
                      </TouchableOpacity>
                    ))}
                  </ScrollView>
                </View>
              </TouchableOpacity>
            </Modal>
          </View>

          {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–µ */}
          {selectedCountry && (
            <View style={styles.countryInfo}>
              <Text style={styles.countryName}>{getCurrentCountry()?.name}</Text>
              <Text style={styles.iceType}>{getCurrentCountry()?.iceType}</Text>
              <Text style={styles.description}>{getCurrentCountry()?.description}</Text>
            </View>
          )}

          {/* –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –±—É–¥—É—â–µ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–≥—Ä–æ–∫–æ–≤ */}
          <View style={styles.playersPlaceholder}>
            <Text style={styles.placeholderText}>
              {selectedCountry 
                ? `–ó–¥–µ—Å—å –±—É–¥—É—Ç –ø–æ–∫–∞–∑–∞–Ω—ã –∏–≥—Ä–æ–∫–∏ –∏–∑ ${getCurrentCountry()?.name}` 
                : '–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –∏–≥—Ä–æ–∫–æ–≤ –Ω–∞ –ª—å–¥—É'
              }
            </Text>
          </View>
        </View>
      </ImageBackground>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
  },
  background: {
    flex: 1,
  },
  overlay: {
    flex: 1,
    backgroundColor: 'rgba(0, 0, 0, 0.3)',
    padding: 20,
  },
  header: {
    alignItems: 'center',
    marginBottom: 30,
  },
  title: {
    fontSize: 28,
    fontWeight: 'bold',
    color: '#fff',
    marginBottom: 10,
    textAlign: 'center',
  },
  subtitle: {
    fontSize: 16,
    color: '#fff',
    textAlign: 'center',
    opacity: 0.9,
  },
  countrySelector: {
    alignItems: 'center',
    marginBottom: 30,
  },
  selectorButton: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: 'rgba(255, 255, 255, 0.2)',
    paddingHorizontal: 20,
    paddingVertical: 15,
    borderRadius: 25,
    borderWidth: 2,
    borderColor: 'rgba(255, 255, 255, 0.3)',
  },
  selectorText: {
    fontSize: 32,
    marginRight: 10,
  },
  modalOverlay: {
    flex: 1,
    backgroundColor: 'rgba(0, 0, 0, 0.5)',
    justifyContent: 'center',
    alignItems: 'center',
  },
  dropdownContainer: {
    backgroundColor: 'rgba(0, 0, 0, 0.9)',
    borderRadius: 15,
    padding: 20,
    maxHeight: 400,
    borderWidth: 2,
    borderColor: 'rgba(255, 255, 255, 0.3)',
  },
  dropdownScroll: {
    maxHeight: 300,
  },
  flagItem: {
    paddingVertical: 15,
    paddingHorizontal: 20,
    borderBottomWidth: 1,
    borderBottomColor: 'rgba(255, 255, 255, 0.1)',
  },
  flagText: {
    fontSize: 40,
    textAlign: 'center',
  },
  countryInfo: {
    backgroundColor: 'rgba(255, 255, 255, 0.1)',
    padding: 20,
    borderRadius: 15,
    marginBottom: 30,
    alignItems: 'center',
  },
  countryName: {
    fontSize: 24,
    fontWeight: 'bold',
    color: '#fff',
    marginBottom: 10,
  },
  iceType: {
    fontSize: 18,
    color: '#fff',
    marginBottom: 10,
    opacity: 0.9,
  },
  description: {
    fontSize: 14,
    color: '#fff',
    textAlign: 'center',
    opacity: 0.8,
    lineHeight: 20,
  },
  playersPlaceholder: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: 'rgba(255, 255, 255, 0.1)',
    borderRadius: 15,
    padding: 20,
  },
  placeholderText: {
    fontSize: 16,
    color: '#fff',
    textAlign: 'center',
    opacity: 0.8,
  },
});
