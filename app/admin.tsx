import React, { useState, useEffect } from 'react';
import {
  View,
  Text,
  StyleSheet,
  ScrollView,
  TouchableOpacity,
  TextInput,
  Alert,
  Image,
  Modal,
  FlatList,
  Platform
} from 'react-native';
import { useRouter } from 'expo-router';
import { Ionicons } from '@expo/vector-icons';
import * as ImagePicker from 'expo-image-picker';
import DateTimePicker from '@react-native-community/datetimepicker';
import { Player, loadPlayers, updatePlayer, loadCurrentUser } from '../utils/playerStorage';

const logo = require('../assets/images/logo.png');

const AdminHeader = () => {
  const router = useRouter();
  const [currentUser, setCurrentUser] = useState<Player | null>(null);

  const loadUser = async () => {
    try {
      const user = await loadCurrentUser();
      setCurrentUser(user);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
      setCurrentUser(null);
    }
  };

  useEffect(() => {
    loadUser();
  }, []);

  const handleProfilePress = () => {
    try {
      if (currentUser) {
        router.push('/profile');
      } else {
        router.push('/login');
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∫ –ø—Ä–æ—Ñ–∏–ª—é:', error);
      Alert.alert('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–π—Ç–∏ –∫ –ø—Ä–æ—Ñ–∏–ª—é');
    }
  };

  return (
    <View style={styles.adminHeader}>
      <TouchableOpacity 
        style={styles.backButton}
        onPress={() => router.back()}
      >
        <Ionicons name="arrow-back" size={24} color="#fff" />
      </TouchableOpacity>
      
      <Image source={logo} style={styles.logo} />
      
      <TouchableOpacity 
        style={styles.profileButton}
        onPress={handleProfilePress}
      >
        <View style={styles.profileIcon}>
          {currentUser?.photo || currentUser?.avatar ? (
            <Image
              source={
                (currentUser.photo && typeof currentUser.photo === 'string' && (
                  currentUser.photo.startsWith('data:image/') || 
                  currentUser.photo.startsWith('http') || 
                  currentUser.photo.startsWith('file://') || 
                  currentUser.photo.startsWith('content://')
                )) || (currentUser.avatar && typeof currentUser.avatar === 'string' && (
                  currentUser.avatar.startsWith('data:image/') || 
                  currentUser.avatar.startsWith('http') || 
                  currentUser.avatar.startsWith('file://') || 
                  currentUser.avatar.startsWith('content://')
                ))
                  ? { uri: currentUser.photo || currentUser.avatar }
                  : require('../assets/images/me.jpg')
              }
              style={styles.profileImage}
              onError={() => console.log('Profile image failed to load')}
            />
          ) : (
            <Ionicons name="person" size={25} color="#fff" />
          )}
        </View>
      </TouchableOpacity>
    </View>
  );
};

export default function AdminScreen() {
  const router = useRouter();
  const [players, setPlayers] = useState<Player[]>([]);
  const [searchQuery, setSearchQuery] = useState('');
  const [currentUser, setCurrentUser] = useState<Player | null>(null);
  const [showPlayerModal, setShowPlayerModal] = useState(false);
  const [selectedPlayer, setSelectedPlayer] = useState<Player | null>(null);
  const [isEditing, setIsEditing] = useState(false);
  const [editData, setEditData] = useState<Partial<Player>>({});
  const [refreshKey, setRefreshKey] = useState(0); // –î–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è FlatList
  
  // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–π
  const [showBirthDatePicker, setShowBirthDatePicker] = useState(false);
  const [selectedDate, setSelectedDate] = useState(new Date());
  const [datePickerMode, setDatePickerMode] = useState<'birthDate'>('birthDate');

  useEffect(() => {
    loadData();
    console.log('üîß –≠–∫—Ä–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∑–∞–≥—Ä—É–∂–µ–Ω');
  }, []);

  const loadData = async () => {
    try {
      console.log('üîß –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞...');
      const [loadedPlayers, user] = await Promise.all([
        loadPlayers(),
        loadCurrentUser()
      ]);
      console.log('üîß –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∏–≥—Ä–æ–∫–æ–≤:', loadedPlayers.length);
      console.log('üîß –¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', user?.name, '—Å—Ç–∞—Ç—É—Å:', user?.status);
      
      setPlayers(loadedPlayers);
      setCurrentUser(user);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
      if (user?.status !== 'admin') {
        console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º:', user?.status);
        Alert.alert('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω', '–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é');
        router.back();
      } else {
        console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º');
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
    }
  };

  const filteredPlayers = players.filter(player => 
    player.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
    player.team?.toLowerCase().includes(searchQuery.toLowerCase()) ||
    player.status?.toLowerCase().includes(searchQuery.toLowerCase())
  );

  // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–∞–ª–µ–Ω–¥–∞—Ä—è–º–∏
  const formatDate = (date: Date): string => {
    const day = date.getDate().toString().padStart(2, '0');
    const month = (date.getMonth() + 1).toString().padStart(2, '0');
    const year = date.getFullYear();
    return `${day}.${month}.${year}`;
  };

  const parseDate = (dateString: string): Date => {
    if (!dateString) return new Date();
    const parts = dateString.split('.');
    if (parts.length === 3) {
      const day = parseInt(parts[0]);
      const month = parseInt(parts[1]) - 1;
      const year = parseInt(parts[2]);
      return new Date(year, month, day);
    }
    return new Date();
  };

  const showDatePicker = (mode: 'birthDate') => {
    console.log('üìÖ showDatePicker –≤—ã–∑–≤–∞–Ω —Å —Ä–µ–∂–∏–º–æ–º:', mode);
    console.log('üìÖ –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è:', editData.birthDate);
    const currentDate = parseDate(editData.birthDate || '');
    console.log('üìÖ –ü–∞—Ä—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –¥–∞—Ç–∞:', currentDate);
    setSelectedDate(currentDate);
    setShowBirthDatePicker(true);
    console.log('üìÖ showBirthDatePicker —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ true');
  };

  const handleDateChange = (event: any, date?: Date) => {
    console.log('üìÖ handleDateChange –≤—ã–∑–≤–∞–Ω:', { event: event.type, date });
    
    if (Platform.OS === 'ios') {
      // –ù–∞ iOS –∫–∞–ª–µ–Ω–¥–∞—Ä—å –Ω–µ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
      if (date) {
        console.log('üìÖ iOS: –æ–±–Ω–æ–≤–ª—è–µ–º selectedDate');
        setSelectedDate(date);
      }
    } else {
      // –ù–∞ Android –∫–∞–ª–µ–Ω–¥–∞—Ä—å –∑–∞–∫—Ä—ã–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–æ–ª–Ω–æ–º –≤—ã–±–æ—Ä–µ
      if (event.type === 'set' && date) {
        console.log('üìÖ Android: —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞—Ç—É –∏ –∑–∞–∫—Ä—ã–≤–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å');
        setShowBirthDatePicker(false);
        setSelectedDate(date);
        const day = date.getDate().toString().padStart(2, '0');
        const month = (date.getMonth() + 1).toString().padStart(2, '0');
        const year = date.getFullYear().toString();
        const formattedDate = `${day}.${month}.${year}`;
        console.log('üìÖ Android: —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –¥–∞—Ç–∞:', formattedDate);
        setEditData(prev => ({ ...prev, birthDate: formattedDate }));
      } else if (event.type === 'dismissed') {
        console.log('üìÖ Android: –∫–∞–ª–µ–Ω–¥–∞—Ä—å –æ—Ç–º–µ–Ω–µ–Ω');
        setShowBirthDatePicker(false);
      }
    }
  };

  const handleEditPlayer = (player: Player) => {
    console.log('üîß –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –∏–≥—Ä–æ–∫–∞:', player.name, '—Å—Ç–∞—Ç—É—Å:', player.status);
    setSelectedPlayer(player);
    setEditData({
      name: player.name || '',
      position: player.position || '',
      team: player.team || '',
      age: player.age || 0,
      height: player.height || '',
      weight: player.weight || '',
      city: player.city || '',
      birthDate: player.birthDate || '',
      hockeyStartDate: player.hockeyStartDate || '',
      phone: player.phone || '',
      experience: player.experience || '',
      achievements: player.achievements || '',
      goals: player.goals || '',
      assists: player.assists || '',
      games: player.games || '',
      pullUps: player.pullUps || '',
      pushUps: player.pushUps || '',
      plankTime: player.plankTime || '',
      sprint100m: player.sprint100m || '',
      longJump: player.longJump || '',
      status: player.status || 'player',
      photo: player.photo || '',
      avatar: player.avatar || ''
    });
    setIsEditing(true);
    setShowPlayerModal(true);
  };

  const pickImage = async () => {
    console.log('üì∏ –í—ã–∑—ã–≤–∞–µ—Ç—Å—è pickImage()');
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–µ –æ–∫–Ω–æ –≤—ã–±–æ—Ä–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ —Ñ–æ—Ç–æ
    Alert.alert(
      '–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫ —Ñ–æ—Ç–æ',
      '–û—Ç–∫—É–¥–∞ —Ö–æ—Ç–∏—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ?',
      [
        {
          text: '–ì–∞–ª–µ—Ä–µ—è',
          onPress: () => pickFromGallery()
        },
        {
          text: '–ö–∞–º–µ—Ä–∞',
          onPress: () => takePhoto()
        },
        {
          text: '–û—Ç–º–µ–Ω–∞',
          style: 'cancel'
        }
      ]
    );
  };

  const pickFromGallery = async () => {
    try {
      if (Platform.OS === 'web') {
        console.log('üåê –í–µ–±-–≤–µ—Ä—Å–∏—è: —Å–æ–∑–¥–∞–µ–º input –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞');
        // –î–ª—è –≤–µ–±-–≤–µ—Ä—Å–∏–∏ —Å–æ–∑–¥–∞–µ–º input –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞
        const input = document.createElement('input');
        input.type = 'file';
        input.accept = 'image/*';
        input.onchange = async (event) => {
          const file = (event.target as HTMLInputElement).files?.[0];
          if (file) {
            try {
              // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ñ–∞–π–ª –≤ base64 –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
              const reader = new FileReader();
              reader.onload = async (e) => {
                const base64String = e.target?.result as string;
                console.log('üì∏ –í–µ–±: –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –≤ base64, –¥–ª–∏–Ω–∞:', base64String.length);
                
                const newEditData = {
                  ...editData,
                  photo: base64String,
                  avatar: base64String
                };
                
                console.log('üì∏ –í–µ–±: –æ–±–Ω–æ–≤–ª—è–µ–º editData —Å base64');
                setEditData(newEditData);
                
                // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
                if (selectedPlayer) {
                  try {
                    console.log('üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–æ—Ç–æ –¥–ª—è:', selectedPlayer.name);
                    await updatePlayer(selectedPlayer.id, newEditData);
                    console.log('‚úÖ –§–æ—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ');
                    
                    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤
                    const updatedPlayers = await loadPlayers();
                    setPlayers(updatedPlayers);
                    
                    // –û–±–Ω–æ–≤–ª—è–µ–º selectedPlayer —Å –Ω–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
                    const updatedPlayer = updatedPlayers.find(p => p.id === selectedPlayer.id);
                    if (updatedPlayer) {
                      setSelectedPlayer(updatedPlayer);
                      setEditData(updatedPlayer);
                    }
                    
                    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º FlatList
                    setRefreshKey(prev => prev + 1);
                    
                    Alert.alert('–£—Å–ø–µ—à–Ω–æ', '–§–æ—Ç–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ');
                  } catch (error) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', error);
                    Alert.alert('–û—à–∏–±–∫–∞', '–§–æ—Ç–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å');
                  }
                }
              };
              reader.readAsDataURL(file);
            } catch (error) {
              console.error('‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —Ñ–∞–π–ª–∞:', error);
              Alert.alert('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–∞–π–ª');
            }
          }
        };
        input.click();
        return;
      }

      const { status } = await ImagePicker.requestMediaLibraryPermissionsAsync();
      if (status !== 'granted') {
        Alert.alert('–û—à–∏–±–∫–∞', '–ù—É–∂–Ω–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –≥–∞–ª–µ—Ä–µ–µ');
        return;
      }

      const result = await ImagePicker.launchImageLibraryAsync({
        mediaTypes: ImagePicker.MediaTypeOptions.Images,
        allowsEditing: true,
        aspect: [1, 1],
        quality: 0.8,
      });

      console.log('üì∏ –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–±–æ—Ä–∞ –∏–∑ –≥–∞–ª–µ—Ä–µ–∏:', JSON.stringify(result));

      if (result.canceled) {
        console.log('üì∏ –í—ã–±–æ—Ä —Ñ–æ—Ç–æ –æ—Ç–º–µ–Ω–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º');
        return;
      }
      if (!result.assets || !result.assets[0] || !result.assets[0].uri) {
        console.error('‚ùå –ù–µ—Ç uri –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –≤—ã–±–æ—Ä–∞ –∏–∑ –≥–∞–ª–µ—Ä–µ–∏:', result.assets);
        Alert.alert('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–æ—Ç–æ –∏–∑ –≥–∞–ª–µ—Ä–µ–∏.');
        return;
      }

      const photoUri = result.assets[0].uri;
      console.log('üì∏ –ê–¥–º–∏–Ω –∑–∞–≥—Ä—É–∑–∏–ª —Ñ–æ—Ç–æ –∏–∑ –≥–∞–ª–µ—Ä–µ–∏:', photoUri);
      console.log('üì∏ –¢–µ–∫—É—â–∏–π editData –¥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', editData);

      const newEditData = {
        ...editData,
        photo: photoUri,
        avatar: photoUri
      };

      setEditData(newEditData);

      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
      if (selectedPlayer) {
        try {
          await updatePlayer(selectedPlayer.id, newEditData);
          const updatedPlayers = await loadPlayers();
          setPlayers(updatedPlayers);
          const updatedPlayer = updatedPlayers.find(p => p.id === selectedPlayer.id);
          if (updatedPlayer) {
            setSelectedPlayer(updatedPlayer);
            setEditData(updatedPlayer);
          }
          setRefreshKey(prev => prev + 1);
          Alert.alert('–£—Å–ø–µ—à–Ω–æ', '–§–æ—Ç–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ');
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', error);
          Alert.alert('–û—à–∏–±–∫–∞', '–§–æ—Ç–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å');
        }
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ç–æ –∏–∑ –≥–∞–ª–µ—Ä–µ–∏:', error);
      Alert.alert('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ –∏–∑ –≥–∞–ª–µ—Ä–µ–∏.');
    }
  };

  const takePhoto = async () => {
    try {
      if (Platform.OS === 'web') {
        console.log('üåê –í–µ–±-–≤–µ—Ä—Å–∏—è: –∫–∞–º–µ—Ä–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è');
        Alert.alert('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', '–°—ä–µ–º–∫–∞ —Ñ–æ—Ç–æ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤ –≤–µ–±-–≤–µ—Ä—Å–∏–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≥–∞–ª–µ—Ä–µ—é.');
        return;
      }

      const { status } = await ImagePicker.requestCameraPermissionsAsync();
      
      if (status !== 'granted') {
        Alert.alert('–û—à–∏–±–∫–∞', '–ù—É–∂–Ω–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–º–µ—Ä–µ');
        return;
      }

      const result = await ImagePicker.launchCameraAsync({
        mediaTypes: ImagePicker.MediaTypeOptions.Images,
        allowsEditing: true,
        aspect: [1, 1],
        quality: 0.8,
      });

      if (!result.canceled && result.assets[0]) {
        const photoUri = result.assets[0].uri;
        console.log('üì∏ –ê–¥–º–∏–Ω –∑–∞–≥—Ä—É–∑–∏–ª —Ñ–æ—Ç–æ —Å –∫–∞–º–µ—Ä—ã:', photoUri);
        console.log('üì∏ –¢–µ–∫—É—â–∏–π editData –¥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', editData);
        
        const newEditData = {
          ...editData,
          photo: photoUri,
          avatar: photoUri
        };
        
        console.log('üì∏ –ù–æ–≤—ã–π editData –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', newEditData);
        setEditData(newEditData);
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
        if (selectedPlayer) {
          try {
            console.log('üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–æ—Ç–æ –¥–ª—è:', selectedPlayer.name);
            await updatePlayer(selectedPlayer.id, newEditData);
            console.log('‚úÖ –§–æ—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ');
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤
            const updatedPlayers = await loadPlayers();
            setPlayers(updatedPlayers);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º selectedPlayer —Å –Ω–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            const updatedPlayer = updatedPlayers.find(p => p.id === selectedPlayer.id);
            if (updatedPlayer) {
              setSelectedPlayer(updatedPlayer);
              setEditData(updatedPlayer);
            }
            
            // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º FlatList
            setRefreshKey(prev => prev + 1);
            
            Alert.alert('–£—Å–ø–µ—à–Ω–æ', '–§–æ—Ç–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ');
          } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', error);
            Alert.alert('–û—à–∏–±–∫–∞', '–§–æ—Ç–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å');
          }
        }
        
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        setTimeout(() => {
          console.log('üì∏ –ü—Ä–æ–≤–µ—Ä—è–µ–º editData –ø–æ—Å–ª–µ setTimeout:', editData);
        }, 100);
      } else {
        console.log('üì∏ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ —Å –∫–∞–º–µ—Ä—ã –æ—Ç–º–µ–Ω–µ–Ω–∞');
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—ä–µ–º–∫–µ —Ñ–æ—Ç–æ:', error);
      Alert.alert('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–Ω—è—Ç—å —Ñ–æ—Ç–æ');
    }
  };

  const handleSave = async () => {
    if (!selectedPlayer) return;

    try {
      console.log('üîÑ –ê–¥–º–∏–Ω –æ–±–Ω–æ–≤–ª—è–µ—Ç –∏–≥—Ä–æ–∫–∞:', selectedPlayer.name);
      console.log('üì∏ –î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', editData);
      console.log('üì∏ ID –∏–≥—Ä–æ–∫–∞:', selectedPlayer.id);
      console.log('üì∏ –¢–∏–ø —Ñ–æ—Ç–æ:', typeof editData.photo);
      console.log('üì∏ –î–ª–∏–Ω–∞ —Ñ–æ—Ç–æ:', editData.photo?.length || 0);
      
      if (Platform.OS === 'web') {
        console.log('üåê –í–µ–±-–≤–µ—Ä—Å–∏—è: —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ');
      }
      
      await updatePlayer(selectedPlayer.id, editData);
      console.log('‚úÖ –ò–≥—Ä–æ–∫ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤
      const updatedPlayers = await loadPlayers();
      console.log('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤:', updatedPlayers.length);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ—Ö—Ä–∞–Ω–∏–ª–æ—Å—å –ª–∏ —Ñ–æ—Ç–æ
      const updatedPlayer = updatedPlayers.find(p => p.id === selectedPlayer.id);
      if (updatedPlayer) {
        console.log('üì∏ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Ñ–æ—Ç–æ:', {
          hasPhoto: !!updatedPlayer.photo,
          photoLength: updatedPlayer.photo?.length || 0,
          hasAvatar: !!updatedPlayer.avatar,
          avatarLength: updatedPlayer.avatar?.length || 0
        });
      }
      
      setPlayers(updatedPlayers);
      
      // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º FlatList
      setRefreshKey(prev => prev + 1);
      
      setIsEditing(false);
      setShowPlayerModal(false);
      setSelectedPlayer(null);
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
      setTimeout(() => {
        Alert.alert('–£—Å–ø–µ—à–Ω–æ', '–î–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã');
      }, 100);
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', error);
      Alert.alert('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è');
    }
  };

  const getStatusColor = (status: string | undefined) => {
    switch (status) {
      case 'star': return '#FFD700';
      case 'coach': return '#FF4444';
      case 'scout': return '#888888';
      case 'admin': return '#8A2BE2';
      default: return '#FFFFFF';
    }
  };

  const getStatusText = (status: string | undefined) => {
    switch (status) {
      case 'star': return '–ó–≤–µ–∑–¥–∞';
      case 'coach': return '–¢—Ä–µ–Ω–µ—Ä';
      case 'scout': return '–°–∫–∞—É—Ç';
      case 'admin': return '–ê–¥–º–∏–Ω';
      case 'player': return '–ò–≥—Ä–æ–∫';
      default: return '–ò–≥—Ä–æ–∫';
    }
  };

  const renderPlayerItem = ({ item }: { item: Player }) => {
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    const getImageSource = () => {
      if (!item.photo) {
        return require('../assets/images/me.jpg');
      }
      
      if (typeof item.photo === 'string') {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ –ª–∏ base64 —Å—Ç—Ä–æ–∫–∞ (–∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ —Ñ–æ—Ç–æ)
        if (item.photo.startsWith('data:image/')) {
          return { uri: item.photo };
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ –ª–∏ URI (—Ñ–æ—Ç–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º)
        if (item.photo.startsWith('http') || item.photo.startsWith('file://') || item.photo.startsWith('content://')) {
          return { uri: item.photo };
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã —Ç–µ—Å—Ç–æ–≤—ã—Ö –∏–≥—Ä–æ–∫–æ–≤
        if (item.photo.includes('kostitsyn1') || item.photo.includes('kostitsyn2')) {
          return require('../assets/images/me.jpg');
        } else if (item.photo.includes('grabovsky')) {
          return require('../assets/images/me.jpg');
        } else if (item.photo.includes('sharangovich')) {
          return require('../assets/images/me.jpg');
        } else if (item.photo.includes('merkulov1') || item.photo.includes('merkulov2')) {
          return require('../assets/images/me.jpg');
        } else if (item.photo.includes('admin')) {
          return require('../assets/images/me.jpg');
        } else if (item.photo === 'new_player') {
          return require('../assets/images/me.jpg');
        }
      }
      
      return require('../assets/images/me.jpg');
    };

    return (
      <TouchableOpacity 
        style={styles.playerItem} 
        onPress={() => handleEditPlayer(item)}
      >
        <Image 
          source={getImageSource()}
          style={[
            styles.playerAvatar,
            { borderColor: getStatusColor(item.status) }
          ]}
        />
        <View style={styles.playerInfo}>
          <Text style={styles.playerName}>{item.name || '–ë–µ–∑ –∏–º–µ–Ω–∏'}</Text>
          <Text style={styles.playerDetails}>
            {item.position || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'} ‚Ä¢ {item.team || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'} ‚Ä¢ {item.age || 0} –ª–µ—Ç
          </Text>
          <View style={[styles.statusBadge, { backgroundColor: getStatusColor(item.status) }]}>
            <Text style={styles.statusText}>{getStatusText(item.status)}</Text>
          </View>
        </View>
        <Ionicons name="create" size={24} color="#666" />
      </TouchableOpacity>
    );
  };

  if (currentUser?.status !== 'admin') {
    return (
      <View style={styles.container}>
        <Text style={styles.errorText}>–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω</Text>
      </View>
    );
  }

  return (
    <View style={styles.container}>
      <AdminHeader />

      <View style={styles.searchContainer}>
        <Ionicons name="search" size={20} color="#666" style={styles.searchIcon} />
        <TextInput
          style={styles.searchInput}
          placeholder="–ü–æ–∏—Å–∫ –∏–≥—Ä–æ–∫–æ–≤..."
          value={searchQuery}
          onChangeText={setSearchQuery}
          placeholderTextColor="#666"
        />
      </View>

      <FlatList
        data={filteredPlayers}
        renderItem={renderPlayerItem}
        keyExtractor={(item) => item.id}
        style={styles.playerList}
        showsVerticalScrollIndicator={false}
        key={refreshKey} // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏
      />

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–≥—Ä–æ–∫–∞ */}
      <Modal
        visible={showPlayerModal}
        animationType="slide"
        presentationStyle="fullScreen"
        statusBarTranslucent={true}
        onRequestClose={() => setShowPlayerModal(false)}
      >
        <View style={styles.modalContainer}>
          <View style={styles.modalHeader}>
            <TouchableOpacity 
              style={styles.closeButton}
              onPress={() => setShowPlayerModal(false)}
            >
              <Ionicons name="close" size={24} color="#fff" />
            </TouchableOpacity>
            <Text style={styles.modalTitle}>
              {isEditing ? '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ' : '–ü—Ä–æ—Å–º–æ—Ç—Ä'} –∏–≥—Ä–æ–∫–∞
            </Text>
            <TouchableOpacity 
              style={styles.saveButtonContainer}
              onPress={handleSave} 
              disabled={!isEditing}
            >
              <Text style={[styles.saveButton, !isEditing && styles.saveButtonDisabled]}>
                –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
              </Text>
            </TouchableOpacity>
          </View>

          <ScrollView 
            style={styles.modalContent}
            showsVerticalScrollIndicator={true}
            contentContainerStyle={styles.modalContentContainer}
          >
            <View style={styles.photoSection}>
              <TouchableOpacity onPress={() => {
                console.log('üì∏ –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ, isEditing:', isEditing);
                console.log('üì∏ showImagePickerModal –¥–æ –≤—ã–∑–æ–≤–∞ pickImage:', showPlayerModal);
                if (isEditing) {
                  console.log('üì∏ –í—ã–∑—ã–≤–∞–µ–º pickImage()...');
                  pickImage();
                  console.log('üì∏ pickImage() –≤—ã–∑–≤–∞–Ω');
                } else {
                  console.log('‚ùå –†–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω');
                }
              }}>
                <Image 
                  source={
                    editData.photo && typeof editData.photo === 'string' && (
                      editData.photo.startsWith('data:image/') || 
                      editData.photo.startsWith('http') || 
                      editData.photo.startsWith('file://') || 
                      editData.photo.startsWith('content://')
                    )
                      ? { uri: editData.photo }
                      : require('../assets/images/me.jpg')
                  }
                  style={[
                    styles.editPhoto,
                    { borderColor: getStatusColor(editData.status) }
                  ]}
                />
                {isEditing && (
                  <View style={styles.editOverlay}>
                    <Ionicons name="camera" size={24} color="#fff" />
                  </View>
                )}
              </TouchableOpacity>
            </View>

            <View style={styles.formSection}>
              <Text style={styles.sectionTitle}>–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</Text>
              
              <View style={styles.inputGroup}>
                <Text style={styles.inputLabel}>–ò–º—è</Text>
                <TextInput
                  style={[styles.input, !isEditing && styles.inputDisabled]}
                  value={editData.name}
                  onChangeText={(text) => setEditData({...editData, name: text})}
                  editable={isEditing}
                  placeholder="–ò–º—è –∏–≥—Ä–æ–∫–∞"
                />
              </View>

              <View style={styles.inputGroup}>
                <Text style={styles.inputLabel}>–ü–æ–∑–∏—Ü–∏—è</Text>
                <TextInput
                  style={[styles.input, !isEditing && styles.inputDisabled]}
                  value={editData.position}
                  onChangeText={(text) => setEditData({...editData, position: text})}
                  editable={isEditing}
                  placeholder="–ü–æ–∑–∏—Ü–∏—è"
                />
              </View>

              <View style={styles.inputGroup}>
                <Text style={styles.inputLabel}>–ö–æ–º–∞–Ω–¥–∞</Text>
                <TextInput
                  style={[styles.input, !isEditing && styles.inputDisabled]}
                  value={editData.team}
                  onChangeText={(text) => setEditData({...editData, team: text})}
                  editable={isEditing}
                  placeholder="–ö–æ–º–∞–Ω–¥–∞"
                />
              </View>

              {/* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–µ-–∑–≤–µ–∑–¥ */}
              {editData.status !== 'star' && (
                <>
                  <View style={styles.row}>
                    <View style={[styles.inputGroup, { flex: 1, marginRight: 10 }]}>
                      <Text style={styles.inputLabel}>–í–æ–∑—Ä–∞—Å—Ç</Text>
                      <TextInput
                        style={[styles.input, !isEditing && styles.inputDisabled]}
                        value={editData.age?.toString()}
                        onChangeText={(text) => setEditData({...editData, age: parseInt(text) || 0})}
                        editable={isEditing}
                        keyboardType="numeric"
                        placeholder="–í–æ–∑—Ä–∞—Å—Ç"
                      />
                    </View>
                    <View style={[styles.inputGroup, { flex: 1 }]}>
                      <Text style={styles.inputLabel}>–ì–æ—Ä–æ–¥</Text>
                      <TextInput
                        style={[styles.input, !isEditing && styles.inputDisabled]}
                        value={editData.city}
                        onChangeText={(text) => setEditData({...editData, city: text})}
                        editable={isEditing}
                        placeholder="–ì–æ—Ä–æ–¥"
                      />
                    </View>
                  </View>

                  <View style={styles.row}>
                    <View style={[styles.inputGroup, { flex: 1, marginRight: 10 }]}>
                      <Text style={styles.inputLabel}>–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è</Text>
                      <TouchableOpacity
                        style={[styles.dateButton, !isEditing && styles.inputDisabled]}
                        onPress={() => isEditing && showDatePicker('birthDate')}
                        disabled={!isEditing}
                      >
                        <Text style={[styles.dateButtonText, !editData.birthDate && styles.placeholderText]}>
                          {editData.birthDate || '–î–î.–ú–ú.–ì–ì–ì–ì'}
                        </Text>
                        <Ionicons name="calendar" size={20} color="#666" />
                      </TouchableOpacity>
                    </View>
                    <View style={[styles.inputGroup, { flex: 1 }]}>
                      <Text style={styles.inputLabel}>–ù–∞—á–∞–ª –∑–∞–Ω–∏–º–∞—Ç—å—Å—è</Text>
                      <TextInput
                        style={[styles.input, !isEditing && styles.inputDisabled]}
                        value={editData.hockeyStartDate}
                        onChangeText={(text) => setEditData({...editData, hockeyStartDate: text})}
                        editable={isEditing}
                        placeholder="–ú–ú.–ì–ì–ì–ì"
                      />
                    </View>
                  </View>

                  <View style={styles.inputGroup}>
                    <Text style={styles.inputLabel}>–û–ø—ã—Ç</Text>
                    <TextInput
                      style={[styles.input, !isEditing && styles.inputDisabled]}
                      value={editData.experience}
                      onChangeText={(text) => setEditData({...editData, experience: text})}
                      editable={isEditing}
                      placeholder="–û–ø—ã—Ç –≤ —Ö–æ–∫–∫–µ–µ"
                      multiline
                    />
                  </View>

                  <View style={styles.inputGroup}>
                    <Text style={styles.inputLabel}>–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è</Text>
                    <TextInput
                      style={[styles.input, !isEditing && styles.inputDisabled]}
                      value={editData.achievements}
                      onChangeText={(text) => setEditData({...editData, achievements: text})}
                      editable={isEditing}
                      placeholder="–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è"
                      multiline
                    />
                  </View>

                  <View style={styles.row}>
                    <View style={[styles.inputGroup, { flex: 1, marginRight: 10 }]}>
                      <Text style={styles.inputLabel}>–†–æ—Å—Ç</Text>
                      <TextInput
                        style={[styles.input, !isEditing && styles.inputDisabled]}
                        value={editData.height}
                        onChangeText={(text) => setEditData({...editData, height: text})}
                        editable={isEditing}
                        placeholder="–†–æ—Å—Ç"
                      />
                    </View>
                    <View style={[styles.inputGroup, { flex: 1 }]}>
                      <Text style={styles.inputLabel}>–í–µ—Å</Text>
                      <TextInput
                        style={[styles.input, !isEditing && styles.inputDisabled]}
                        value={editData.weight}
                        onChangeText={(text) => setEditData({...editData, weight: text})}
                        editable={isEditing}
                        placeholder="–í–µ—Å"
                      />
                    </View>
                  </View>
                </>
              )}

              {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–µ-–∑–≤–µ–∑–¥ */}
              {editData.status !== 'star' && (
                <>
                  <Text style={styles.sectionTitle}>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</Text>
                  
                  <View style={styles.row}>
                    <View style={[styles.inputGroup, { flex: 1, marginRight: 10 }]}>
                      <Text style={styles.inputLabel}>–ì–æ–ª—ã</Text>
                      <TextInput
                        style={[styles.input, !isEditing && styles.inputDisabled]}
                        value={editData.goals}
                        onChangeText={(text) => setEditData({...editData, goals: text})}
                        editable={isEditing}
                        keyboardType="numeric"
                        placeholder="–ì–æ–ª—ã"
                      />
                    </View>
                    <View style={[styles.inputGroup, { flex: 1 }]}>
                      <Text style={styles.inputLabel}>–ü–µ—Ä–µ–¥–∞—á–∏</Text>
                      <TextInput
                        style={[styles.input, !isEditing && styles.inputDisabled]}
                        value={editData.assists}
                        onChangeText={(text) => setEditData({...editData, assists: text})}
                        editable={isEditing}
                        keyboardType="numeric"
                        placeholder="–ü–µ—Ä–µ–¥–∞—á–∏"
                      />
                    </View>
                  </View>

                  <View style={styles.inputGroup}>
                    <Text style={styles.inputLabel}>–ò–≥—Ä—ã</Text>
                    <TextInput
                      style={[styles.input, !isEditing && styles.inputDisabled]}
                      value={editData.games}
                      onChangeText={(text) => setEditData({...editData, games: text})}
                      editable={isEditing}
                      keyboardType="numeric"
                      placeholder="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä"
                    />
                  </View>
                </>
              )}

              {/* –ù–æ—Ä–º–∞—Ç–∏–≤—ã - —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–µ-–∑–≤–µ–∑–¥ */}
              {editData.status !== 'star' && (
                <>
                  <Text style={styles.sectionTitle}>–ù–æ—Ä–º–∞—Ç–∏–≤—ã</Text>
                  
                  <View style={styles.row}>
                    <View style={[styles.inputGroup, { flex: 1, marginRight: 10 }]}>
                      <Text style={styles.inputLabel}>–ü–æ–¥—Ç—è–≥–∏–≤–∞–Ω–∏—è</Text>
                      <TextInput
                        style={[styles.input, !isEditing && styles.inputDisabled]}
                        value={editData.pullUps}
                        onChangeText={(text) => setEditData({...editData, pullUps: text})}
                        editable={isEditing}
                        keyboardType="numeric"
                        placeholder="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"
                      />
                    </View>
                    <View style={[styles.inputGroup, { flex: 1 }]}>
                      <Text style={styles.inputLabel}>–û—Ç–∂–∏–º–∞–Ω–∏—è</Text>
                      <TextInput
                        style={[styles.input, !isEditing && styles.inputDisabled]}
                        value={editData.pushUps}
                        onChangeText={(text) => setEditData({...editData, pushUps: text})}
                        editable={isEditing}
                        keyboardType="numeric"
                        placeholder="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"
                      />
                    </View>
                  </View>

                  <View style={styles.row}>
                    <View style={[styles.inputGroup, { flex: 1, marginRight: 10 }]}>
                      <Text style={styles.inputLabel}>–ü–ª–∞–Ω–∫–∞ (—Å–µ–∫)</Text>
                      <TextInput
                        style={[styles.input, !isEditing && styles.inputDisabled]}
                        value={editData.plankTime}
                        onChangeText={(text) => setEditData({...editData, plankTime: text})}
                        editable={isEditing}
                        keyboardType="numeric"
                        placeholder="–í—Ä–µ–º—è"
                      />
                    </View>
                    <View style={[styles.inputGroup, { flex: 1 }]}>
                      <Text style={styles.inputLabel}>100–º (—Å–µ–∫)</Text>
                      <TextInput
                        style={[styles.input, !isEditing && styles.inputDisabled]}
                        value={editData.sprint100m}
                        onChangeText={(text) => setEditData({...editData, sprint100m: text})}
                        editable={isEditing}
                        keyboardType="numeric"
                        placeholder="–í—Ä–µ–º—è"
                      />
                    </View>
                  </View>

                  <View style={styles.inputGroup}>
                    <Text style={styles.inputLabel}>–ü—Ä—ã–∂–æ–∫ –≤ –¥–ª–∏–Ω—É (—Å–º)</Text>
                    <TextInput
                      style={[styles.input, !isEditing && styles.inputDisabled]}
                      value={editData.longJump}
                      onChangeText={(text) => setEditData({...editData, longJump: text})}
                      editable={isEditing}
                      keyboardType="numeric"
                      placeholder="–î–ª–∏–Ω–∞ –ø—Ä—ã–∂–∫–∞"
                    />
                  </View>
                </>
              )}

              <View style={styles.inputGroup}>
                <Text style={styles.inputLabel}>–°—Ç–∞—Ç—É—Å</Text>
                <View style={styles.statusSelector}>
                  {['player', 'star', 'coach', 'scout', 'admin'].map((status) => (
                    <TouchableOpacity
                      key={status}
                      style={[
                        styles.statusOption,
                        editData.status === status && styles.statusOptionSelected,
                        { borderColor: getStatusColor(status) }
                      ]}
                      onPress={() => isEditing && setEditData({...editData, status})}
                      disabled={!isEditing}
                    >
                      <Text style={[
                        styles.statusOptionText,
                        editData.status === status && styles.statusOptionTextSelected
                      ]}>
                        {getStatusText(status)}
                      </Text>
                    </TouchableOpacity>
                  ))}
                </View>
              </View>
            </View>
          </ScrollView>

          <View style={styles.modalFooter}>
            <TouchableOpacity 
              style={[styles.footerButton, styles.editButton]} 
              onPress={() => {
                console.log('üîß –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, —Ç–µ–∫—É—â–∏–π isEditing:', isEditing);
                setIsEditing(!isEditing);
                console.log('üîß –ù–æ–≤—ã–π isEditing –±—É–¥–µ—Ç:', !isEditing);
              }}
            >
              <Ionicons name={isEditing ? "eye" : "create"} size={20} color="#fff" />
              <Text style={styles.footerButtonText}>
                {isEditing ? '–ü—Ä–æ—Å–º–æ—Ç—Ä' : '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å'}
              </Text>
            </TouchableOpacity>
          </View>
        </View>
      </Modal>

      {/* –ö–∞–ª–µ–Ω–¥–∞—Ä—å –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è - –ø—Ä—è–º–æ–π —Ä–µ–Ω–¥–µ—Ä */}
      {showBirthDatePicker && (
        <View style={styles.datePickerOverlay}>
          <View style={styles.datePickerModal}>
            <DateTimePicker
              value={selectedDate}
              mode="date"
              display={Platform.OS === 'ios' ? 'spinner' : 'default'}
              onChange={handleDateChange}
              maximumDate={new Date()}
              minimumDate={new Date(1990, 0, 1)}
              textColor="#fff"
              themeVariant="dark"
            />
            {Platform.OS === 'ios' && (
              <View style={styles.datePickerButtons}>
                <TouchableOpacity 
                  style={styles.datePickerButton} 
                  onPress={() => setShowBirthDatePicker(false)}
                >
                  <Text style={styles.datePickerButtonText}>–û—Ç–º–µ–Ω–∞</Text>
                </TouchableOpacity>
                <TouchableOpacity 
                  style={[styles.datePickerButton, styles.confirmButton]} 
                  onPress={() => {
                    const day = selectedDate.getDate().toString().padStart(2, '0');
                    const month = (selectedDate.getMonth() + 1).toString().padStart(2, '0');
                    const year = selectedDate.getFullYear().toString();
                    const formattedDate = `${day}.${month}.${year}`;
                    setEditData(prev => ({ ...prev, birthDate: formattedDate }));
                    setShowBirthDatePicker(false);
                  }}
                >
                  <Text style={styles.datePickerButtonText}>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å</Text>
                </TouchableOpacity>
              </View>
            )}
          </View>
        </View>
      )}
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#1a1a1a',
  },
  header: {
    flexDirection: 'row',
    alignItems: 'center',
    paddingHorizontal: 20,
    paddingTop: 60,
    paddingBottom: 20,
    backgroundColor: '#2a2a2a',
  },
  backButton: {
    padding: 8,
  },
  headerTitle: {
    flex: 1,
    fontSize: 20,
    fontWeight: 'bold',
    color: '#fff',
    textAlign: 'center',
  },
  headerSpacer: {
    width: 40,
  },
  searchContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    marginHorizontal: 20,
    marginBottom: 20,
    backgroundColor: '#333',
    borderRadius: 10,
    paddingHorizontal: 15,
  },
  searchIcon: {
    marginRight: 10,
  },
  searchInput: {
    flex: 1,
    height: 45,
    color: '#fff',
    fontSize: 16,
  },
  playerList: {
    flex: 1,
    paddingHorizontal: 20,
  },
  playerItem: {
    flexDirection: 'row',
    alignItems: 'center',
    paddingHorizontal: 20,
    paddingVertical: 15,
    backgroundColor: '#2a2a2a',
    marginHorizontal: 20,
    marginVertical: 5,
    borderRadius: 12,
    borderWidth: 1,
    borderColor: '#444',
  },
  playerAvatar: {
    width: 60,
    height: 60,
    borderRadius: 30,
    marginRight: 15,
  },
  playerInfo: {
    flex: 1,
  },
  playerName: {
    fontSize: 16,
    fontWeight: 'bold',
    color: '#fff',
    marginBottom: 4,
  },
  playerDetails: {
    fontSize: 14,
    color: '#ccc',
  },
  playerStatus: {
    fontSize: 12,
    color: '#FFD700',
    fontWeight: 'bold',
  },
  statusBadge: {
    alignSelf: 'flex-start',
    paddingHorizontal: 8,
    paddingVertical: 2,
    borderRadius: 8,
  },
  statusText: {
    fontSize: 12,
    fontWeight: 'bold',
    color: '#000',
  },
  modalContainer: {
    flex: 1,
    backgroundColor: '#1a1a1a',
  },
  modalHeader: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    paddingHorizontal: 20,
    paddingTop: Platform.OS === 'ios' ? 60 : 40,
    paddingBottom: 20,
    backgroundColor: '#2a2a2a',
    borderBottomWidth: 1,
    borderBottomColor: '#444',
  },
  closeButton: {
    padding: 10,
    minWidth: 44,
    minHeight: 44,
    justifyContent: 'center',
    alignItems: 'center',
  },
  saveButtonContainer: {
    padding: 10,
    minWidth: 44,
    minHeight: 44,
    justifyContent: 'center',
    alignItems: 'center',
  },
  modalTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#fff',
    flex: 1,
    textAlign: 'center',
  },
  saveButton: {
    color: '#FFD700',
    fontSize: 16,
    fontWeight: 'bold',
  },
  saveButtonDisabled: {
    color: '#666',
  },
  modalContent: {
    flex: 1,
  },
  modalContentContainer: {
    paddingHorizontal: 20,
    paddingBottom: 40,
  },
  photoSection: {
    alignItems: 'center',
    paddingVertical: 20,
  },
  editPhoto: {
    width: 120,
    height: 120,
    borderRadius: 60,
    borderWidth: 3,
  },
  editOverlay: {
    position: 'absolute',
    top: 0,
    left: 0,
    right: 0,
    bottom: 0,
    backgroundColor: 'rgba(0,0,0,0.5)',
    borderRadius: 60,
    justifyContent: 'center',
    alignItems: 'center',
  },
  formSection: {
    marginTop: 20,
  },
  sectionTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#fff',
    marginBottom: 15,
    marginTop: 20,
  },
  inputGroup: {
    marginBottom: 15,
  },
  inputLabel: {
    fontSize: 14,
    color: '#ccc',
    marginBottom: 5,
  },
  input: {
    backgroundColor: '#333',
    borderRadius: 8,
    paddingHorizontal: 15,
    paddingVertical: 12,
    fontSize: 16,
    color: '#fff',
    borderWidth: 1,
    borderColor: '#444',
    minHeight: 48,
  },
  inputDisabled: {
    backgroundColor: '#2a2a2a',
    color: '#999',
  },
  row: {
    flexDirection: 'row',
  },
  statusSelector: {
    flexDirection: 'row',
    flexWrap: 'wrap',
    gap: 10,
  },
  statusOption: {
    paddingHorizontal: 12,
    paddingVertical: 8,
    borderRadius: 6,
    borderWidth: 1,
    borderColor: '#444',
    minHeight: 40,
    justifyContent: 'center',
    alignItems: 'center',
  },
  statusOptionSelected: {
    backgroundColor: '#FFD700',
    borderColor: '#FFD700',
  },
  statusOptionText: {
    color: '#fff',
    fontSize: 14,
    fontWeight: '500',
  },
  statusOptionTextSelected: {
    color: '#000',
    fontWeight: 'bold',
  },
  modalFooter: {
    flexDirection: 'row',
    paddingHorizontal: 20,
    paddingVertical: 20,
    backgroundColor: '#2a2a2a',
    borderTopWidth: 1,
    borderTopColor: '#444',
  },
  footerButton: {
    flex: 1,
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    paddingVertical: 15,
    borderRadius: 8,
    marginHorizontal: 5,
    minHeight: 50,
  },
  editButton: {
    backgroundColor: '#FF4444',
    paddingHorizontal: 15,
    paddingVertical: 10,
    borderRadius: 8,
    minWidth: 80,
    minHeight: 40,
    justifyContent: 'center',
    alignItems: 'center',
  },
  editButtonText: {
    color: '#fff',
    fontSize: 14,
    fontWeight: 'bold',
  },
  errorText: {
    color: '#fff',
    fontSize: 18,
    textAlign: 'center',
    marginTop: 100,
  },
  modalOverlay: {
    flex: 1,
    backgroundColor: 'rgba(0, 0, 0, 0.8)',
    justifyContent: 'center',
    alignItems: 'center',
    zIndex: 9999,
  },
  modalMessage: {
    fontSize: 16,
    color: '#ccc',
    textAlign: 'center',
    marginTop: 10,
    marginBottom: 20,
  },
  modalButtons: {
    width: '100%',
    gap: 15,
  },
  modalButton: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    backgroundColor: '#FF4444',
    paddingVertical: 15,
    paddingHorizontal: 20,
    borderRadius: 10,
    minHeight: 50,
  },
  modalButtonSecondary: {
    backgroundColor: '#333',
    borderWidth: 1,
    borderColor: '#FFD700',
  },
  modalButtonText: {
    color: '#fff',
    fontSize: 16,
    fontWeight: 'bold',
    marginLeft: 10,
  },
  modalButtonTextSecondary: {
    color: '#FFD700',
  },
  techSupportText: {
    fontSize: 14,
    color: '#ccc',
    textAlign: 'center',
    marginTop: 10,
  },
  saveButtonContainer: {
    paddingVertical: 12,
    paddingHorizontal: 20,
    borderRadius: 8,
    backgroundColor: '#FFD700',
  },
  closeButton: {
    padding: 8,
  },
  imagePickerModalContainer: {
    backgroundColor: '#1a1a1a',
    borderRadius: 15,
    padding: 30,
    margin: 20,
    alignItems: 'center',
    borderWidth: 1,
    borderColor: '#444',
    flex: 1,
    justifyContent: 'center',
  },
  imagePickerModalHeader: {
    marginBottom: 20,
  },
  imagePickerModalTitle: {
    fontSize: 20,
    fontWeight: 'bold',
    color: '#fff',
    textAlign: 'center',
  },
  adminHeader: {
    height: 128,
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    paddingHorizontal: 20,
    backgroundColor: '#2a2a2a',
    paddingTop: Platform.OS === 'ios' ? 60 : 40,
  },
  logo: {
    width: 180,
    height: 60,
    resizeMode: 'contain',
  },
  profileButton: {
    alignItems: 'center',
    padding: 10,
    minWidth: 44,
    minHeight: 44,
    justifyContent: 'center',
  },
  profileIcon: {
    width: 51,
    height: 51,
    borderRadius: 25.5,
    backgroundColor: '#333',
    justifyContent: 'center',
    alignItems: 'center',
    borderWidth: 2,
    borderColor: '#fff',
  },
  profileImage: {
    width: 45,
    height: 45,
    borderRadius: 22.5,
    resizeMode: 'cover',
  },
  dateButton: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    backgroundColor: '#333',
    borderRadius: 8,
    paddingHorizontal: 15,
    paddingVertical: 12,
    minHeight: 48,
  },
  dateButtonText: {
    flex: 1,
    fontSize: 16,
    color: '#fff',
    marginRight: 10,
  },
  placeholderText: {
    color: '#666',
  },
  datePickerOverlay: {
    position: 'absolute',
    top: 0,
    left: 0,
    right: 0,
    bottom: 0,
    backgroundColor: 'rgba(0, 0, 0, 0.5)',
    justifyContent: 'center',
    alignItems: 'center',
    zIndex: 9999,
  },
  datePickerModal: {
    backgroundColor: '#000',
    borderRadius: 15,
    padding: 20,
    borderWidth: 1,
    borderColor: 'rgba(255, 255, 255, 0.2)',
    minWidth: 300,
  },
  datePickerButtons: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    marginTop: 15,
    gap: 10,
  },
  datePickerButton: {
    flex: 1,
    backgroundColor: 'rgba(255, 255, 255, 0.1)',
    borderRadius: 8,
    padding: 12,
    alignItems: 'center',
    borderWidth: 1,
    borderColor: 'rgba(255, 255, 255, 0.2)',
  },
  datePickerButtonText: {
    fontSize: 14,
    fontWeight: 'bold',
    color: '#fff',
  },
  confirmButton: {
    backgroundColor: '#FFD700',
    borderColor: '#FFD700',
  },
}); 