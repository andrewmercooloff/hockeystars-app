import { Ionicons } from '@expo/vector-icons';
import { useFocusEffect, useRouter } from 'expo-router';
import React, { useCallback, useEffect, useState } from 'react';
import {
  ImageBackground,
  ScrollView,
  StyleSheet,
  Text,
  TouchableOpacity,
  View
} from 'react-native';
import { loadCurrentUser, Player } from '../utils/playerStorage';

const iceBg = require('../assets/images/led.jpg');

interface ExerciseComplex {
  id: string;
  name: string;
  category: string;
  difficulty: 'beginner' | 'intermediate' | 'advanced';
  duration: string;
  description: string;
  exercises: string[];
  author: string;
  authorAvatar?: string;
}

const defaultExercises: ExerciseComplex[] = [
  {
    id: 'explosive_speed',
    name: '–í–∑—Ä—ã–≤–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å',
    category: '–°–∫–æ—Ä–æ—Å—Ç—å',
    difficulty: 'intermediate',
    duration: '30-45 –º–∏–Ω',
    description: '–ö–æ–º–ø–ª–µ–∫—Å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è –≤–∑—Ä—ã–≤–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç–∏ –∏ —Ä–µ–∞–∫—Ü–∏–∏. –í–∫–ª—é—á–∞–µ—Ç –ø–ª–∏–æ–º–µ—Ç—Ä–∏–∫—É, —Å–ø—Ä–∏–Ω—Ç—ã –∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –Ω–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—é.',
    exercises: [
      '–ü—Ä—ã–∂–∫–∏ –Ω–∞ –º–µ—Å—Ç–µ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –≤—ã—Å–æ—Ç–æ–π',
      '–ë–µ—Ä–ø–∏ —Å –æ—Ç–∂–∏–º–∞–Ω–∏—è–º–∏',
      '–°–ø—Ä–∏–Ω—Ç—ã –Ω–∞ 20-30 –º–µ—Ç—Ä–æ–≤',
      '–ü—Ä—ã–∂–∫–∏ —á–µ—Ä–µ–∑ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è',
      '–ë—ã—Å—Ç—Ä—ã–µ –æ—Ç–∂–∏–º–∞–Ω–∏—è'
    ],
    author: 'Hockeystars',
    authorAvatar: 'üèí'
  },
  {
    id: 'endurance',
    name: '–í—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å',
    category: '–ö–∞—Ä–¥–∏–æ',
    difficulty: 'beginner',
    duration: '45-60 –º–∏–Ω',
    description: '–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ —Å–µ—Ä–¥–µ—á–Ω–æ-—Å–æ—Å—É–¥–∏—Å—Ç–æ–π —Å–∏—Å—Ç–µ–º—ã –∏ –æ–±—â–µ–π –≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç–∏. –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –≤—Å–µ—Ö —É—Ä–æ–≤–Ω–µ–π –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏.',
    exercises: [
      '–ë–µ–≥ –Ω–∞ –º–µ—Å—Ç–µ',
      '–ü—Ä—ã–∂–∫–∏ —Å–æ —Å–∫–∞–∫–∞–ª–∫–æ–π',
      '–ü—Ä–∏—Å–µ–¥–∞–Ω–∏—è —Å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–º –≤–µ—Å–æ–º',
      '–û—Ç–∂–∏–º–∞–Ω–∏—è –æ—Ç –ø–æ–ª–∞',
      '–ü–ª–∞–Ω–∫–∞'
    ],
    author: 'Hockeystars',
    authorAvatar: 'üèí'
  },
  {
    id: 'coordination',
    name: '–ö–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—è',
    category: '–ë–∞–ª–∞–Ω—Å',
    difficulty: 'beginner',
    duration: '25-35 –º–∏–Ω',
    description: '–£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–∏ –¥–≤–∏–∂–µ–Ω–∏–π, –±–∞–ª–∞–Ω—Å–∞ –∏ –∫–æ–Ω—Ç—Ä–æ–ª—è —Ç–µ–ª–∞.',
    exercises: [
      '–°—Ç–æ–π–∫–∞ –Ω–∞ –æ–¥–Ω–æ–π –Ω–æ–≥–µ',
      '–•–æ–¥—å–±–∞ –ø–æ –ø—Ä—è–º–æ–π –ª–∏–Ω–∏–∏',
      '–£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –Ω–∞ –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–æ—á–Ω–æ–π –¥–æ—Å–∫–µ',
      '–ü–µ—Ä–µ–∫—Ä–µ—Å—Ç–Ω—ã–µ –¥–≤–∏–∂–µ–Ω–∏—è',
      '–ô–æ–≥–∞-–ø–æ–∑—ã –¥–ª—è –±–∞–ª–∞–Ω—Å–∞'
    ],
    author: 'Hockeystars',
    authorAvatar: 'üèí'
  },
  {
    id: 'warmup',
    name: '–†–∞–∑–º–∏–Ω–∫–∞',
    category: '–†–∞–∑–º–∏–Ω–∫–∞',
    difficulty: 'beginner',
    duration: '15-20 –º–∏–Ω',
    description: '–ö–æ–º–ø–ª–µ–∫—Å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –º—ã—à—Ü –∏ —Å—É—Å—Ç–∞–≤–æ–≤ –∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ. –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤—ã–ø–æ–ª–Ω—è—Ç—å –ø–µ—Ä–µ–¥ –ª—é–±–æ–π —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –Ω–∞–≥—Ä—É–∑–∫–æ–π.',
    exercises: [
      '–ö—Ä—É–≥–æ–≤—ã–µ –¥–≤–∏–∂–µ–Ω–∏—è –≥–æ–ª–æ–≤–æ–π',
      '–í—Ä–∞—â–µ–Ω–∏—è –ø–ª–µ—á–∞–º–∏',
      '–ù–∞–∫–ª–æ–Ω—ã —Ç—É–ª–æ–≤–∏—â–∞',
      '–ö—Ä—É–≥–æ–≤—ã–µ –¥–≤–∏–∂–µ–Ω–∏—è –∫–æ–ª–µ–Ω—è–º–∏',
      '–õ–µ–≥–∫–∞—è —Ä–∞—Å—Ç—è–∂–∫–∞'
    ],
    author: 'Hockeystars',
    authorAvatar: 'üèí'
  },
  {
    id: 'stretching',
    name: '–†–∞—Å—Ç—è–∂–∫–∞',
    category: '–ì–∏–±–∫–æ—Å—Ç—å',
    difficulty: 'beginner',
    duration: '20-30 –º–∏–Ω',
    description: '–£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –Ω–∞ —Ä–∞–∑–≤–∏—Ç–∏–µ –≥–∏–±–∫–æ—Å—Ç–∏ –∏ —ç–ª–∞—Å—Ç–∏—á–Ω–æ—Å—Ç–∏ –º—ã—à—Ü. –ü–æ–º–æ–≥–∞–µ—Ç –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç—å —Ç—Ä–∞–≤–º—ã –∏ —É–ª—É—á—à–∏—Ç—å –ø–æ–¥–≤–∏–∂–Ω–æ—Å—Ç—å.',
    exercises: [
      '–†–∞—Å—Ç—è–∂–∫–∞ –º—ã—à—Ü –±–µ–¥—Ä–∞',
      '–ù–∞–∫–ª–æ–Ω—ã –∫ –Ω–æ–≥–∞–º',
      '–†–∞—Å—Ç—è–∂–∫–∞ —Å–ø–∏–Ω—ã',
      '–†–∞—Å—Ç—è–∂–∫–∞ –ø–ª–µ—á',
      '–†–∞—Å—Ç—è–∂–∫–∞ –∏–∫—Ä–æ–Ω–æ–∂–Ω—ã—Ö –º—ã—à—Ü'
    ],
    author: 'Hockeystars',
    authorAvatar: 'üèí'
  },
  {
    id: 'speed',
    name: '–°–∫–æ—Ä–æ—Å—Ç—å',
    category: '–°–∫–æ—Ä–æ—Å—Ç—å',
    difficulty: 'intermediate',
    duration: '35-45 –º–∏–Ω',
    description: '–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏ –∏ –±—ã—Å—Ç—Ä–æ—Ç—ã —Ä–µ–∞–∫—Ü–∏–∏. –§–æ–∫—É—Å –Ω–∞ —Ç–µ—Ö–Ω–∏–∫–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.',
    exercises: [
      '–ë—ã—Å—Ç—Ä—ã–µ –ø—Ä–∏—Å–µ–¥–∞–Ω–∏—è',
      '–ê–ª—å–ø–∏–Ω–∏—Å—Ç',
      '–ë—ã—Å—Ç—Ä—ã–µ –æ—Ç–∂–∏–º–∞–Ω–∏—è',
      '–ü—Ä—ã–∂–∫–∏ —Å —Ä–∞–∑–≤–µ–¥–µ–Ω–∏–µ–º –Ω–æ–≥',
      '–ë—ã—Å—Ç—Ä–∞—è —Ö–æ–¥—å–±–∞ –Ω–∞ –º–µ—Å—Ç–µ'
    ],
    author: 'Hockeystars',
    authorAvatar: 'üèí'
  },
  {
    id: 'puck_control',
    name: '–í–ª–∞–¥–µ–Ω–∏–µ —à–∞–π–±–æ–π',
    category: '–¢–µ—Ö–Ω–∏–∫–∞',
    difficulty: 'advanced',
    duration: '40-50 –º–∏–Ω',
    description: '–£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∫–æ–Ω—Ç—Ä–æ–ª—è –Ω–∞–¥ –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏ –∏ —Ä–∞–∑–≤–∏—Ç–∏—è –º–µ–ª–∫–æ–π –º–æ—Ç–æ—Ä–∏–∫–∏. –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–µ–Ω–Ω–∏—Å–Ω—ã–π –º—è—á –∏–ª–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–Ω–∞–∂–µ—Ä—ã.',
    exercises: [
      '–ñ–æ–Ω–≥–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –º—è—á–æ–º',
      '–£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è —Å —Ç–µ–Ω–Ω–∏—Å–Ω—ã–º –º—è—á–æ–º',
      '–ë–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∞ –Ω–∞ –Ω–µ—É—Å—Ç–æ–π—á–∏–≤—ã—Ö –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç—è—Ö',
      '–£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –Ω–∞ —Ä–µ–∞–∫—Ü–∏—é',
      '–ö–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–æ–Ω–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è'
    ],
    author: 'Hockeystars',
    authorAvatar: 'üèí'
  }
];

export default function ExercisesScreen() {
  const router = useRouter();
  const [currentUser, setCurrentUser] = useState<Player | null>(null);
  const [exercises, setExercises] = useState<ExerciseComplex[]>(defaultExercises);
  const [selectedCategory, setSelectedCategory] = useState<string>('all');

  useEffect(() => { loadUserData(); }, []);
  useFocusEffect(useCallback(() => { loadUserData(); }, []));

  const loadUserData = async () => {
    try {
      const user = await loadCurrentUser();
      if (user) { setCurrentUser(user); }
    } catch (error) { console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error); }
  };

  const handleExercisePress = (exercise: ExerciseComplex) => {
    // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –æ–ø–∏—Å–∞–Ω–∏–µ–º —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
    console.log(`–í—ã–±—Ä–∞–Ω–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ: ${exercise.name}`);
    // TODO: –î–æ–±–∞–≤–∏—Ç—å –Ω–∞–≤–∏–≥–∞—Ü–∏—é –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
  };

  const getDifficultyText = (difficulty: string) => {
    switch (difficulty) {
      case 'beginner': return '–ù–∞—á–∏–Ω–∞—é—â–∏–π';
      case 'intermediate': return '–°—Ä–µ–¥–Ω–∏–π';
      case 'advanced': return '–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π';
      default: return difficulty;
    }
  };

  const getDifficultyColor = (difficulty: string) => {
    switch (difficulty) {
      case 'beginner': return '#FF6B6B';
      case 'intermediate': return '#FF8E53';
      case 'advanced': return '#FF4757';
      default: return '#FF6B6B';
    }
  };

  const getCategoryIcon = (category: string) => {
    switch (category) {
      case '–°–∫–æ—Ä–æ—Å—Ç—å': return 'flash';
      case '–ö–∞—Ä–¥–∏–æ': return 'heart';
      case '–ë–∞–ª–∞–Ω—Å': return 'walk';
      case '–†–∞–∑–º–∏–Ω–∫–∞': return 'sunny';
      case '–ì–∏–±–∫–æ—Å—Ç—å': return 'body';
      case '–¢–µ—Ö–Ω–∏–∫–∞': return 'construct';
      default: return 'fitness';
    }
  };

  const filteredExercises = selectedCategory === 'all' ? exercises : exercises.filter(ex => ex.category === selectedCategory);
  const categories = ['all', ...Array.from(new Set(exercises.map(ex => ex.category)))];

  return (
    <View style={styles.container}>
      <ImageBackground source={iceBg} style={styles.background} resizeMode="cover">
        <View style={styles.overlay}>
          <View style={styles.header}>
            <Text style={styles.title}>–ö–æ–º–ø–ª–µ–∫—Å—ã —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π</Text>
            <Text style={styles.subtitle}>–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–ø–ª–µ–∫—Å –¥–ª—è –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω–∏—è</Text>
          </View>
          
          <ScrollView 
            horizontal 
            showsHorizontalScrollIndicator={false} 
            style={styles.categoriesFilter} 
            contentContainerStyle={styles.categoriesContainer}
          >
            {categories.map((category) => (
              <TouchableOpacity
                key={category}
                style={[
                  styles.categoryButton,
                  selectedCategory === category && styles.selectedCategory
                ]}
                onPress={() => setSelectedCategory(category)}
                activeOpacity={0.7}
              >
                <Text style={[
                  styles.categoryButtonText,
                  selectedCategory === category && styles.selectedCategoryText
                ]}>
                  {category === 'all' ? '–í—Å–µ' : category}
                </Text>
              </TouchableOpacity>
            ))}
          </ScrollView>

          <ScrollView style={styles.exercisesList} showsVerticalScrollIndicator={false}>
            {filteredExercises.map((exercise) => (
              <TouchableOpacity
                key={exercise.id}
                style={styles.exerciseItem}
                onPress={() => handleExercisePress(exercise)}
                activeOpacity={0.7}
              >
                <View style={styles.exerciseHeader}>
                  <View style={styles.exerciseIcon}>
                    <Ionicons 
                      name={getCategoryIcon(exercise.category) as any} 
                      size={24} 
                      color="#FF4757" 
                    />
                  </View>
                  <View style={styles.exerciseInfo}>
                    <Text style={styles.exerciseName}>{exercise.name}</Text>
                    <Text style={styles.exerciseCategory}>{exercise.category}</Text>
                  </View>
                  <View style={styles.exerciseMeta}>
                    <View style={[
                      styles.difficultyBadge,
                      { backgroundColor: getDifficultyColor(exercise.difficulty) }
                    ]}>
                      <Text style={styles.difficultyText}>
                        {getDifficultyText(exercise.difficulty)}
                      </Text>
                    </View>
                    <Text style={styles.durationText}>{exercise.duration}</Text>
                  </View>
                </View>
                
                <Text style={styles.exerciseDescription}>{exercise.description}</Text>
                
                <View style={styles.exerciseFooter}>
                  <View style={styles.authorInfo}>
                    <Text style={styles.authorAvatar}>{exercise.authorAvatar}</Text>
                    <Text style={styles.authorName}>{exercise.author}</Text>
                  </View>
                  <View style={styles.viewButton}>
                    <Text style={styles.viewButtonText}>–ü–æ–¥—Ä–æ–±–Ω–µ–µ</Text>
                    <Ionicons name="arrow-forward" size={16} color="#fff" />
                  </View>
                </View>
              </TouchableOpacity>
            ))}
          </ScrollView>
        </View>
      </ImageBackground>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
  },
  background: {
    flex: 1,
  },
  overlay: {
    flex: 1,
    backgroundColor: 'rgba(0, 0, 0, 0.3)',
    padding: 20,
  },
  header: {
    alignItems: 'center',
    marginBottom: 20,
  },
  title: {
    fontSize: 28,
    fontWeight: 'bold',
    color: '#fff',
    marginBottom: 10,
    textAlign: 'center',
  },
  subtitle: {
    fontSize: 16,
    color: '#fff',
    textAlign: 'center',
    opacity: 0.9,
  },
  categoriesFilter: {
    marginBottom: 20,
  },
  categoriesContainer: {
    paddingHorizontal: 10,
  },
  categoryButton: {
    backgroundColor: 'rgba(255, 255, 255, 0.1)',
    paddingHorizontal: 20,
    paddingVertical: 8,
    borderRadius: 20,
    marginHorizontal: 5,
    borderWidth: 1,
    borderColor: 'rgba(255, 255, 255, 0.2)',
  },
  selectedCategory: {
    backgroundColor: '#FF4757',
    borderColor: '#FF4757',
  },
  categoryButtonText: {
    color: '#fff',
    fontSize: 14,
    fontWeight: '500',
  },
  selectedCategoryText: {
    color: '#fff',
    fontWeight: 'bold',
  },
  exercisesList: {
    flex: 1,
  },
  exerciseItem: {
    backgroundColor: 'rgba(255, 255, 255, 0.1)',
    borderRadius: 15,
    padding: 20,
    marginBottom: 15,
    borderWidth: 1,
    borderColor: 'rgba(255, 255, 255, 0.2)',
  },
  exerciseHeader: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: 15,
  },
  exerciseIcon: {
    width: 40,
    height: 40,
    borderRadius: 20,
    backgroundColor: 'rgba(255, 255, 255, 0.1)',
    justifyContent: 'center',
    alignItems: 'center',
    marginRight: 15,
  },
  exerciseInfo: {
    flex: 1,
  },
  exerciseName: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#fff',
    marginBottom: 5,
  },
  exerciseCategory: {
    fontSize: 14,
    color: '#FF4757',
    fontWeight: '500',
  },
  exerciseMeta: {
    alignItems: 'flex-end',
  },
  difficultyBadge: {
    paddingHorizontal: 12,
    paddingVertical: 4,
    borderRadius: 12,
    marginBottom: 5,
  },
  difficultyText: {
    color: '#fff',
    fontSize: 12,
    fontWeight: 'bold',
  },
  durationText: {
    color: '#fff',
    fontSize: 12,
    opacity: 0.8,
  },
  exerciseDescription: {
    color: '#fff',
    fontSize: 14,
    lineHeight: 20,
    marginBottom: 15,
    opacity: 0.9,
  },
  exerciseFooter: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
  },
  authorInfo: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  authorAvatar: {
    fontSize: 20,
    marginRight: 8,
  },
  authorName: {
    color: '#fff',
    fontSize: 14,
    opacity: 0.8,
  },
  viewButton: {
    backgroundColor: '#FF4757',
    paddingHorizontal: 15,
    paddingVertical: 8,
    borderRadius: 20,
    flexDirection: 'row',
    alignItems: 'center',
  },
  viewButtonText: {
    color: '#fff',
    fontSize: 14,
    fontWeight: '500',
    marginRight: 5,
  },
});
