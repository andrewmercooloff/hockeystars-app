import { Ionicons } from '@expo/vector-icons';
import DateTimePicker from '@react-native-community/datetimepicker';
import * as ImagePicker from 'expo-image-picker';
import { useRouter } from 'expo-router';
import React, { useState } from 'react';
import {
  Alert,
  Image,
  ImageBackground,
  Platform,
  ScrollView,
  StyleSheet,
  Text,
  TextInput,
  TouchableOpacity,
  View
} from 'react-native';
import CustomAlert from '../components/CustomAlert';
import { addPlayer, saveCurrentUser } from '../utils/playerStorage';

const iceBg = require('../assets/images/led.jpg');

export default function RegisterScreen() {
  const router = useRouter();
  const [formData, setFormData] = useState({
    username: '',
    password: '',
    name: '',
    status: '' as 'player' | 'coach' | 'scout' | '',
    birthDate: '',
    country: '–ë–µ–ª–∞—Ä—É—Å—å', // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
    team: '',
    position: '',
    number: '',
    grip: '', // —Ö–≤–∞—Ç
    height: '', // —Ä–æ—Å—Ç
    weight: '', // –≤–µ—Å
    avatar: null as string | null
  });
  const [showDatePicker, setShowDatePicker] = useState(false);
  const [selectedDate, setSelectedDate] = useState(new Date(2008, 0, 1)); // 1 —è–Ω–≤–∞—Ä—è 2008
  const [alert, setAlert] = useState({
    visible: false,
    title: '',
    message: '',
    type: 'info' as 'success' | 'error' | 'warning' | 'info',
    onConfirm: () => {},
    onCancel: () => {},
    onSecondary: () => {},
    showCancel: false,
    showSecondary: false,
    confirmText: 'OK',
    cancelText: '–û—Ç–º–µ–Ω–∞',
    secondaryText: '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ'
  });

  const showAlert = (title: string, message: string, type: 'success' | 'error' | 'warning' | 'info' = 'info', onConfirm?: () => void) => {
    setAlert({
      visible: true,
      title,
      message,
      type,
      onConfirm: onConfirm || (() => setAlert(prev => ({ ...prev, visible: false }))),
      onCancel: () => {},
      onSecondary: () => {},
      showCancel: false,
      showSecondary: false,
      confirmText: 'OK',
      cancelText: '–û—Ç–º–µ–Ω–∞',
      secondaryText: '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ'
    });
  };

  const pickImage = async () => {
    console.log('üì∏ pickImage –≤—ã–∑–≤–∞–Ω');
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–µ –æ–∫–Ω–æ –≤—ã–±–æ—Ä–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ —Ñ–æ—Ç–æ
    Alert.alert(
      '–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫ —Ñ–æ—Ç–æ',
      '–û—Ç–∫—É–¥–∞ —Ö–æ—Ç–∏—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ?',
      [
        {
          text: '–ì–∞–ª–µ—Ä–µ—è',
          onPress: () => {
            console.log('üì∏ –í—ã–±—Ä–∞–Ω–∞ –≥–∞–ª–µ—Ä–µ—è');
            pickFromGallery();
          }
        },
        {
          text: '–ö–∞–º–µ—Ä–∞',
          onPress: () => {
            console.log('üì∏ –í—ã–±—Ä–∞–Ω–∞ –∫–∞–º–µ—Ä–∞');
            takePhoto();
          }
        },
        {
          text: '–û—Ç–º–µ–Ω–∞',
          style: 'cancel'
        }
      ]
    );
  };

  const pickFromGallery = async () => {
    try {
      console.log('üì∏ pickFromGallery –≤—ã–∑–≤–∞–Ω');
      // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –¥–æ—Å—Ç—É–ø –∫ –≥–∞–ª–µ—Ä–µ–µ
      const { status } = await ImagePicker.requestMediaLibraryPermissionsAsync();
      console.log('üì∏ –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –≥–∞–ª–µ—Ä–µ–∏:', status);
      
      if (status !== 'granted') {
        Alert.alert('–û—à–∏–±–∫–∞', '–ù—É–∂–Ω–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –≥–∞–ª–µ—Ä–µ–µ');
        return;
      }

      // –û—Ç–∫—Ä—ã–≤–∞–µ–º –≥–∞–ª–µ—Ä–µ—é –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ç–æ
      const result = await ImagePicker.launchImageLibraryAsync({
        mediaTypes: ImagePicker.MediaTypeOptions.Images,
        allowsEditing: true,
        aspect: [1, 1],
        quality: 0.8,
      });

      console.log('üì∏ –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–±–æ—Ä–∞ –∏–∑ –≥–∞–ª–µ—Ä–µ–∏:', result);

      if (!result.canceled && result.assets[0]) {
        console.log('üì∏ –§–æ—Ç–æ –≤—ã–±—Ä–∞–Ω–æ:', result.assets[0].uri);
        setFormData({...formData, avatar: result.assets[0].uri});
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ç–æ –∏–∑ –≥–∞–ª–µ—Ä–µ–∏:', error);
      Alert.alert('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ –∏–∑ –≥–∞–ª–µ—Ä–µ–∏.');
    }
  };

  const takePhoto = async () => {
    try {
      console.log('üì∏ takePhoto –≤—ã–∑–≤–∞–Ω');
      // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –¥–æ—Å—Ç—É–ø –∫ –∫–∞–º–µ—Ä–µ
      const { status } = await ImagePicker.requestCameraPermissionsAsync();
      console.log('üì∏ –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –∫–∞–º–µ—Ä—ã:', status);
      
      if (status !== 'granted') {
        Alert.alert('–û—à–∏–±–∫–∞', '–ù—É–∂–Ω–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–º–µ—Ä–µ');
        return;
      }

      // –û—Ç–∫—Ä—ã–≤–∞–µ–º –∫–∞–º–µ—Ä—É –¥–ª—è —Å—ä–µ–º–∫–∏ —Ñ–æ—Ç–æ
      const result = await ImagePicker.launchCameraAsync({
        mediaTypes: ImagePicker.MediaTypeOptions.Images,
        allowsEditing: true,
        aspect: [1, 1],
        quality: 0.8,
      });

      console.log('üì∏ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å—ä–µ–º–∫–∏:', result);

      if (!result.canceled && result.assets[0]) {
        console.log('üì∏ –§–æ—Ç–æ —Å–Ω—è—Ç–æ:', result.assets[0].uri);
        setFormData({...formData, avatar: result.assets[0].uri});
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—ä–µ–º–∫–µ —Ñ–æ—Ç–æ:', error);
      Alert.alert('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–Ω—è—Ç—å —Ñ–æ—Ç–æ');
    }
  };

  const showDatePickerModal = () => {
    setShowDatePicker(true);
  };

  const onDateChange = (event: any, date?: Date) => {
    if (Platform.OS === 'ios') {
      // –ù–∞ iOS –∫–∞–ª–µ–Ω–¥–∞—Ä—å –Ω–µ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
      if (date) {
        setSelectedDate(date);
      }
    } else {
      // –ù–∞ Android –∫–∞–ª–µ–Ω–¥–∞—Ä—å –∑–∞–∫—Ä—ã–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–æ–ª–Ω–æ–º –≤—ã–±–æ—Ä–µ
      if (event.type === 'set' && date) {
        setShowDatePicker(false);
        setSelectedDate(date);
        const day = date.getDate().toString().padStart(2, '0');
        const month = (date.getMonth() + 1).toString().padStart(2, '0');
        const year = date.getFullYear().toString();
        const formattedDate = `${day}.${month}.${year}`;
        setFormData({...formData, birthDate: formattedDate});
      } else if (event.type === 'dismissed') {
        setShowDatePicker(false);
      }
    }
  };

  const handleRegister = async () => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã
    if (!formData.username || !formData.password || !formData.name || !formData.status || !formData.country) {
      showAlert('–û—à–∏–±–∫–∞', '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è', 'error');
      return;
    }

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
    if (formData.status === 'player' && (!formData.birthDate || !formData.team || !formData.position)) {
      showAlert('–û—à–∏–±–∫–∞', '–î–ª—è –∏–≥—Ä–æ–∫–∞ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è, –∫–æ–º–∞–Ω–¥—É –∏ –ø–æ–∑–∏—Ü–∏—é', 'error');
      return;
    }
    if (formData.status === 'coach' && !formData.team) {
      showAlert('–û—à–∏–±–∫–∞', '–î–ª—è —Ç—Ä–µ–Ω–µ—Ä–∞ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É', 'error');
      return;
    }

    try {
      // –î–æ–±–∞–≤–ª—è–µ–º –∏–≥—Ä–æ–∫–∞ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
      const newPlayer = await addPlayer({
        email: formData.username, // –ò—Å–ø–æ–ª—å–∑—É–µ–º username –∫–∞–∫ email –¥–ª—è –≤—Ö–æ–¥–∞
        password: formData.password,
        name: formData.name,
        status: formData.status,
        birthDate: formData.birthDate,
        country: formData.country,
        team: formData.team,
        position: formData.position,
        grip: formData.grip,
        height: formData.height,
        weight: formData.weight,
        avatar: formData.avatar || 'new_player', // –ò—Å–ø–æ–ª—å–∑—É–µ–º avatar –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è
        age: 0, // –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–∑—Ä–∞—Å—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      });
      
      console.log('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏–≥—Ä–æ–∫–∞:', newPlayer);
      
      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—Ö–æ–¥–∏–º –≤ —Å–∏—Å—Ç–µ–º—É
      await saveCurrentUser(newPlayer);
      console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–æ—à–µ–ª –≤ —Å–∏—Å—Ç–µ–º—É:', newPlayer.name);
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      showAlert(
        '–£—Å–ø–µ—à–Ω–æ!', 
        '–ò–≥—Ä–æ–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω! –¢–µ–ø–µ—Ä—å –≤—ã –ø–æ—è–≤–∏—Ç–µ—Å—å –Ω–∞ –≥–ª–∞–≤–Ω–æ–º —ç–∫—Ä–∞–Ω–µ.',
        'success',
        () => {
          setAlert(prev => ({ ...prev, visible: false }));
          setTimeout(() => {
            router.push('/');
          }, 100);
        }
      );
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error);
      showAlert('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–≥—Ä–æ–∫–∞', 'error');
    }
  };

  const positions = ['–ù–∞–ø–∞–¥–∞—é—â–∏–π', '–ó–∞—â–∏—Ç–Ω–∏–∫', '–í—Ä–∞—Ç–∞—Ä—å'];
  const countries = ['–ë–µ–ª–∞—Ä—É—Å—å', '–†–æ—Å—Å–∏—è', '–ö–∞–Ω–∞–¥–∞', '–°–®–ê', '–§–∏–Ω–ª—è–Ω–¥–∏—è', '–®–≤–µ—Ü–∏—è', '–õ–∏—Ç–≤–∞', '–õ–∞—Ç–≤–∏—è', '–ü–æ–ª—å—à–∞'];
  
  // –ö–æ–º–∞–Ω–¥—ã –ø–æ —Å—Ç—Ä–∞–Ω–∞–º
  const teamsByCountry = {
    '–ë–µ–ª–∞—Ä—É—Å—å': ['–ü–∏—Ä–∞–Ω—å–∏', '–Æ–Ω–æ—Å—Ç—å', '–î–∏–Ω–∞–º–æ', '–®–†–°', '–î–∏–Ω–∞–º–æ-–ú–æ–ª–æ–¥–µ—á–Ω–æ'],
    '–†–æ—Å—Å–∏—è': ['–¶–°–ö–ê', '–î–∏–Ω–∞–º–æ –ú–æ—Å–∫–≤–∞', '–°–ø–∞—Ä—Ç–∞–∫', '–õ–æ–∫–æ–º–æ—Ç–∏–≤'],
    '–ö–∞–Ω–∞–¥–∞': ['Toronto Maple Leafs', 'Montreal Canadiens', 'Vancouver Canucks'],
    '–°–®–ê': ['New York Rangers', 'Boston Bruins', 'Chicago Blackhawks'],
    '–§–∏–Ω–ª—è–Ω–¥–∏—è': ['HIFK', 'Tappara', 'K√§rp√§t'],
    '–®–≤–µ—Ü–∏—è': ['F√§rjestad BK', 'HV71', 'Fr√∂lunda HC'],
    '–õ–∏—Ç–≤–∞': ['Kaunas', 'Vilnius', 'Klaipeda'],
    '–õ–∞—Ç–≤–∏—è': ['Riga', 'Daugavpils', 'Liepaja'],
    '–ü–æ–ª—å—à–∞': ['Cracovia', 'GKS Tychy', 'Podhale'],
  };

  return (
    <ImageBackground source={iceBg} style={styles.container} resizeMode="cover">
      <ScrollView contentContainerStyle={styles.scrollContainer}>
        

        
        <View style={styles.formContainer}>

          
          <Text style={styles.title}>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è</Text>
          
          {/* –°—Ç–∞—Ç—É—Å */}
          <View style={styles.inputContainer}>
            <Text style={styles.label}>–°—Ç–∞—Ç—É—Å</Text>
            <View style={styles.pickerContainer}>
              <TouchableOpacity
                style={[
                  styles.pickerOption,
                  formData.status === 'player' && styles.pickerOptionSelected
                ]}
                onPress={() => setFormData({...formData, status: 'player'})}
              >
                <Text style={[
                  styles.pickerOptionText,
                  formData.status === 'player' && styles.pickerOptionTextSelected
                ]}>
                  –ò–≥—Ä–æ–∫
                </Text>
              </TouchableOpacity>
              <TouchableOpacity
                style={[
                  styles.pickerOption,
                  formData.status === 'coach' && styles.pickerOptionSelected
                ]}
                onPress={() => setFormData({...formData, status: 'coach'})}
              >
                <Text style={[
                  styles.pickerOptionText,
                  formData.status === 'coach' && styles.pickerOptionTextSelected
                ]}>
                  –¢—Ä–µ–Ω–µ—Ä
                </Text>
              </TouchableOpacity>
              <TouchableOpacity
                style={[
                  styles.pickerOption,
                  formData.status === 'scout' && styles.pickerOptionSelected
                ]}
                onPress={() => setFormData({...formData, status: 'scout'})}
              >
                <Text style={[
                  styles.pickerOptionText,
                  formData.status === 'scout' && styles.pickerOptionTextSelected
                ]}>
                  –°–∫–∞—É—Ç
                </Text>
              </TouchableOpacity>
            </View>
          </View>
          
          {/* –õ–æ–≥–∏–Ω */}
          <View style={styles.inputContainer}>
            <Text style={styles.label}>–õ–æ–≥–∏–Ω</Text>
            <TextInput
              style={styles.input}
              value={formData.username}
              onChangeText={(text) => setFormData({...formData, username: text})}
              placeholder="–ü—Ä–∏–¥—É–º–∞–π—Ç–µ –ª–æ–≥–∏–Ω"
              placeholderTextColor="#888"
              autoCapitalize="none"
              autoComplete="username"
              textContentType="username"
              autoCorrect={false}
            />
          </View>

          {/* –ü–∞—Ä–æ–ª—å */}
          <View style={styles.inputContainer}>
            <Text style={styles.label}>–ü–∞—Ä–æ–ª—å</Text>
            <TextInput
              style={styles.input}
              value={formData.password}
              onChangeText={(text) => setFormData({...formData, password: text})}
              placeholder="–ü—Ä–∏–¥—É–º–∞–π—Ç–µ –ø–∞—Ä–æ–ª—å"
              placeholderTextColor="#888"
              secureTextEntry={true}
              autoComplete="password"
              textContentType="password"
              autoCorrect={false}
            />
          </View>

          {/* –ò–º—è */}
          <View style={styles.inputContainer}>
            <Text style={styles.label}>–ò–º—è –∏ —Ñ–∞–º–∏–ª–∏—è</Text>
            <TextInput
              style={styles.input}
              value={formData.name}
              onChangeText={(text) => setFormData({...formData, name: text.toUpperCase()})}
              placeholder="–í–í–ï–î–ò–¢–ï –í–ê–®–ï –ò–ú–Ø"
              placeholderTextColor="#888"
              autoCapitalize="characters"
            />
          </View>

          {/* –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è - —Ç–æ–ª—å–∫–æ –¥–ª—è –∏–≥—Ä–æ–∫–æ–≤ */}
          {formData.status === 'player' && (
            <View style={styles.inputContainer}>
              <Text style={styles.label}>–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è</Text>
              <TouchableOpacity style={styles.dateInput} onPress={showDatePickerModal}>
                <Text style={styles.dateInputText}>
                  {formData.birthDate || '–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è'}
                </Text>
                <Ionicons name="calendar" size={20} color="#fff" />
              </TouchableOpacity>
            </View>
          )}

          {/* –°—Ç—Ä–∞–Ω–∞ */}
          <View style={styles.inputContainer}>
            <Text style={styles.label}>–°—Ç—Ä–∞–Ω–∞</Text>
            <View style={styles.pickerContainer}>
              {countries.map((country) => (
                <TouchableOpacity
                  key={country}
                  style={[
                    styles.pickerOption,
                    formData.country === country && styles.pickerOptionSelected
                  ]}
                  onPress={() => {
                    setFormData({...formData, country: country, team: ''}); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É –ø—Ä–∏ —Å–º–µ–Ω–µ —Å—Ç—Ä–∞–Ω—ã
                  }}
                >
                  <Text style={[
                    styles.pickerOptionText,
                    formData.country === country && styles.pickerOptionTextSelected
                  ]}>
                    {country}
                  </Text>
                </TouchableOpacity>
              ))}
            </View>
          </View>

          {/* –ö–æ–º–∞–Ω–¥–∞ - —Ç–æ–ª—å–∫–æ –¥–ª—è –∏–≥—Ä–æ–∫–æ–≤ –∏ —Ç—Ä–µ–Ω–µ—Ä–æ–≤ */}
          {(formData.status === 'player' || formData.status === 'coach') && (
            <View style={styles.inputContainer}>
              <Text style={styles.label}>–ö–æ–º–∞–Ω–¥–∞</Text>
              <View style={styles.pickerContainer}>
                {teamsByCountry[formData.country as keyof typeof teamsByCountry]?.map((team) => (
                  <TouchableOpacity
                    key={team}
                    style={[
                      styles.pickerOption,
                      formData.team === team && styles.pickerOptionSelected
                    ]}
                    onPress={() => setFormData({...formData, team: team})}
                  >
                    <Text style={[
                      styles.pickerOptionText,
                      formData.team === team && styles.pickerOptionTextSelected
                    ]}>
                      {team}
                    </Text>
                  </TouchableOpacity>
                ))}
              </View>
            </View>
          )}

          {/* –ü–æ–∑–∏—Ü–∏—è - —Ç–æ–ª—å–∫–æ –¥–ª—è –∏–≥—Ä–æ–∫–æ–≤ */}
          {formData.status === 'player' && (
            <View style={styles.inputContainer}>
              <Text style={styles.label}>–ü–æ–∑–∏—Ü–∏—è</Text>
              <View style={styles.pickerContainer}>
                {positions.map((pos) => (
                  <TouchableOpacity
                    key={pos}
                    style={[
                      styles.pickerOption,
                      formData.position === pos && styles.pickerOptionSelected
                    ]}
                    onPress={() => setFormData({...formData, position: pos})}
                  >
                    <Text style={[
                      styles.pickerOptionText,
                      formData.position === pos && styles.pickerOptionTextSelected
                    ]}>
                      {pos}
                    </Text>
                  </TouchableOpacity>
                ))}
              </View>
            </View>
          )}

          {/* –ù–æ–º–µ—Ä - —Ç–æ–ª—å–∫–æ –¥–ª—è –∏–≥—Ä–æ–∫–æ–≤ */}
          {formData.status === 'player' && (
            <View style={styles.inputContainer}>
              <Text style={styles.label}>–ù–æ–º–µ—Ä</Text>
              <TextInput
                style={styles.input}
                value={formData.number}
                onChangeText={(text) => setFormData({...formData, number: text})}
                placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä"
                placeholderTextColor="#888"
                keyboardType="numeric"
                maxLength={2}
              />
            </View>
          )}

          {/* –•–≤–∞—Ç - —Ç–æ–ª—å–∫–æ –¥–ª—è –∏–≥—Ä–æ–∫–æ–≤ */}
          {formData.status === 'player' && (
            <View style={styles.inputContainer}>
              <Text style={styles.label}>–•–≤–∞—Ç</Text>
              <View style={styles.pickerContainer}>
                {['–õ–µ–≤—ã–π', '–ü—Ä–∞–≤—ã–π'].map((grip) => (
                  <TouchableOpacity
                    key={grip}
                    style={[
                      styles.pickerOption,
                      formData.grip === grip && styles.pickerOptionSelected
                    ]}
                    onPress={() => setFormData({...formData, grip: grip})}
                  >
                    <Text style={[
                      styles.pickerOptionText,
                      formData.grip === grip && styles.pickerOptionTextSelected
                    ]}>
                      {grip}
                    </Text>
                  </TouchableOpacity>
                ))}
              </View>
            </View>
          )}

          {/* –†–æ—Å—Ç - —Ç–æ–ª—å–∫–æ –¥–ª—è –∏–≥—Ä–æ–∫–æ–≤ */}
          {formData.status === 'player' && (
            <View style={styles.inputContainer}>
              <Text style={styles.label}>–†–æ—Å—Ç (—Å–º)</Text>
              <TextInput
                style={styles.input}
                value={formData.height}
                onChangeText={(text) => setFormData({...formData, height: text})}
                placeholder="–í–≤–µ–¥–∏—Ç–µ —Ä–æ—Å—Ç"
                placeholderTextColor="#888"
                keyboardType="numeric"
              />
            </View>
          )}

          {/* –í–µ—Å - —Ç–æ–ª—å–∫–æ –¥–ª—è –∏–≥—Ä–æ–∫–æ–≤ */}
          {formData.status === 'player' && (
            <View style={styles.inputContainer}>
              <Text style={styles.label}>–í–µ—Å (–∫–≥)</Text>
              <TextInput
                style={styles.input}
                value={formData.weight}
                onChangeText={(text) => setFormData({...formData, weight: text})}
                placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–µ—Å"
                placeholderTextColor="#888"
                keyboardType="numeric"
              />
            </View>
          )}



          {/* –§–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è */}
          <View style={styles.inputContainer}>
            <Text style={styles.label}>–§–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è</Text>
            <View style={styles.photoContainer}>
              {formData.avatar ? (
                <Image source={{ uri: formData.avatar }} style={styles.photoPreview} />
              ) : (
                <View style={styles.photoPlaceholder}>
                  <Ionicons name="camera" size={30} color="#888" />
                  <Text style={styles.photoPlaceholderText}>–î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ</Text>
                </View>
              )}
              <TouchableOpacity style={styles.photoButton} onPress={pickImage}>
                <Text style={styles.photoButtonText}>–í—ã–±—Ä–∞—Ç—å —Ñ–æ—Ç–æ</Text>
              </TouchableOpacity>
            </View>
          </View>

          {/* –ö–Ω–æ–ø–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ */}
          <TouchableOpacity style={styles.registerButton} onPress={handleRegister}>
            <Ionicons name="person-add" size={20} color="#fff" />
            <Text style={styles.registerButtonText}>–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è</Text>
          </TouchableOpacity>


        </View>
      </ScrollView>
      
      {/* DateTimePicker */}
      {showDatePicker && (
        <View style={styles.datePickerOverlay}>
          <View style={styles.datePickerModal}>
            <DateTimePicker
              value={selectedDate}
              mode="date"
              display={Platform.OS === 'ios' ? 'spinner' : 'default'}
              onChange={onDateChange}
              maximumDate={new Date()}
              minimumDate={new Date(1990, 0, 1)}
              textColor="#fff"
              themeVariant="dark"
            />
            {Platform.OS === 'ios' && (
              <View style={styles.datePickerButtons}>
                <TouchableOpacity 
                  style={styles.datePickerButton} 
                  onPress={() => setShowDatePicker(false)}
                >
                  <Text style={styles.datePickerButtonText}>–û—Ç–º–µ–Ω–∞</Text>
                </TouchableOpacity>
                <TouchableOpacity 
                  style={[styles.datePickerButton, styles.confirmButton]} 
                  onPress={() => {
                    const day = selectedDate.getDate().toString().padStart(2, '0');
                    const month = (selectedDate.getMonth() + 1).toString().padStart(2, '0');
                    const year = selectedDate.getFullYear().toString();
                    const formattedDate = `${day}.${month}.${year}`;
                    setFormData({...formData, birthDate: formattedDate});
                    setShowDatePicker(false);
                  }}
                >
                  <Text style={styles.datePickerButtonText}>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å</Text>
                </TouchableOpacity>
              </View>
            )}
          </View>
        </View>
      )}

      {/* –ö–∞—Å—Ç–æ–º–Ω—ã–π –∞–ª–µ—Ä—Ç */}
      <CustomAlert
        visible={alert.visible}
        title={alert.title}
        message={alert.message}
        type={alert.type}
        onConfirm={alert.onConfirm}
        onCancel={alert.onCancel}
        onSecondary={alert.onSecondary}
        showCancel={alert.showCancel}
        showSecondary={alert.showSecondary}
        confirmText={alert.confirmText}
        cancelText={alert.cancelText}
        secondaryText={alert.secondaryText}
      />
    </ImageBackground>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#000',
  },
  scrollContainer: {
    flexGrow: 1,
    padding: 20,
  },
  formContainer: {
    backgroundColor: 'rgba(0, 0, 0, 0.5)',
    borderRadius: 20,
    padding: 25,
    marginTop: 20,
    borderWidth: 1,
    borderColor: 'rgba(255, 255, 255, 0.2)',
  },
  title: {
    fontSize: 28,
    fontFamily: 'Gilroy-Bold',
    color: '#fff',
    textAlign: 'center',
    marginBottom: 30,
  },
  inputContainer: {
    marginBottom: 20,
  },
  label: {
    fontSize: 16,
    fontFamily: 'Gilroy-Bold',
    color: '#fff',
    marginBottom: 8,
  },
  input: {
    backgroundColor: 'rgba(255, 255, 255, 0.1)',
    borderRadius: 10,
    padding: 15,
    fontSize: 16,
    fontFamily: 'Gilroy-Regular',
    color: '#fff',
    borderWidth: 1,
    borderColor: 'rgba(255, 255, 255, 0.3)',
  },
  pickerContainer: {
    flexDirection: 'row',
    flexWrap: 'wrap',
    gap: 10,
  },
  pickerOption: {
    backgroundColor: 'rgba(255, 255, 255, 0.1)',
    borderRadius: 8,
    paddingHorizontal: 15,
    paddingVertical: 10,
    borderWidth: 1,
    borderColor: 'rgba(255, 255, 255, 0.3)',
  },
  pickerOptionSelected: {
    backgroundColor: '#FF4444',
    borderColor: '#FF4444',
  },
  pickerOptionText: {
    fontSize: 14,
    fontFamily: 'Gilroy-Regular',
    color: '#fff',
  },
  pickerOptionTextSelected: {
    color: '#fff',
    fontFamily: 'Gilroy-Bold',
  },
  dateInput: {
    backgroundColor: 'rgba(255, 255, 255, 0.1)',
    borderRadius: 10,
    padding: 15,
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    borderWidth: 1,
    borderColor: 'rgba(255, 255, 255, 0.3)',
  },
  dateInputText: {
    fontSize: 16,
    fontFamily: 'Gilroy-Regular',
    color: '#fff',
  },
  textArea: {
    height: 80,
    textAlignVertical: 'top',
  },
  datePickerOverlay: {
    position: 'absolute',
    top: 0,
    left: 0,
    right: 0,
    bottom: 0,
    backgroundColor: 'rgba(0, 0, 0, 0.5)',
    justifyContent: 'center',
    alignItems: 'center',
    zIndex: 1000,
  },
  datePickerModal: {
    backgroundColor: '#000',
    borderRadius: 15,
    padding: 20,
    borderWidth: 1,
    borderColor: 'rgba(255, 255, 255, 0.2)',
    minWidth: 300,
  },
  datePickerButtons: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    marginTop: 15,
    gap: 10,
  },
  datePickerButton: {
    flex: 1,
    backgroundColor: 'rgba(255, 255, 255, 0.1)',
    borderRadius: 8,
    padding: 12,
    alignItems: 'center',
    borderWidth: 1,
    borderColor: 'rgba(255, 255, 255, 0.2)',
  },
  confirmButton: {
    backgroundColor: '#FF4444',
    borderColor: '#FF4444',
  },
  datePickerButtonText: {
    fontSize: 14,
    fontFamily: 'Gilroy-Bold',
    color: '#fff',
  },

  photoContainer: {
    alignItems: 'center',
    marginTop: 10,
  },
  photoPreview: {
    width: 120,
    height: 120,
    borderRadius: 60,
    borderWidth: 3,
    borderColor: '#FF4444',
  },
  photoPlaceholder: {
    width: 120,
    height: 120,
    borderRadius: 60,
    backgroundColor: 'rgba(255, 255, 255, 0.1)',
    borderWidth: 2,
    borderColor: 'rgba(255, 255, 255, 0.3)',
    borderStyle: 'dashed',
    justifyContent: 'center',
    alignItems: 'center',
  },
  photoPlaceholderText: {
    fontSize: 12,
    fontFamily: 'Gilroy-Regular',
    color: '#888',
    textAlign: 'center',
    marginTop: 5,
  },
  photoButton: {
    backgroundColor: '#FF4444',
    borderRadius: 10,
    padding: 12,
    marginTop: 15,
  },
  photoButtonText: {
    fontSize: 14,
    fontFamily: 'Gilroy-Bold',
    color: '#fff',
  },
  registerButton: {
    backgroundColor: '#FF4444',
    borderRadius: 15,
    padding: 18,
    alignItems: 'center',
    marginTop: 20,
    marginBottom: 15,
    flexDirection: 'row',
    justifyContent: 'center',
  },
  registerButtonText: {
    fontSize: 18,
    fontFamily: 'Gilroy-Bold',
    color: '#fff',
    marginLeft: 8,
  },

}); 