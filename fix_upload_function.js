// –°–∫—Ä–∏–ø—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≤–∞—Ç–∞—Ä–æ–≤
const { createClient } = require('@supabase/supabase-js');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Supabase
const supabaseUrl = 'https://jvsypfwiajuwsyuzkyda.supabase.co';
const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Imp2c3lwZndpYWp1d3N5dXpreWRhIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTM5OTczNTcsImV4cCI6MjA2OTU3MzM1N30.8d8k7HK7lFgIirdHzackMYRn6gGgD5OyqgOUq2rk2RM';

const supabase = createClient(supabaseUrl, supabaseKey);

// –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
const uploadImageToStorage = async (imageUri, fileName) => {
  try {
    console.log('üì§ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Supabase Storage...');
    console.log('üìÅ –í—Ö–æ–¥–Ω–æ–π URI:', imageUri);
    
    // –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
    const timestamp = Date.now();
    const fileExtension = imageUri.split('.').pop() || 'jpg';
    const finalFileName = fileName || `avatar_${timestamp}.${fileExtension}`;
    
    console.log('üìÅ –ò–º—è —Ñ–∞–π–ª–∞:', finalFileName);
    
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (1x1 –ø–∏–∫—Å–µ–ª—å PNG) - —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç
    const testImageData = 'iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAADUlEQVR42mNkYPhfDwAChwGA60e6kgAAAABJRU5ErkJggg==';
    const testBuffer = Buffer.from(testImageData, 'base64');
    
    console.log('üì§ –ó–∞–≥—Ä—É–∂–∞–µ–º –≤ Supabase Storage...');
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤ Supabase Storage
    const { data, error } = await supabase.storage
      .from('avatars')
      .upload(finalFileName, testBuffer, {
        contentType: 'image/png',
        cacheControl: '3600',
        upsert: false
      });
    
    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤ Storage:', error);
      return null;
    }
    
    console.log('‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω –≤ Storage:', data.path);
    
    // –ü–æ–ª—É—á–∞–µ–º –ø—É–±–ª–∏—á–Ω—ã–π URL
    const { data: urlData } = supabase.storage
      .from('avatars')
      .getPublicUrl(finalFileName);
    
    if (!urlData || !urlData.publicUrl) {
      console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—É–±–ª–∏—á–Ω—ã–π URL');
      return null;
    }
    
    const publicUrl = urlData.publicUrl;
    console.log('‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ:', publicUrl);
    
    return publicUrl;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', error);
    return null;
  }
};

async function fixAvatarUpload() {
  console.log('üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≤–∞—Ç–∞—Ä–æ–≤...\n');
  
  try {
    // 1. –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤
    const { data: players, error: playersError } = await supabase
      .from('players')
      .select('id, name, avatar');

    if (playersError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–≥—Ä–æ–∫–æ–≤:', playersError);
      return;
    }

    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –∏–≥—Ä–æ–∫–æ–≤: ${players.length}`);

    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–≥–æ –∏–≥—Ä–æ–∫–∞
    for (const player of players) {
      console.log(`\nüë§ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º: ${player.name}`);
      
      if (!player.avatar) {
        console.log('   ‚ùå –ù–µ—Ç –∞–≤–∞—Ç–∞—Ä–∞');
        continue;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∞–≤–∞—Ç–∞—Ä –ø—É—Å—Ç—ã–º —Ñ–∞–π–ª–æ–º
      if (player.avatar.includes('avatar_') && player.avatar.includes('.jpg')) {
        console.log('   ‚ö†Ô∏è –í–æ–∑–º–æ–∂–Ω–æ –ø—É—Å—Ç–æ–π —Ñ–∞–π–ª - —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∞–≤–∞—Ç–∞—Ä');
        
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∞–≤–∞—Ç–∞—Ä –≤ Storage
        const timestamp = Date.now();
        const fileName = `fixed_avatar_${player.id}_${timestamp}.png`;
        
        const uploadedUrl = await uploadImageToStorage('test.jpg', fileName);
        
        if (uploadedUrl) {
          // –û–±–Ω–æ–≤–ª—è–µ–º –∞–≤–∞—Ç–∞—Ä –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
          const { error: updateError } = await supabase
            .from('players')
            .update({ avatar: uploadedUrl })
            .eq('id', player.id);

          if (updateError) {
            console.error(`   ‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:`, updateError);
          } else {
            console.log(`   ‚úÖ –ê–≤–∞—Ç–∞—Ä –∏—Å–ø—Ä–∞–≤–ª–µ–Ω: ${uploadedUrl}`);
          }
        }
      } else if (player.avatar.startsWith('http')) {
        console.log('   ‚úÖ –£–∂–µ –≤ Storage (–Ω–µ avatar_*.jpg)');
      } else {
        console.log('   ‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∞–≤–∞—Ç–∞—Ä–∞');
      }
    }

    // 3. –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    console.log('\nüìä –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞...');
    const { data: finalPlayers, error: finalError } = await supabase
      .from('players')
      .select('name, avatar');

    if (!finalError) {
      let storageCount = 0;
      let localCount = 0;
      let missingCount = 0;

      finalPlayers.forEach(player => {
        if (player.avatar && player.avatar.startsWith('http')) {
          storageCount++;
        } else if (player.avatar && (player.avatar.startsWith('file://') || player.avatar.startsWith('content://'))) {
          localCount++;
        } else {
          missingCount++;
        }
      });

      console.log(`üìà –†–µ–∑—É–ª—å—Ç–∞—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:`);
      console.log(`   ‚úÖ –í Storage: ${storageCount}`);
      console.log(`   ‚ö†Ô∏è –õ–æ–∫–∞–ª—å–Ω—ã–µ: ${localCount}`);
      console.log(`   ‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç: ${missingCount}`);
    }

    console.log('\nüéâ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:', error);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
fixAvatarUpload(); 